
FLASH_RUN/firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000401c  08003000  08003000  00003000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000005b0  20000000  0800701c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000dc8  200005b0  080075d0  000905b0  2**3
                  ALLOC
  3 ._usrstack    00000100  20001378  08008398  000905b0  2**0
                  ALLOC
  4 .fill         00078a34  080075cc  080075cc  000175cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .comment      0000007e  00000000  00000000  00090000  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000bd8  00000000  00000000  0009007e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00022314  00000000  00000000  00090c56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002da7  00000000  00000000  000b2f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004444  00000000  00000000  000b5d11  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000023ac  00000000  00000000  000ba158  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000625e  00000000  00000000  000bc504  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009da6  00000000  00000000  000c2762  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001070  00000000  00000000  000cc508  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000031  00000000  00000000  000cd578  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08003000 <g_pfnVectors>:
 8003000:	00 f0 00 20 69 4e 00 08 00 00 00 00 91 4a 00 08     ... iN.......J..
 8003010:	a5 4a 00 08 b9 4a 00 08 cd 4a 00 08 00 00 00 00     .J...J...J......
	...
 800302c:	65 4e 00 08 65 4e 00 08 00 00 00 00 65 4e 00 08     eN..eN......eN..
 800303c:	65 4e 00 08 65 4e 00 08 65 4e 00 08 65 4e 00 08     eN..eN..eN..eN..
 800304c:	65 4e 00 08 65 4e 00 08 65 4e 00 08 65 4e 00 08     eN..eN..eN..eN..
 800305c:	65 4e 00 08 65 4e 00 08 65 4e 00 08 65 4e 00 08     eN..eN..eN..eN..
 800306c:	65 4e 00 08 65 4e 00 08 65 4e 00 08 65 4e 00 08     eN..eN..eN..eN..
 800307c:	65 4e 00 08 65 4e 00 08 65 4e 00 08 65 4e 00 08     eN..eN..eN..eN..
 800308c:	65 4e 00 08 65 4e 00 08 65 4e 00 08 65 4e 00 08     eN..eN..eN..eN..
 800309c:	65 4e 00 08 65 4e 00 08 65 4e 00 08 65 4e 00 08     eN..eN..eN..eN..
 80030ac:	65 4e 00 08 65 4e 00 08 65 4e 00 08 65 4e 00 08     eN..eN..eN..eN..
 80030bc:	65 4e 00 08 65 4e 00 08 65 4e 00 08 65 4e 00 08     eN..eN..eN..eN..
 80030cc:	65 4e 00 08 65 4e 00 08 61 4a 00 08 65 4e 00 08     eN..eN..aJ..eN..
 80030dc:	65 4e 00 08 65 4e 00 08 65 4e 00 08 65 4e 00 08     eN..eN..eN..eN..
	...
 8003108:	5f f8 08 f1                                         _...

0800310c <__aeabi_drsub>:
 800310c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8003110:	e002      	b.n	8003118 <__adddf3>
 8003112:	bf00      	nop

08003114 <__aeabi_dsub>:
 8003114:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08003118 <__adddf3>:
 8003118:	b530      	push	{r4, r5, lr}
 800311a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800311e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8003122:	ea94 0f05 	teq	r4, r5
 8003126:	bf08      	it	eq
 8003128:	ea90 0f02 	teqeq	r0, r2
 800312c:	bf1f      	itttt	ne
 800312e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8003132:	ea55 0c02 	orrsne.w	ip, r5, r2
 8003136:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800313a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800313e:	f000 80e2 	beq.w	8003306 <__adddf3+0x1ee>
 8003142:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8003146:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800314a:	bfb8      	it	lt
 800314c:	426d      	neglt	r5, r5
 800314e:	dd0c      	ble.n	800316a <__adddf3+0x52>
 8003150:	442c      	add	r4, r5
 8003152:	ea80 0202 	eor.w	r2, r0, r2
 8003156:	ea81 0303 	eor.w	r3, r1, r3
 800315a:	ea82 0000 	eor.w	r0, r2, r0
 800315e:	ea83 0101 	eor.w	r1, r3, r1
 8003162:	ea80 0202 	eor.w	r2, r0, r2
 8003166:	ea81 0303 	eor.w	r3, r1, r3
 800316a:	2d36      	cmp	r5, #54	; 0x36
 800316c:	bf88      	it	hi
 800316e:	bd30      	pophi	{r4, r5, pc}
 8003170:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8003174:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8003178:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800317c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8003180:	d002      	beq.n	8003188 <__adddf3+0x70>
 8003182:	4240      	negs	r0, r0
 8003184:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003188:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800318c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003190:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8003194:	d002      	beq.n	800319c <__adddf3+0x84>
 8003196:	4252      	negs	r2, r2
 8003198:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800319c:	ea94 0f05 	teq	r4, r5
 80031a0:	f000 80a7 	beq.w	80032f2 <__adddf3+0x1da>
 80031a4:	f1a4 0401 	sub.w	r4, r4, #1
 80031a8:	f1d5 0e20 	rsbs	lr, r5, #32
 80031ac:	db0d      	blt.n	80031ca <__adddf3+0xb2>
 80031ae:	fa02 fc0e 	lsl.w	ip, r2, lr
 80031b2:	fa22 f205 	lsr.w	r2, r2, r5
 80031b6:	1880      	adds	r0, r0, r2
 80031b8:	f141 0100 	adc.w	r1, r1, #0
 80031bc:	fa03 f20e 	lsl.w	r2, r3, lr
 80031c0:	1880      	adds	r0, r0, r2
 80031c2:	fa43 f305 	asr.w	r3, r3, r5
 80031c6:	4159      	adcs	r1, r3
 80031c8:	e00e      	b.n	80031e8 <__adddf3+0xd0>
 80031ca:	f1a5 0520 	sub.w	r5, r5, #32
 80031ce:	f10e 0e20 	add.w	lr, lr, #32
 80031d2:	2a01      	cmp	r2, #1
 80031d4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80031d8:	bf28      	it	cs
 80031da:	f04c 0c02 	orrcs.w	ip, ip, #2
 80031de:	fa43 f305 	asr.w	r3, r3, r5
 80031e2:	18c0      	adds	r0, r0, r3
 80031e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80031e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80031ec:	d507      	bpl.n	80031fe <__adddf3+0xe6>
 80031ee:	f04f 0e00 	mov.w	lr, #0
 80031f2:	f1dc 0c00 	rsbs	ip, ip, #0
 80031f6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80031fa:	eb6e 0101 	sbc.w	r1, lr, r1
 80031fe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003202:	d31b      	bcc.n	800323c <__adddf3+0x124>
 8003204:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8003208:	d30c      	bcc.n	8003224 <__adddf3+0x10c>
 800320a:	0849      	lsrs	r1, r1, #1
 800320c:	ea5f 0030 	movs.w	r0, r0, rrx
 8003210:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8003214:	f104 0401 	add.w	r4, r4, #1
 8003218:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800321c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8003220:	f080 809a 	bcs.w	8003358 <__adddf3+0x240>
 8003224:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8003228:	bf08      	it	eq
 800322a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800322e:	f150 0000 	adcs.w	r0, r0, #0
 8003232:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003236:	ea41 0105 	orr.w	r1, r1, r5
 800323a:	bd30      	pop	{r4, r5, pc}
 800323c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8003240:	4140      	adcs	r0, r0
 8003242:	eb41 0101 	adc.w	r1, r1, r1
 8003246:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800324a:	f1a4 0401 	sub.w	r4, r4, #1
 800324e:	d1e9      	bne.n	8003224 <__adddf3+0x10c>
 8003250:	f091 0f00 	teq	r1, #0
 8003254:	bf04      	itt	eq
 8003256:	4601      	moveq	r1, r0
 8003258:	2000      	moveq	r0, #0
 800325a:	fab1 f381 	clz	r3, r1
 800325e:	bf08      	it	eq
 8003260:	3320      	addeq	r3, #32
 8003262:	f1a3 030b 	sub.w	r3, r3, #11
 8003266:	f1b3 0220 	subs.w	r2, r3, #32
 800326a:	da0c      	bge.n	8003286 <__adddf3+0x16e>
 800326c:	320c      	adds	r2, #12
 800326e:	dd08      	ble.n	8003282 <__adddf3+0x16a>
 8003270:	f102 0c14 	add.w	ip, r2, #20
 8003274:	f1c2 020c 	rsb	r2, r2, #12
 8003278:	fa01 f00c 	lsl.w	r0, r1, ip
 800327c:	fa21 f102 	lsr.w	r1, r1, r2
 8003280:	e00c      	b.n	800329c <__adddf3+0x184>
 8003282:	f102 0214 	add.w	r2, r2, #20
 8003286:	bfd8      	it	le
 8003288:	f1c2 0c20 	rsble	ip, r2, #32
 800328c:	fa01 f102 	lsl.w	r1, r1, r2
 8003290:	fa20 fc0c 	lsr.w	ip, r0, ip
 8003294:	bfdc      	itt	le
 8003296:	ea41 010c 	orrle.w	r1, r1, ip
 800329a:	4090      	lslle	r0, r2
 800329c:	1ae4      	subs	r4, r4, r3
 800329e:	bfa2      	ittt	ge
 80032a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80032a4:	4329      	orrge	r1, r5
 80032a6:	bd30      	popge	{r4, r5, pc}
 80032a8:	ea6f 0404 	mvn.w	r4, r4
 80032ac:	3c1f      	subs	r4, #31
 80032ae:	da1c      	bge.n	80032ea <__adddf3+0x1d2>
 80032b0:	340c      	adds	r4, #12
 80032b2:	dc0e      	bgt.n	80032d2 <__adddf3+0x1ba>
 80032b4:	f104 0414 	add.w	r4, r4, #20
 80032b8:	f1c4 0220 	rsb	r2, r4, #32
 80032bc:	fa20 f004 	lsr.w	r0, r0, r4
 80032c0:	fa01 f302 	lsl.w	r3, r1, r2
 80032c4:	ea40 0003 	orr.w	r0, r0, r3
 80032c8:	fa21 f304 	lsr.w	r3, r1, r4
 80032cc:	ea45 0103 	orr.w	r1, r5, r3
 80032d0:	bd30      	pop	{r4, r5, pc}
 80032d2:	f1c4 040c 	rsb	r4, r4, #12
 80032d6:	f1c4 0220 	rsb	r2, r4, #32
 80032da:	fa20 f002 	lsr.w	r0, r0, r2
 80032de:	fa01 f304 	lsl.w	r3, r1, r4
 80032e2:	ea40 0003 	orr.w	r0, r0, r3
 80032e6:	4629      	mov	r1, r5
 80032e8:	bd30      	pop	{r4, r5, pc}
 80032ea:	fa21 f004 	lsr.w	r0, r1, r4
 80032ee:	4629      	mov	r1, r5
 80032f0:	bd30      	pop	{r4, r5, pc}
 80032f2:	f094 0f00 	teq	r4, #0
 80032f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80032fa:	bf06      	itte	eq
 80032fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8003300:	3401      	addeq	r4, #1
 8003302:	3d01      	subne	r5, #1
 8003304:	e74e      	b.n	80031a4 <__adddf3+0x8c>
 8003306:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800330a:	bf18      	it	ne
 800330c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003310:	d029      	beq.n	8003366 <__adddf3+0x24e>
 8003312:	ea94 0f05 	teq	r4, r5
 8003316:	bf08      	it	eq
 8003318:	ea90 0f02 	teqeq	r0, r2
 800331c:	d005      	beq.n	800332a <__adddf3+0x212>
 800331e:	ea54 0c00 	orrs.w	ip, r4, r0
 8003322:	bf04      	itt	eq
 8003324:	4619      	moveq	r1, r3
 8003326:	4610      	moveq	r0, r2
 8003328:	bd30      	pop	{r4, r5, pc}
 800332a:	ea91 0f03 	teq	r1, r3
 800332e:	bf1e      	ittt	ne
 8003330:	2100      	movne	r1, #0
 8003332:	2000      	movne	r0, #0
 8003334:	bd30      	popne	{r4, r5, pc}
 8003336:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800333a:	d105      	bne.n	8003348 <__adddf3+0x230>
 800333c:	0040      	lsls	r0, r0, #1
 800333e:	4149      	adcs	r1, r1
 8003340:	bf28      	it	cs
 8003342:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8003346:	bd30      	pop	{r4, r5, pc}
 8003348:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800334c:	bf3c      	itt	cc
 800334e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8003352:	bd30      	popcc	{r4, r5, pc}
 8003354:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003358:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800335c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003360:	f04f 0000 	mov.w	r0, #0
 8003364:	bd30      	pop	{r4, r5, pc}
 8003366:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800336a:	bf1a      	itte	ne
 800336c:	4619      	movne	r1, r3
 800336e:	4610      	movne	r0, r2
 8003370:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8003374:	bf1c      	itt	ne
 8003376:	460b      	movne	r3, r1
 8003378:	4602      	movne	r2, r0
 800337a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800337e:	bf06      	itte	eq
 8003380:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8003384:	ea91 0f03 	teqeq	r1, r3
 8003388:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800338c:	bd30      	pop	{r4, r5, pc}
 800338e:	bf00      	nop

08003390 <__aeabi_ui2d>:
 8003390:	f090 0f00 	teq	r0, #0
 8003394:	bf04      	itt	eq
 8003396:	2100      	moveq	r1, #0
 8003398:	4770      	bxeq	lr
 800339a:	b530      	push	{r4, r5, lr}
 800339c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80033a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80033a4:	f04f 0500 	mov.w	r5, #0
 80033a8:	f04f 0100 	mov.w	r1, #0
 80033ac:	e750      	b.n	8003250 <__adddf3+0x138>
 80033ae:	bf00      	nop

080033b0 <__aeabi_i2d>:
 80033b0:	f090 0f00 	teq	r0, #0
 80033b4:	bf04      	itt	eq
 80033b6:	2100      	moveq	r1, #0
 80033b8:	4770      	bxeq	lr
 80033ba:	b530      	push	{r4, r5, lr}
 80033bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80033c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80033c4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80033c8:	bf48      	it	mi
 80033ca:	4240      	negmi	r0, r0
 80033cc:	f04f 0100 	mov.w	r1, #0
 80033d0:	e73e      	b.n	8003250 <__adddf3+0x138>
 80033d2:	bf00      	nop

080033d4 <__aeabi_f2d>:
 80033d4:	0042      	lsls	r2, r0, #1
 80033d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80033da:	ea4f 0131 	mov.w	r1, r1, rrx
 80033de:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80033e2:	bf1f      	itttt	ne
 80033e4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80033e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80033ec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80033f0:	4770      	bxne	lr
 80033f2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80033f6:	bf08      	it	eq
 80033f8:	4770      	bxeq	lr
 80033fa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80033fe:	bf04      	itt	eq
 8003400:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8003404:	4770      	bxeq	lr
 8003406:	b530      	push	{r4, r5, lr}
 8003408:	f44f 7460 	mov.w	r4, #896	; 0x380
 800340c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003410:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003414:	e71c      	b.n	8003250 <__adddf3+0x138>
 8003416:	bf00      	nop

08003418 <__aeabi_ul2d>:
 8003418:	ea50 0201 	orrs.w	r2, r0, r1
 800341c:	bf08      	it	eq
 800341e:	4770      	bxeq	lr
 8003420:	b530      	push	{r4, r5, lr}
 8003422:	f04f 0500 	mov.w	r5, #0
 8003426:	e00a      	b.n	800343e <__aeabi_l2d+0x16>

08003428 <__aeabi_l2d>:
 8003428:	ea50 0201 	orrs.w	r2, r0, r1
 800342c:	bf08      	it	eq
 800342e:	4770      	bxeq	lr
 8003430:	b530      	push	{r4, r5, lr}
 8003432:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8003436:	d502      	bpl.n	800343e <__aeabi_l2d+0x16>
 8003438:	4240      	negs	r0, r0
 800343a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800343e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003442:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003446:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800344a:	f43f aed8 	beq.w	80031fe <__adddf3+0xe6>
 800344e:	f04f 0203 	mov.w	r2, #3
 8003452:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003456:	bf18      	it	ne
 8003458:	3203      	addne	r2, #3
 800345a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800345e:	bf18      	it	ne
 8003460:	3203      	addne	r2, #3
 8003462:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8003466:	f1c2 0320 	rsb	r3, r2, #32
 800346a:	fa00 fc03 	lsl.w	ip, r0, r3
 800346e:	fa20 f002 	lsr.w	r0, r0, r2
 8003472:	fa01 fe03 	lsl.w	lr, r1, r3
 8003476:	ea40 000e 	orr.w	r0, r0, lr
 800347a:	fa21 f102 	lsr.w	r1, r1, r2
 800347e:	4414      	add	r4, r2
 8003480:	e6bd      	b.n	80031fe <__adddf3+0xe6>
 8003482:	bf00      	nop

08003484 <__aeabi_dmul>:
 8003484:	b570      	push	{r4, r5, r6, lr}
 8003486:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800348a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800348e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8003492:	bf1d      	ittte	ne
 8003494:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8003498:	ea94 0f0c 	teqne	r4, ip
 800349c:	ea95 0f0c 	teqne	r5, ip
 80034a0:	f000 f8de 	bleq	8003660 <__aeabi_dmul+0x1dc>
 80034a4:	442c      	add	r4, r5
 80034a6:	ea81 0603 	eor.w	r6, r1, r3
 80034aa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80034ae:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80034b2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80034b6:	bf18      	it	ne
 80034b8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80034bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80034c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034c4:	d038      	beq.n	8003538 <__aeabi_dmul+0xb4>
 80034c6:	fba0 ce02 	umull	ip, lr, r0, r2
 80034ca:	f04f 0500 	mov.w	r5, #0
 80034ce:	fbe1 e502 	umlal	lr, r5, r1, r2
 80034d2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80034d6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80034da:	f04f 0600 	mov.w	r6, #0
 80034de:	fbe1 5603 	umlal	r5, r6, r1, r3
 80034e2:	f09c 0f00 	teq	ip, #0
 80034e6:	bf18      	it	ne
 80034e8:	f04e 0e01 	orrne.w	lr, lr, #1
 80034ec:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80034f0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80034f4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80034f8:	d204      	bcs.n	8003504 <__aeabi_dmul+0x80>
 80034fa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80034fe:	416d      	adcs	r5, r5
 8003500:	eb46 0606 	adc.w	r6, r6, r6
 8003504:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8003508:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800350c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8003510:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8003514:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8003518:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800351c:	bf88      	it	hi
 800351e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8003522:	d81e      	bhi.n	8003562 <__aeabi_dmul+0xde>
 8003524:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8003528:	bf08      	it	eq
 800352a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800352e:	f150 0000 	adcs.w	r0, r0, #0
 8003532:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003536:	bd70      	pop	{r4, r5, r6, pc}
 8003538:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800353c:	ea46 0101 	orr.w	r1, r6, r1
 8003540:	ea40 0002 	orr.w	r0, r0, r2
 8003544:	ea81 0103 	eor.w	r1, r1, r3
 8003548:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800354c:	bfc2      	ittt	gt
 800354e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8003552:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8003556:	bd70      	popgt	{r4, r5, r6, pc}
 8003558:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800355c:	f04f 0e00 	mov.w	lr, #0
 8003560:	3c01      	subs	r4, #1
 8003562:	f300 80ab 	bgt.w	80036bc <__aeabi_dmul+0x238>
 8003566:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800356a:	bfde      	ittt	le
 800356c:	2000      	movle	r0, #0
 800356e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8003572:	bd70      	pople	{r4, r5, r6, pc}
 8003574:	f1c4 0400 	rsb	r4, r4, #0
 8003578:	3c20      	subs	r4, #32
 800357a:	da35      	bge.n	80035e8 <__aeabi_dmul+0x164>
 800357c:	340c      	adds	r4, #12
 800357e:	dc1b      	bgt.n	80035b8 <__aeabi_dmul+0x134>
 8003580:	f104 0414 	add.w	r4, r4, #20
 8003584:	f1c4 0520 	rsb	r5, r4, #32
 8003588:	fa00 f305 	lsl.w	r3, r0, r5
 800358c:	fa20 f004 	lsr.w	r0, r0, r4
 8003590:	fa01 f205 	lsl.w	r2, r1, r5
 8003594:	ea40 0002 	orr.w	r0, r0, r2
 8003598:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800359c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80035a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80035a4:	fa21 f604 	lsr.w	r6, r1, r4
 80035a8:	eb42 0106 	adc.w	r1, r2, r6
 80035ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80035b0:	bf08      	it	eq
 80035b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80035b6:	bd70      	pop	{r4, r5, r6, pc}
 80035b8:	f1c4 040c 	rsb	r4, r4, #12
 80035bc:	f1c4 0520 	rsb	r5, r4, #32
 80035c0:	fa00 f304 	lsl.w	r3, r0, r4
 80035c4:	fa20 f005 	lsr.w	r0, r0, r5
 80035c8:	fa01 f204 	lsl.w	r2, r1, r4
 80035cc:	ea40 0002 	orr.w	r0, r0, r2
 80035d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80035d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80035d8:	f141 0100 	adc.w	r1, r1, #0
 80035dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80035e0:	bf08      	it	eq
 80035e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80035e6:	bd70      	pop	{r4, r5, r6, pc}
 80035e8:	f1c4 0520 	rsb	r5, r4, #32
 80035ec:	fa00 f205 	lsl.w	r2, r0, r5
 80035f0:	ea4e 0e02 	orr.w	lr, lr, r2
 80035f4:	fa20 f304 	lsr.w	r3, r0, r4
 80035f8:	fa01 f205 	lsl.w	r2, r1, r5
 80035fc:	ea43 0302 	orr.w	r3, r3, r2
 8003600:	fa21 f004 	lsr.w	r0, r1, r4
 8003604:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003608:	fa21 f204 	lsr.w	r2, r1, r4
 800360c:	ea20 0002 	bic.w	r0, r0, r2
 8003610:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8003614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003618:	bf08      	it	eq
 800361a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800361e:	bd70      	pop	{r4, r5, r6, pc}
 8003620:	f094 0f00 	teq	r4, #0
 8003624:	d10f      	bne.n	8003646 <__aeabi_dmul+0x1c2>
 8003626:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800362a:	0040      	lsls	r0, r0, #1
 800362c:	eb41 0101 	adc.w	r1, r1, r1
 8003630:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003634:	bf08      	it	eq
 8003636:	3c01      	subeq	r4, #1
 8003638:	d0f7      	beq.n	800362a <__aeabi_dmul+0x1a6>
 800363a:	ea41 0106 	orr.w	r1, r1, r6
 800363e:	f095 0f00 	teq	r5, #0
 8003642:	bf18      	it	ne
 8003644:	4770      	bxne	lr
 8003646:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800364a:	0052      	lsls	r2, r2, #1
 800364c:	eb43 0303 	adc.w	r3, r3, r3
 8003650:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003654:	bf08      	it	eq
 8003656:	3d01      	subeq	r5, #1
 8003658:	d0f7      	beq.n	800364a <__aeabi_dmul+0x1c6>
 800365a:	ea43 0306 	orr.w	r3, r3, r6
 800365e:	4770      	bx	lr
 8003660:	ea94 0f0c 	teq	r4, ip
 8003664:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8003668:	bf18      	it	ne
 800366a:	ea95 0f0c 	teqne	r5, ip
 800366e:	d00c      	beq.n	800368a <__aeabi_dmul+0x206>
 8003670:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003674:	bf18      	it	ne
 8003676:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800367a:	d1d1      	bne.n	8003620 <__aeabi_dmul+0x19c>
 800367c:	ea81 0103 	eor.w	r1, r1, r3
 8003680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003684:	f04f 0000 	mov.w	r0, #0
 8003688:	bd70      	pop	{r4, r5, r6, pc}
 800368a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800368e:	bf06      	itte	eq
 8003690:	4610      	moveq	r0, r2
 8003692:	4619      	moveq	r1, r3
 8003694:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003698:	d019      	beq.n	80036ce <__aeabi_dmul+0x24a>
 800369a:	ea94 0f0c 	teq	r4, ip
 800369e:	d102      	bne.n	80036a6 <__aeabi_dmul+0x222>
 80036a0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80036a4:	d113      	bne.n	80036ce <__aeabi_dmul+0x24a>
 80036a6:	ea95 0f0c 	teq	r5, ip
 80036aa:	d105      	bne.n	80036b8 <__aeabi_dmul+0x234>
 80036ac:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80036b0:	bf1c      	itt	ne
 80036b2:	4610      	movne	r0, r2
 80036b4:	4619      	movne	r1, r3
 80036b6:	d10a      	bne.n	80036ce <__aeabi_dmul+0x24a>
 80036b8:	ea81 0103 	eor.w	r1, r1, r3
 80036bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80036c0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80036c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80036c8:	f04f 0000 	mov.w	r0, #0
 80036cc:	bd70      	pop	{r4, r5, r6, pc}
 80036ce:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80036d2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80036d6:	bd70      	pop	{r4, r5, r6, pc}

080036d8 <__aeabi_ddiv>:
 80036d8:	b570      	push	{r4, r5, r6, lr}
 80036da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80036de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80036e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80036e6:	bf1d      	ittte	ne
 80036e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80036ec:	ea94 0f0c 	teqne	r4, ip
 80036f0:	ea95 0f0c 	teqne	r5, ip
 80036f4:	f000 f8a7 	bleq	8003846 <__aeabi_ddiv+0x16e>
 80036f8:	eba4 0405 	sub.w	r4, r4, r5
 80036fc:	ea81 0e03 	eor.w	lr, r1, r3
 8003700:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8003704:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8003708:	f000 8088 	beq.w	800381c <__aeabi_ddiv+0x144>
 800370c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003710:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8003714:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8003718:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800371c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8003720:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8003724:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8003728:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800372c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8003730:	429d      	cmp	r5, r3
 8003732:	bf08      	it	eq
 8003734:	4296      	cmpeq	r6, r2
 8003736:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800373a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800373e:	d202      	bcs.n	8003746 <__aeabi_ddiv+0x6e>
 8003740:	085b      	lsrs	r3, r3, #1
 8003742:	ea4f 0232 	mov.w	r2, r2, rrx
 8003746:	1ab6      	subs	r6, r6, r2
 8003748:	eb65 0503 	sbc.w	r5, r5, r3
 800374c:	085b      	lsrs	r3, r3, #1
 800374e:	ea4f 0232 	mov.w	r2, r2, rrx
 8003752:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003756:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800375a:	ebb6 0e02 	subs.w	lr, r6, r2
 800375e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003762:	bf22      	ittt	cs
 8003764:	1ab6      	subcs	r6, r6, r2
 8003766:	4675      	movcs	r5, lr
 8003768:	ea40 000c 	orrcs.w	r0, r0, ip
 800376c:	085b      	lsrs	r3, r3, #1
 800376e:	ea4f 0232 	mov.w	r2, r2, rrx
 8003772:	ebb6 0e02 	subs.w	lr, r6, r2
 8003776:	eb75 0e03 	sbcs.w	lr, r5, r3
 800377a:	bf22      	ittt	cs
 800377c:	1ab6      	subcs	r6, r6, r2
 800377e:	4675      	movcs	r5, lr
 8003780:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8003784:	085b      	lsrs	r3, r3, #1
 8003786:	ea4f 0232 	mov.w	r2, r2, rrx
 800378a:	ebb6 0e02 	subs.w	lr, r6, r2
 800378e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003792:	bf22      	ittt	cs
 8003794:	1ab6      	subcs	r6, r6, r2
 8003796:	4675      	movcs	r5, lr
 8003798:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800379c:	085b      	lsrs	r3, r3, #1
 800379e:	ea4f 0232 	mov.w	r2, r2, rrx
 80037a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80037a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80037aa:	bf22      	ittt	cs
 80037ac:	1ab6      	subcs	r6, r6, r2
 80037ae:	4675      	movcs	r5, lr
 80037b0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80037b4:	ea55 0e06 	orrs.w	lr, r5, r6
 80037b8:	d018      	beq.n	80037ec <__aeabi_ddiv+0x114>
 80037ba:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80037be:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80037c2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80037c6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80037ca:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80037ce:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80037d2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80037d6:	d1c0      	bne.n	800375a <__aeabi_ddiv+0x82>
 80037d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80037dc:	d10b      	bne.n	80037f6 <__aeabi_ddiv+0x11e>
 80037de:	ea41 0100 	orr.w	r1, r1, r0
 80037e2:	f04f 0000 	mov.w	r0, #0
 80037e6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80037ea:	e7b6      	b.n	800375a <__aeabi_ddiv+0x82>
 80037ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80037f0:	bf04      	itt	eq
 80037f2:	4301      	orreq	r1, r0
 80037f4:	2000      	moveq	r0, #0
 80037f6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80037fa:	bf88      	it	hi
 80037fc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8003800:	f63f aeaf 	bhi.w	8003562 <__aeabi_dmul+0xde>
 8003804:	ebb5 0c03 	subs.w	ip, r5, r3
 8003808:	bf04      	itt	eq
 800380a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800380e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8003812:	f150 0000 	adcs.w	r0, r0, #0
 8003816:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800381a:	bd70      	pop	{r4, r5, r6, pc}
 800381c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8003820:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8003824:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8003828:	bfc2      	ittt	gt
 800382a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800382e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8003832:	bd70      	popgt	{r4, r5, r6, pc}
 8003834:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003838:	f04f 0e00 	mov.w	lr, #0
 800383c:	3c01      	subs	r4, #1
 800383e:	e690      	b.n	8003562 <__aeabi_dmul+0xde>
 8003840:	ea45 0e06 	orr.w	lr, r5, r6
 8003844:	e68d      	b.n	8003562 <__aeabi_dmul+0xde>
 8003846:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800384a:	ea94 0f0c 	teq	r4, ip
 800384e:	bf08      	it	eq
 8003850:	ea95 0f0c 	teqeq	r5, ip
 8003854:	f43f af3b 	beq.w	80036ce <__aeabi_dmul+0x24a>
 8003858:	ea94 0f0c 	teq	r4, ip
 800385c:	d10a      	bne.n	8003874 <__aeabi_ddiv+0x19c>
 800385e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8003862:	f47f af34 	bne.w	80036ce <__aeabi_dmul+0x24a>
 8003866:	ea95 0f0c 	teq	r5, ip
 800386a:	f47f af25 	bne.w	80036b8 <__aeabi_dmul+0x234>
 800386e:	4610      	mov	r0, r2
 8003870:	4619      	mov	r1, r3
 8003872:	e72c      	b.n	80036ce <__aeabi_dmul+0x24a>
 8003874:	ea95 0f0c 	teq	r5, ip
 8003878:	d106      	bne.n	8003888 <__aeabi_ddiv+0x1b0>
 800387a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800387e:	f43f aefd 	beq.w	800367c <__aeabi_dmul+0x1f8>
 8003882:	4610      	mov	r0, r2
 8003884:	4619      	mov	r1, r3
 8003886:	e722      	b.n	80036ce <__aeabi_dmul+0x24a>
 8003888:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800388c:	bf18      	it	ne
 800388e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003892:	f47f aec5 	bne.w	8003620 <__aeabi_dmul+0x19c>
 8003896:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800389a:	f47f af0d 	bne.w	80036b8 <__aeabi_dmul+0x234>
 800389e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80038a2:	f47f aeeb 	bne.w	800367c <__aeabi_dmul+0x1f8>
 80038a6:	e712      	b.n	80036ce <__aeabi_dmul+0x24a>

080038a8 <__aeabi_d2iz>:
 80038a8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80038ac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80038b0:	d215      	bcs.n	80038de <__aeabi_d2iz+0x36>
 80038b2:	d511      	bpl.n	80038d8 <__aeabi_d2iz+0x30>
 80038b4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80038b8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80038bc:	d912      	bls.n	80038e4 <__aeabi_d2iz+0x3c>
 80038be:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80038c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038c6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80038ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80038ce:	fa23 f002 	lsr.w	r0, r3, r2
 80038d2:	bf18      	it	ne
 80038d4:	4240      	negne	r0, r0
 80038d6:	4770      	bx	lr
 80038d8:	f04f 0000 	mov.w	r0, #0
 80038dc:	4770      	bx	lr
 80038de:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80038e2:	d105      	bne.n	80038f0 <__aeabi_d2iz+0x48>
 80038e4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80038e8:	bf08      	it	eq
 80038ea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80038ee:	4770      	bx	lr
 80038f0:	f04f 0000 	mov.w	r0, #0
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop

080038f8 <gotoBootloader>:
void powerOn(void)
{
  GPIO_WriteBit(PON_PORT,PON_PIN,Bit_SET);
}

void gotoBootloader(){
 80038f8:	b510      	push	{r4, lr}
  USART_Cmd(GPS_USART,DISABLE);
 80038fa:	2100      	movs	r1, #0
 80038fc:	480a      	ldr	r0, [pc, #40]	; (8003928 <gotoBootloader+0x30>)
 80038fe:	4b0b      	ldr	r3, [pc, #44]	; (800392c <gotoBootloader+0x34>)
 8003900:	4798      	blx	r3
  NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0);
 8003902:	2100      	movs	r1, #0
 8003904:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8003908:	4b09      	ldr	r3, [pc, #36]	; (8003930 <gotoBootloader+0x38>)
 800390a:	4798      	blx	r3
  //Init BootLoader
  //Write 0x6675 ("fu") to BKP_DR10 and reset to BL
  /*Enable Backup Access */
  PWR_BackupAccessCmd(ENABLE);
 800390c:	2001      	movs	r0, #1
 800390e:	4b09      	ldr	r3, [pc, #36]	; (8003934 <gotoBootloader+0x3c>)
 8003910:	4798      	blx	r3
  BKP_WriteBackupRegister(BKP_DR10,0x6675);
 8003912:	4b09      	ldr	r3, [pc, #36]	; (8003938 <gotoBootloader+0x40>)
 8003914:	f246 6175 	movw	r1, #26229	; 0x6675
 8003918:	2028      	movs	r0, #40	; 0x28
 800391a:	4798      	blx	r3
  int *ptr;
  ptr=(int*) 0x8000004;
  void (*fct)() = (void*)(*ptr);
  (*fct)();
}
 800391c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  void (*fct)() = (void*)(*ptr);
 8003920:	4b06      	ldr	r3, [pc, #24]	; (800393c <gotoBootloader+0x44>)
  (*fct)();
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4718      	bx	r3
 8003926:	bf00      	nop
 8003928:	40013800 	.word	0x40013800
 800392c:	08005059 	.word	0x08005059
 8003930:	080055c5 	.word	0x080055c5
 8003934:	080053e9 	.word	0x080053e9
 8003938:	080053cd 	.word	0x080053cd
 800393c:	08000004 	.word	0x08000004

08003940 <dispInfos>:
    LED_PORT->BRR = LED_PIN;
}



void dispInfos(){
 8003940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003944:	b088      	sub	sp, #32
  char tempStr[30];
  char numStr[10];
      
  LCDClearBuffer();
  LCDSetFontSize(SMALL);
  strcpy(tempStr,"Satellites : ");
 8003946:	466c      	mov	r4, sp
 8003948:	4625      	mov	r5, r4
  LCDClearBuffer();
 800394a:	4b42      	ldr	r3, [pc, #264]	; (8003a54 <dispInfos+0x114>)
 800394c:	4798      	blx	r3
  LCDSetFontSize(SMALL);
 800394e:	2000      	movs	r0, #0
 8003950:	4b41      	ldr	r3, [pc, #260]	; (8003a58 <dispInfos+0x118>)
 8003952:	4798      	blx	r3
  strcpy(tempStr,"Satellites : ");
 8003954:	4b41      	ldr	r3, [pc, #260]	; (8003a5c <dispInfos+0x11c>)
  intToStr(nbSats,tempStr+strlen(tempStr));
 8003956:	4f42      	ldr	r7, [pc, #264]	; (8003a60 <dispInfos+0x120>)
  strcpy(tempStr,"Satellites : ");
 8003958:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800395a:	c507      	stmia	r5!, {r0, r1, r2}
  intToStr(nbSats,tempStr+strlen(tempStr));
 800395c:	4e41      	ldr	r6, [pc, #260]	; (8003a64 <dispInfos+0x124>)
  strcpy(tempStr,"Satellites : ");
 800395e:	802b      	strh	r3, [r5, #0]
  intToStr(nbSats,tempStr+strlen(tempStr));
 8003960:	6838      	ldr	r0, [r7, #0]
 8003962:	f10d 010d 	add.w	r1, sp, #13
  //LCDClearLine(0);
  LCDPrintStringXY(0,8,tempStr);
 8003966:	4d40      	ldr	r5, [pc, #256]	; (8003a68 <dispInfos+0x128>)
  intToStr(nbSats,tempStr+strlen(tempStr));
 8003968:	47b0      	blx	r6
  LCDPrintStringXY(0,8,tempStr);
 800396a:	4622      	mov	r2, r4
 800396c:	2108      	movs	r1, #8
 800396e:	2000      	movs	r0, #0
 8003970:	47a8      	blx	r5
      
  strcpy(tempStr,"Long : ");
  doubleToStr(longitude,tempStr+strlen(tempStr));
 8003972:	4f3e      	ldr	r7, [pc, #248]	; (8003a6c <dispInfos+0x12c>)
  strcpy(tempStr,"Long : ");
 8003974:	4b3e      	ldr	r3, [pc, #248]	; (8003a70 <dispInfos+0x130>)
  doubleToStr(longitude,tempStr+strlen(tempStr));
 8003976:	f10d 0207 	add.w	r2, sp, #7
  strcpy(tempStr,"Long : ");
 800397a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800397e:	e884 0003 	stmia.w	r4, {r0, r1}
  doubleToStr(longitude,tempStr+strlen(tempStr));
 8003982:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003986:	4f3b      	ldr	r7, [pc, #236]	; (8003a74 <dispInfos+0x134>)
 8003988:	47b8      	blx	r7
  //LCDClearLine(15);
  LCDPrintStringXY(0,16,tempStr);
 800398a:	4622      	mov	r2, r4
 800398c:	2110      	movs	r1, #16
 800398e:	2000      	movs	r0, #0
 8003990:	47a8      	blx	r5

  strcpy(tempStr,"Lat : ");
 8003992:	4b39      	ldr	r3, [pc, #228]	; (8003a78 <dispInfos+0x138>)
  doubleToStr(latitude,tempStr+strlen(tempStr));
 8003994:	f8df c110 	ldr.w	ip, [pc, #272]	; 8003aa8 <dispInfos+0x168>
  strcpy(tempStr,"Lat : ");
 8003998:	e893 0003 	ldmia.w	r3, {r0, r1}
 800399c:	0c0b      	lsrs	r3, r1, #16
 800399e:	f88d 3006 	strb.w	r3, [sp, #6]
 80039a2:	9000      	str	r0, [sp, #0]
 80039a4:	f8ad 1004 	strh.w	r1, [sp, #4]
  doubleToStr(latitude,tempStr+strlen(tempStr));
 80039a8:	f10d 0206 	add.w	r2, sp, #6
 80039ac:	e9dc 0100 	ldrd	r0, r1, [ip]
 80039b0:	47b8      	blx	r7
  //LCDClearLine(30);
  LCDPrintStringXY(0,24,tempStr);
 80039b2:	4622      	mov	r2, r4
 80039b4:	2118      	movs	r1, #24
 80039b6:	2000      	movs	r0, #0
 80039b8:	47a8      	blx	r5

  strcpy(tempStr,"Heure : ");
 80039ba:	4623      	mov	r3, r4
 80039bc:	4a2f      	ldr	r2, [pc, #188]	; (8003a7c <dispInfos+0x13c>)
  intToStr(heures,tempStr+strlen(tempStr));
 80039be:	4f30      	ldr	r7, [pc, #192]	; (8003a80 <dispInfos+0x140>)
  strcpy(tempStr,"Heure : ");
 80039c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80039c2:	c303      	stmia	r3!, {r0, r1}
  intToStr(heures,tempStr+strlen(tempStr));
 80039c4:	a902      	add	r1, sp, #8
  strcpy(tempStr,"Heure : ");
 80039c6:	701a      	strb	r2, [r3, #0]
  intToStr(heures,tempStr+strlen(tempStr));
 80039c8:	6838      	ldr	r0, [r7, #0]
 80039ca:	47b0      	blx	r6
  strcpy(tempStr+strlen(tempStr),"h");
 80039cc:	4f2d      	ldr	r7, [pc, #180]	; (8003a84 <dispInfos+0x144>)
 80039ce:	4620      	mov	r0, r4
 80039d0:	47b8      	blx	r7
 80039d2:	4b2d      	ldr	r3, [pc, #180]	; (8003a88 <dispInfos+0x148>)
  strcpy(tempStr+strlen(tempStr),"s");
  //LCDClearLine(45);
  LCDPrintStringXY(0,32,tempStr);
      
  strcpy(tempStr,"VBAT : ");
  intToStr(ADCValues.VBat,tempStr+strlen(tempStr));
 80039d4:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8003aac <dispInfos+0x16c>
  strcpy(tempStr+strlen(tempStr),"h");
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	5223      	strh	r3, [r4, r0]
  intToStr(minutes,tempStr+strlen(tempStr));
 80039dc:	4620      	mov	r0, r4
 80039de:	47b8      	blx	r7
 80039e0:	4b2a      	ldr	r3, [pc, #168]	; (8003a8c <dispInfos+0x14c>)
 80039e2:	1821      	adds	r1, r4, r0
 80039e4:	6818      	ldr	r0, [r3, #0]
 80039e6:	47b0      	blx	r6
  strcpy(tempStr+strlen(tempStr),"m");
 80039e8:	4620      	mov	r0, r4
 80039ea:	47b8      	blx	r7
 80039ec:	4b28      	ldr	r3, [pc, #160]	; (8003a90 <dispInfos+0x150>)
 80039ee:	881b      	ldrh	r3, [r3, #0]
 80039f0:	5223      	strh	r3, [r4, r0]
  intToStr(secondes,tempStr+strlen(tempStr));
 80039f2:	4620      	mov	r0, r4
 80039f4:	47b8      	blx	r7
 80039f6:	4b27      	ldr	r3, [pc, #156]	; (8003a94 <dispInfos+0x154>)
 80039f8:	1821      	adds	r1, r4, r0
 80039fa:	6818      	ldr	r0, [r3, #0]
 80039fc:	47b0      	blx	r6
  strcpy(tempStr+strlen(tempStr),"s");
 80039fe:	4620      	mov	r0, r4
 8003a00:	47b8      	blx	r7
 8003a02:	4b25      	ldr	r3, [pc, #148]	; (8003a98 <dispInfos+0x158>)
  LCDPrintStringXY(0,32,tempStr);
 8003a04:	4622      	mov	r2, r4
  strcpy(tempStr+strlen(tempStr),"s");
 8003a06:	881b      	ldrh	r3, [r3, #0]
  LCDPrintStringXY(0,32,tempStr);
 8003a08:	2120      	movs	r1, #32
  strcpy(tempStr+strlen(tempStr),"s");
 8003a0a:	5223      	strh	r3, [r4, r0]
  LCDPrintStringXY(0,32,tempStr);
 8003a0c:	2000      	movs	r0, #0
 8003a0e:	47a8      	blx	r5
  strcpy(tempStr,"VBAT : ");
 8003a10:	4b22      	ldr	r3, [pc, #136]	; (8003a9c <dispInfos+0x15c>)
 8003a12:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003a16:	e884 0003 	stmia.w	r4, {r0, r1}
  intToStr(ADCValues.VBat,tempStr+strlen(tempStr));
 8003a1a:	f10d 0107 	add.w	r1, sp, #7
 8003a1e:	f8d8 0000 	ldr.w	r0, [r8]
 8003a22:	47b0      	blx	r6
  //LCDClearLine(60);
  LCDPrintStringXY(0,40,tempStr);
 8003a24:	4622      	mov	r2, r4
 8003a26:	2128      	movs	r1, #40	; 0x28
 8003a28:	2000      	movs	r0, #0
 8003a2a:	47a8      	blx	r5
      
  strcpy(tempStr,"TEMP : ");
 8003a2c:	4b1c      	ldr	r3, [pc, #112]	; (8003aa0 <dispInfos+0x160>)
 8003a2e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003a32:	e884 0003 	stmia.w	r4, {r0, r1}
  intToStr(ADCValues.TBat,tempStr+strlen(tempStr));
 8003a36:	f10d 0107 	add.w	r1, sp, #7
 8003a3a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8003a3e:	47b0      	blx	r6
  //LCDClearLine(75);
  LCDPrintStringXY(0,48,tempStr);
 8003a40:	4622      	mov	r2, r4
 8003a42:	2130      	movs	r1, #48	; 0x30
 8003a44:	2000      	movs	r0, #0
 8003a46:	47a8      	blx	r5
      
  LCDDrawBuffer();
 8003a48:	4b16      	ldr	r3, [pc, #88]	; (8003aa4 <dispInfos+0x164>)
 8003a4a:	4798      	blx	r3
  //LCDPrintStringXY(0,60,debug);
}
 8003a4c:	b008      	add	sp, #32
 8003a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a52:	bf00      	nop
 8003a54:	0800429d 	.word	0x0800429d
 8003a58:	08004059 	.word	0x08004059
 8003a5c:	08005638 	.word	0x08005638
 8003a60:	20001358 	.word	0x20001358
 8003a64:	0800445d 	.word	0x0800445d
 8003a68:	08004219 	.word	0x08004219
 8003a6c:	200012f8 	.word	0x200012f8
 8003a70:	08005648 	.word	0x08005648
 8003a74:	080044c9 	.word	0x080044c9
 8003a78:	08005650 	.word	0x08005650
 8003a7c:	08005658 	.word	0x08005658
 8003a80:	20001298 	.word	0x20001298
 8003a84:	08004409 	.word	0x08004409
 8003a88:	08005664 	.word	0x08005664
 8003a8c:	20001368 	.word	0x20001368
 8003a90:	08005668 	.word	0x08005668
 8003a94:	2000129c 	.word	0x2000129c
 8003a98:	0800566c 	.word	0x0800566c
 8003a9c:	08005670 	.word	0x08005670
 8003aa0:	08005678 	.word	0x08005678
 8003aa4:	0800428d 	.word	0x0800428d
 8003aa8:	20001360 	.word	0x20001360
 8003aac:	200005c0 	.word	0x200005c0

08003ab0 <dispTime>:

void dispImage(){
  LCDDrawImageTest();
}

void dispTime(){
 8003ab0:	b530      	push	{r4, r5, lr}
  char tempStr[30];
  char numStr[10];
  LCDClearBuffer();
 8003ab2:	4b11      	ldr	r3, [pc, #68]	; (8003af8 <dispTime+0x48>)
void dispTime(){
 8003ab4:	b089      	sub	sp, #36	; 0x24
  LCDClearBuffer();
 8003ab6:	4798      	blx	r3

  LCDSetFontSize(LARGE);
 8003ab8:	2002      	movs	r0, #2
 8003aba:	4b10      	ldr	r3, [pc, #64]	; (8003afc <dispTime+0x4c>)
 8003abc:	4798      	blx	r3
  intToStr2(heures,tempStr);
 8003abe:	4b10      	ldr	r3, [pc, #64]	; (8003b00 <dispTime+0x50>)
 8003ac0:	4669      	mov	r1, sp
 8003ac2:	6818      	ldr	r0, [r3, #0]
 8003ac4:	4c0f      	ldr	r4, [pc, #60]	; (8003b04 <dispTime+0x54>)
 8003ac6:	47a0      	blx	r4
  strcpy(tempStr+strlen(tempStr),":");
 8003ac8:	4d0f      	ldr	r5, [pc, #60]	; (8003b08 <dispTime+0x58>)
 8003aca:	4668      	mov	r0, sp
 8003acc:	47a8      	blx	r5
 8003ace:	4b0f      	ldr	r3, [pc, #60]	; (8003b0c <dispTime+0x5c>)
 8003ad0:	881b      	ldrh	r3, [r3, #0]
 8003ad2:	f82d 3000 	strh.w	r3, [sp, r0]
  intToStr2(minutes,tempStr+strlen(tempStr));
 8003ad6:	4668      	mov	r0, sp
 8003ad8:	47a8      	blx	r5
 8003ada:	4b0d      	ldr	r3, [pc, #52]	; (8003b10 <dispTime+0x60>)
 8003adc:	eb0d 0100 	add.w	r1, sp, r0
 8003ae0:	6818      	ldr	r0, [r3, #0]
 8003ae2:	47a0      	blx	r4
  LCDPrintStringXY(15,60,tempStr);
 8003ae4:	466a      	mov	r2, sp
 8003ae6:	213c      	movs	r1, #60	; 0x3c
 8003ae8:	200f      	movs	r0, #15
 8003aea:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <dispTime+0x64>)
 8003aec:	4798      	blx	r3
  LCDDrawBuffer();
 8003aee:	4b0a      	ldr	r3, [pc, #40]	; (8003b18 <dispTime+0x68>)
 8003af0:	4798      	blx	r3
}
 8003af2:	b009      	add	sp, #36	; 0x24
 8003af4:	bd30      	pop	{r4, r5, pc}
 8003af6:	bf00      	nop
 8003af8:	0800429d 	.word	0x0800429d
 8003afc:	08004059 	.word	0x08004059
 8003b00:	20001298 	.word	0x20001298
 8003b04:	08004431 	.word	0x08004431
 8003b08:	08004409 	.word	0x08004409
 8003b0c:	0800568c 	.word	0x0800568c
 8003b10:	20001368 	.word	0x20001368
 8003b14:	08004219 	.word	0x08004219
 8003b18:	0800428d 	.word	0x0800428d

08003b1c <dispPosition>:

void dispPosition(){
 8003b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b1e:	b089      	sub	sp, #36	; 0x24
  LCDClearBuffer();
  LCDSetFontSize(NORMAL);
  
  LCDPrintStringXY(20,15,"Position");
  
  strcpy(tempStr,"Long : ");
 8003b20:	466c      	mov	r4, sp
  LCDClearBuffer();
 8003b22:	4b18      	ldr	r3, [pc, #96]	; (8003b84 <dispPosition+0x68>)
 8003b24:	4798      	blx	r3
  LCDSetFontSize(NORMAL);
 8003b26:	4b18      	ldr	r3, [pc, #96]	; (8003b88 <dispPosition+0x6c>)
 8003b28:	2001      	movs	r0, #1
 8003b2a:	4798      	blx	r3
  LCDPrintStringXY(20,15,"Position");
 8003b2c:	4d17      	ldr	r5, [pc, #92]	; (8003b8c <dispPosition+0x70>)
 8003b2e:	4a18      	ldr	r2, [pc, #96]	; (8003b90 <dispPosition+0x74>)
 8003b30:	210f      	movs	r1, #15
 8003b32:	2014      	movs	r0, #20
 8003b34:	47a8      	blx	r5
  doubleToStr(longitude,tempStr+strlen(tempStr));
 8003b36:	4e17      	ldr	r6, [pc, #92]	; (8003b94 <dispPosition+0x78>)
  strcpy(tempStr,"Long : ");
 8003b38:	4b17      	ldr	r3, [pc, #92]	; (8003b98 <dispPosition+0x7c>)
  doubleToStr(longitude,tempStr+strlen(tempStr));
 8003b3a:	f10d 0207 	add.w	r2, sp, #7
  strcpy(tempStr,"Long : ");
 8003b3e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003b42:	e884 0003 	stmia.w	r4, {r0, r1}
  doubleToStr(longitude,tempStr+strlen(tempStr));
 8003b46:	e9d6 0100 	ldrd	r0, r1, [r6]
 8003b4a:	4e14      	ldr	r6, [pc, #80]	; (8003b9c <dispPosition+0x80>)
 8003b4c:	47b0      	blx	r6
  LCDPrintStringXY(0,30,tempStr);
 8003b4e:	4622      	mov	r2, r4
 8003b50:	211e      	movs	r1, #30
 8003b52:	2000      	movs	r0, #0
 8003b54:	47a8      	blx	r5

  strcpy(tempStr,"Lat : ");
 8003b56:	4b12      	ldr	r3, [pc, #72]	; (8003ba0 <dispPosition+0x84>)
  doubleToStr(latitude,tempStr+strlen(tempStr));
 8003b58:	4f12      	ldr	r7, [pc, #72]	; (8003ba4 <dispPosition+0x88>)
  strcpy(tempStr,"Lat : ");
 8003b5a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003b5e:	0c0b      	lsrs	r3, r1, #16
 8003b60:	f88d 3006 	strb.w	r3, [sp, #6]
 8003b64:	9000      	str	r0, [sp, #0]
 8003b66:	f8ad 1004 	strh.w	r1, [sp, #4]
  doubleToStr(latitude,tempStr+strlen(tempStr));
 8003b6a:	f10d 0206 	add.w	r2, sp, #6
 8003b6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b72:	47b0      	blx	r6
  LCDPrintStringXY(0,45,tempStr);
 8003b74:	4622      	mov	r2, r4
 8003b76:	212d      	movs	r1, #45	; 0x2d
 8003b78:	2000      	movs	r0, #0
 8003b7a:	47a8      	blx	r5
  LCDDrawBuffer();
 8003b7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ba8 <dispPosition+0x8c>)
 8003b7e:	4798      	blx	r3
}
 8003b80:	b009      	add	sp, #36	; 0x24
 8003b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b84:	0800429d 	.word	0x0800429d
 8003b88:	08004059 	.word	0x08004059
 8003b8c:	08004219 	.word	0x08004219
 8003b90:	08005680 	.word	0x08005680
 8003b94:	200012f8 	.word	0x200012f8
 8003b98:	08005648 	.word	0x08005648
 8003b9c:	080044c9 	.word	0x080044c9
 8003ba0:	08005650 	.word	0x08005650
 8003ba4:	20001360 	.word	0x20001360
 8003ba8:	0800428d 	.word	0x0800428d

08003bac <dispUpdate>:



void dispUpdate(){
  switch(screen){
 8003bac:	4b08      	ldr	r3, [pc, #32]	; (8003bd0 <dispUpdate+0x24>)
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b03      	cmp	r3, #3
 8003bb2:	d80b      	bhi.n	8003bcc <dispUpdate+0x20>
 8003bb4:	e8df f003 	tbb	[pc, r3]
 8003bb8:	02040608 	.word	0x02040608
  LCDDrawImageTest();
 8003bbc:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <dispUpdate+0x28>)
 8003bbe:	4718      	bx	r3
    break;
  case POSITION:
    dispPosition();
    break;
  case INFOS :
    dispInfos();
 8003bc0:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <dispUpdate+0x2c>)
 8003bc2:	4718      	bx	r3
    dispPosition();
 8003bc4:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <dispUpdate+0x30>)
 8003bc6:	4718      	bx	r3
    dispTime();
 8003bc8:	4b05      	ldr	r3, [pc, #20]	; (8003be0 <dispUpdate+0x34>)
 8003bca:	4718      	bx	r3
    dispImage();
    break;
  default:
    break;
  }
}
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	200005b8 	.word	0x200005b8
 8003bd4:	08004235 	.word	0x08004235
 8003bd8:	08003941 	.word	0x08003941
 8003bdc:	08003b1d 	.word	0x08003b1d
 8003be0:	08003ab1 	.word	0x08003ab1

08003be4 <USART_Configuration>:
* Description    : Configures the USART
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Configuration(void) {
 8003be4:	b530      	push	{r4, r5, lr}
  USART_InitTypeDef   USART_InitStructure;

  // GPS USART 1
  USART_InitStructure.USART_BaudRate = 38400;
 8003be6:	2300      	movs	r3, #0
 8003be8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8003bec:	f44f 2540 	mov.w	r5, #786432	; 0xc0000
  USART_InitStructure.USART_Parity = USART_Parity_No;
  USART_InitStructure.USART_HardwareFlowControl =   USART_HardwareFlowControl_None;
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
  USART_Init(GPS_USART, &USART_InitStructure);
 8003bf0:	4c09      	ldr	r4, [pc, #36]	; (8003c18 <USART_Configuration+0x34>)
void USART_Configuration(void) {
 8003bf2:	b085      	sub	sp, #20
  USART_Init(GPS_USART, &USART_InitStructure);
 8003bf4:	4669      	mov	r1, sp
 8003bf6:	4620      	mov	r0, r4
  USART_InitStructure.USART_BaudRate = 38400;
 8003bf8:	9200      	str	r2, [sp, #0]
 8003bfa:	9301      	str	r3, [sp, #4]
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8003bfc:	f8ad 300c 	strh.w	r3, [sp, #12]
  USART_Init(GPS_USART, &USART_InitStructure);
 8003c00:	4a06      	ldr	r2, [pc, #24]	; (8003c1c <USART_Configuration+0x38>)
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8003c02:	9502      	str	r5, [sp, #8]
  USART_Init(GPS_USART, &USART_InitStructure);
 8003c04:	4790      	blx	r2

  // Active les interruptions sur USART1
  USART_ITConfig(GPS_USART,USART_IT_RXNE,ENABLE);
 8003c06:	4620      	mov	r0, r4
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f240 5125 	movw	r1, #1317	; 0x525
 8003c0e:	4b04      	ldr	r3, [pc, #16]	; (8003c20 <USART_Configuration+0x3c>)
 8003c10:	4798      	blx	r3
}
 8003c12:	b005      	add	sp, #20
 8003c14:	bd30      	pop	{r4, r5, pc}
 8003c16:	bf00      	nop
 8003c18:	40013800 	.word	0x40013800
 8003c1c:	08004fed 	.word	0x08004fed
 8003c20:	08005071 	.word	0x08005071

08003c24 <RCC_Configuration>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_Configuration(void) 
{
 8003c24:	b510      	push	{r4, lr}
  /* Setup the microcontroller system. Initialize the Embedded Flash Interface,
     initialize the PLL and update the SystemFrequency variable. */
  SystemInit();
 8003c26:	4b0c      	ldr	r3, [pc, #48]	; (8003c58 <RCC_Configuration+0x34>)
 8003c28:	4798      	blx	r3
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	4c0b      	ldr	r4, [pc, #44]	; (8003c5c <RCC_Configuration+0x38>)
 8003c2e:	4608      	mov	r0, r1
 8003c30:	47a0      	blx	r4
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOD |RCC_APB2Periph_GPIOB | RCC_APB2Periph_ADC1, ENABLE);
 8003c32:	2101      	movs	r1, #1
 8003c34:	f44f 700f 	mov.w	r0, #572	; 0x23c
 8003c38:	47a0      	blx	r4
  
  /* Access to backup register */
  RCC_APB2PeriphClockCmd(RCC_APB1Periph_BKP | RCC_APB1Periph_PWR, ENABLE );
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	f04f 50c0 	mov.w	r0, #402653184	; 0x18000000
 8003c40:	47a0      	blx	r4
  
  /* USART1 Clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);  
 8003c42:	2101      	movs	r1, #1
 8003c44:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003c48:	47a0      	blx	r4
  /*DMA Clock*/
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
  
  /* Timer3 Clock */
  //RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);  
}
 8003c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 8003c4e:	2101      	movs	r1, #1
 8003c50:	4b03      	ldr	r3, [pc, #12]	; (8003c60 <RCC_Configuration+0x3c>)
 8003c52:	4608      	mov	r0, r1
 8003c54:	4718      	bx	r3
 8003c56:	bf00      	nop
 8003c58:	08004ef5 	.word	0x08004ef5
 8003c5c:	080053b5 	.word	0x080053b5
 8003c60:	0800539d 	.word	0x0800539d

08003c64 <ADC_Configuration>:
* Description    : Configures Analog to digital converter
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void ADC_Configuration(){
 8003c64:	b570      	push	{r4, r5, r6, lr}
  ADC_InitTypeDef ADC_InitStructure;
  ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
 8003c66:	2300      	movs	r3, #0
  ADC_InitStructure.ADC_ScanConvMode = ENABLE;
 8003c68:	2401      	movs	r4, #1
  ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
  ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
 8003c6a:	f44f 2560 	mov.w	r5, #917504	; 0xe0000
  ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
  ADC_InitStructure.ADC_NbrOfChannel = 2;
 8003c6e:	2602      	movs	r6, #2
void ADC_Configuration(){
 8003c70:	b086      	sub	sp, #24
  ADC_Init(ADC1,&ADC_InitStructure);
 8003c72:	a901      	add	r1, sp, #4
 8003c74:	481b      	ldr	r0, [pc, #108]	; (8003ce4 <ADC_Configuration+0x80>)
 8003c76:	4a1c      	ldr	r2, [pc, #112]	; (8003ce8 <ADC_Configuration+0x84>)
  ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
 8003c78:	9301      	str	r3, [sp, #4]
  ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8003c7a:	9304      	str	r3, [sp, #16]
  ADC_InitStructure.ADC_ScanConvMode = ENABLE;
 8003c7c:	f88d 4008 	strb.w	r4, [sp, #8]
  ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 8003c80:	f88d 4009 	strb.w	r4, [sp, #9]
  ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
 8003c84:	9503      	str	r5, [sp, #12]
  ADC_InitStructure.ADC_NbrOfChannel = 2;
 8003c86:	f88d 6014 	strb.w	r6, [sp, #20]

  ADC_RegularChannelConfig(ADC1,ADC_Channel_1,1,ADC_SampleTime_239Cycles5);
 8003c8a:	4d18      	ldr	r5, [pc, #96]	; (8003cec <ADC_Configuration+0x88>)
  ADC_Init(ADC1,&ADC_InitStructure);
 8003c8c:	4790      	blx	r2
  ADC_RegularChannelConfig(ADC1,ADC_Channel_1,1,ADC_SampleTime_239Cycles5);
 8003c8e:	4622      	mov	r2, r4
 8003c90:	4621      	mov	r1, r4
 8003c92:	2307      	movs	r3, #7
 8003c94:	4813      	ldr	r0, [pc, #76]	; (8003ce4 <ADC_Configuration+0x80>)
 8003c96:	47a8      	blx	r5
  ADC_RegularChannelConfig(ADC1,ADC_Channel_9,2,ADC_SampleTime_239Cycles5);
 8003c98:	4632      	mov	r2, r6
 8003c9a:	2307      	movs	r3, #7
 8003c9c:	2109      	movs	r1, #9
 8003c9e:	4811      	ldr	r0, [pc, #68]	; (8003ce4 <ADC_Configuration+0x80>)
 8003ca0:	47a8      	blx	r5
  
  ADC_DMACmd(ADC1, ENABLE);
 8003ca2:	4621      	mov	r1, r4
 8003ca4:	480f      	ldr	r0, [pc, #60]	; (8003ce4 <ADC_Configuration+0x80>)
 8003ca6:	4b12      	ldr	r3, [pc, #72]	; (8003cf0 <ADC_Configuration+0x8c>)
 8003ca8:	4798      	blx	r3
  ADC_Cmd(ADC1,ENABLE);
 8003caa:	4621      	mov	r1, r4
 8003cac:	480d      	ldr	r0, [pc, #52]	; (8003ce4 <ADC_Configuration+0x80>)
 8003cae:	4b11      	ldr	r3, [pc, #68]	; (8003cf4 <ADC_Configuration+0x90>)
 8003cb0:	4798      	blx	r3
  //Calibration
  ADC_ResetCalibration(ADC1);
 8003cb2:	480c      	ldr	r0, [pc, #48]	; (8003ce4 <ADC_Configuration+0x80>)
 8003cb4:	4b10      	ldr	r3, [pc, #64]	; (8003cf8 <ADC_Configuration+0x94>)
 8003cb6:	4798      	blx	r3
 8003cb8:	4d10      	ldr	r5, [pc, #64]	; (8003cfc <ADC_Configuration+0x98>)
  while(ADC_GetCalibrationStatus(ADC1)){} // Wait for calibration reset
 8003cba:	4c0a      	ldr	r4, [pc, #40]	; (8003ce4 <ADC_Configuration+0x80>)
 8003cbc:	4620      	mov	r0, r4
 8003cbe:	47a8      	blx	r5
 8003cc0:	2800      	cmp	r0, #0
 8003cc2:	d1fb      	bne.n	8003cbc <ADC_Configuration+0x58>
  ADC_StartCalibration(ADC1);
 8003cc4:	4807      	ldr	r0, [pc, #28]	; (8003ce4 <ADC_Configuration+0x80>)
 8003cc6:	4b0e      	ldr	r3, [pc, #56]	; (8003d00 <ADC_Configuration+0x9c>)
 8003cc8:	4798      	blx	r3
 8003cca:	4d0e      	ldr	r5, [pc, #56]	; (8003d04 <ADC_Configuration+0xa0>)
  while(ADC_GetResetCalibrationStatus(ADC1)){} //Wait for calibration finished
 8003ccc:	4c05      	ldr	r4, [pc, #20]	; (8003ce4 <ADC_Configuration+0x80>)
 8003cce:	4620      	mov	r0, r4
 8003cd0:	47a8      	blx	r5
 8003cd2:	2800      	cmp	r0, #0
 8003cd4:	d1fb      	bne.n	8003cce <ADC_Configuration+0x6a>


  //Start Conversion
  ADC_SoftwareStartConvCmd(ADC1,ENABLE);
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	4802      	ldr	r0, [pc, #8]	; (8003ce4 <ADC_Configuration+0x80>)
 8003cda:	4b0b      	ldr	r3, [pc, #44]	; (8003d08 <ADC_Configuration+0xa4>)
 8003cdc:	4798      	blx	r3
}
 8003cde:	b006      	add	sp, #24
 8003ce0:	bd70      	pop	{r4, r5, r6, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40012400 	.word	0x40012400
 8003ce8:	08005109 	.word	0x08005109
 8003cec:	080051b5 	.word	0x080051b5
 8003cf0:	08005165 	.word	0x08005165
 8003cf4:	08005151 	.word	0x08005151
 8003cf8:	08005179 	.word	0x08005179
 8003cfc:	08005199 	.word	0x08005199
 8003d00:	0800518d 	.word	0x0800518d
 8003d04:	08005185 	.word	0x08005185
 8003d08:	080051a1 	.word	0x080051a1

08003d0c <DMA_Configuration>:
* Description    : Configures DMA
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA_Configuration(){
 8003d0c:	b5f0      	push	{r4, r5, r6, r7, lr}

  DMA_DeInit(DMA1_Channel1);
 8003d0e:	4c14      	ldr	r4, [pc, #80]	; (8003d60 <DMA_Configuration+0x54>)
void DMA_Configuration(){
 8003d10:	b08d      	sub	sp, #52	; 0x34
  DMA_DeInit(DMA1_Channel1);
 8003d12:	4620      	mov	r0, r4
 8003d14:	4b13      	ldr	r3, [pc, #76]	; (8003d64 <DMA_Configuration+0x58>)
 8003d16:	4798      	blx	r3
  DMA_InitStructure.DMA_PeripheralBaseAddr = ADC1_DR_Address;
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)(&ADCValues) ;
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC ;
  DMA_InitStructure.DMA_BufferSize = 2 ;
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable  ;
  DMA_InitStructure.DMA_MemoryInc=DMA_MemoryInc_Enable;
 8003d18:	2780      	movs	r7, #128	; 0x80
  DMA_InitStructure.DMA_PeripheralDataSize =DMA_PeripheralDataSize_HalfWord;
 8003d1a:	f44f 7580 	mov.w	r5, #256	; 0x100
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 8003d1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC ;
 8003d22:	2300      	movs	r3, #0
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular ;
 8003d24:	2120      	movs	r1, #32
  DMA_InitStructure.DMA_BufferSize = 2 ;
 8003d26:	f04f 0c02 	mov.w	ip, #2
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8003d2a:	f44f 5600 	mov.w	r6, #8192	; 0x2000
  DMA_InitStructure.DMA_PeripheralDataSize =DMA_PeripheralDataSize_HalfWord;
 8003d2e:	e9cd 7506 	strd	r7, r5, [sp, #24]
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 8003d32:	9208      	str	r2, [sp, #32]
  DMA_InitStructure.DMA_PeripheralBaseAddr = ADC1_DR_Address;
 8003d34:	4d0c      	ldr	r5, [pc, #48]	; (8003d68 <DMA_Configuration+0x5c>)
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)(&ADCValues) ;
 8003d36:	4a0d      	ldr	r2, [pc, #52]	; (8003d6c <DMA_Configuration+0x60>)
  DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 
  DMA_Init(DMA1_Channel1,&DMA_InitStructure);
 8003d38:	4620      	mov	r0, r4
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC ;
 8003d3a:	9303      	str	r3, [sp, #12]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable  ;
 8003d3c:	9305      	str	r3, [sp, #20]
  DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 8003d3e:	930b      	str	r3, [sp, #44]	; 0x2c
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular ;
 8003d40:	9109      	str	r1, [sp, #36]	; 0x24
  DMA_Init(DMA1_Channel1,&DMA_InitStructure);
 8003d42:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <DMA_Configuration+0x64>)
 8003d44:	a901      	add	r1, sp, #4
  DMA_InitStructure.DMA_BufferSize = 2 ;
 8003d46:	f8cd c010 	str.w	ip, [sp, #16]
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)(&ADCValues) ;
 8003d4a:	e9cd 5201 	strd	r5, r2, [sp, #4]
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8003d4e:	960a      	str	r6, [sp, #40]	; 0x28
  DMA_Init(DMA1_Channel1,&DMA_InitStructure);
 8003d50:	4798      	blx	r3
  DMA_Cmd(DMA1_Channel1,ENABLE);
 8003d52:	4620      	mov	r0, r4
 8003d54:	2101      	movs	r1, #1
 8003d56:	4b07      	ldr	r3, [pc, #28]	; (8003d74 <DMA_Configuration+0x68>)
 8003d58:	4798      	blx	r3
}
 8003d5a:	b00d      	add	sp, #52	; 0x34
 8003d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	40020008 	.word	0x40020008
 8003d64:	080053f5 	.word	0x080053f5
 8003d68:	4001244c 	.word	0x4001244c
 8003d6c:	200005c0 	.word	0x200005c0
 8003d70:	08005519 	.word	0x08005519
 8003d74:	08005559 	.word	0x08005559

08003d78 <NVIC_Configuration>:
* Output         : None
* Return         : None
*******************************************************************************/
extern uint32_t _isr_vectorsflash_offs;
void NVIC_Configuration(void)
{
 8003d78:	b510      	push	{r4, lr}
  /* Set the Vector Table base location at 0x08000000+_isr_vectorsflash_offs */
  NVIC_SetVectorTable(NVIC_VectTab_FLASH, (uint32_t)&_isr_vectorsflash_offs);
 8003d7a:	490a      	ldr	r1, [pc, #40]	; (8003da4 <NVIC_Configuration+0x2c>)
{
 8003d7c:	b082      	sub	sp, #8
  NVIC_SetVectorTable(NVIC_VectTab_FLASH, (uint32_t)&_isr_vectorsflash_offs);
 8003d7e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8003d82:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <NVIC_Configuration+0x30>)
 8003d84:	4798      	blx	r3
  NVIC_InitTypeDef NVIC_InitStructure;
  
  /* USART1 Interrupts*/
  NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 8003d86:	2425      	movs	r4, #37	; 0x25
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8003d88:	2100      	movs	r1, #0
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003d8a:	2201      	movs	r2, #1
  NVIC_Init(&NVIC_InitStructure);
 8003d8c:	a801      	add	r0, sp, #4
 8003d8e:	4b07      	ldr	r3, [pc, #28]	; (8003dac <NVIC_Configuration+0x34>)
  NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 8003d90:	f88d 4004 	strb.w	r4, [sp, #4]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8003d94:	f88d 1006 	strb.w	r1, [sp, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003d98:	f88d 2007 	strb.w	r2, [sp, #7]
  NVIC_Init(&NVIC_InitStructure);
 8003d9c:	4798      	blx	r3
  //NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;
  //NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  //NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  //NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  //NVIC_Init(&NVIC_InitStructure);
}
 8003d9e:	b002      	add	sp, #8
 8003da0:	bd10      	pop	{r4, pc}
 8003da2:	bf00      	nop
 8003da4:	00003000 	.word	0x00003000
 8003da8:	080055c5 	.word	0x080055c5
 8003dac:	0800556d 	.word	0x0800556d

08003db0 <GPIO_Configuration>:
d
d* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_Configuration(void)
{
 8003db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStructure;

  //Active l'alimentation
  GPIO_InitStructure.GPIO_Pin =  PON_PIN;
 8003db4:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8003db8:	2710      	movs	r7, #16
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003dba:	2603      	movs	r6, #3
  GPIO_Init(PON_PORT, &GPIO_InitStructure);
  
  // Configure PA.8 as output push-pull (LED)
  GPIO_InitStructure.GPIO_Pin =  LED_PIN;
 8003dbc:	f04f 0820 	mov.w	r8, #32
{
 8003dc0:	b083      	sub	sp, #12
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_Init(LED_PORT, &GPIO_InitStructure);
 8003dc2:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 8003ec0 <GPIO_Configuration+0x110>
  GPIO_Init(PON_PORT, &GPIO_InitStructure);
 8003dc6:	4c3a      	ldr	r4, [pc, #232]	; (8003eb0 <GPIO_Configuration+0x100>)

  // LCD CS Output 
  GPIO_InitStructure.GPIO_Pin =  LCD_CS_PIN;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_Init(LCD_CS_PORT, &GPIO_InitStructure);
 8003dc8:	4d3a      	ldr	r5, [pc, #232]	; (8003eb4 <GPIO_Configuration+0x104>)
  GPIO_Init(PON_PORT, &GPIO_InitStructure);
 8003dca:	a901      	add	r1, sp, #4
 8003dcc:	483a      	ldr	r0, [pc, #232]	; (8003eb8 <GPIO_Configuration+0x108>)
  GPIO_InitStructure.GPIO_Pin =  PON_PIN;
 8003dce:	f8ad 3004 	strh.w	r3, [sp, #4]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8003dd2:	f88d 7007 	strb.w	r7, [sp, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003dd6:	f88d 6006 	strb.w	r6, [sp, #6]
  GPIO_Init(PON_PORT, &GPIO_InitStructure);
 8003dda:	47a0      	blx	r4
  GPIO_Init(LED_PORT, &GPIO_InitStructure);
 8003ddc:	a901      	add	r1, sp, #4
 8003dde:	4650      	mov	r0, sl
  GPIO_InitStructure.GPIO_Pin =  LED_PIN;
 8003de0:	f8ad 8004 	strh.w	r8, [sp, #4]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8003de4:	f88d 7007 	strb.w	r7, [sp, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003de8:	f88d 6006 	strb.w	r6, [sp, #6]
  GPIO_Init(LED_PORT, &GPIO_InitStructure);
 8003dec:	47a0      	blx	r4
  GPIO_Init(LCD_CS_PORT, &GPIO_InitStructure);
 8003dee:	a901      	add	r1, sp, #4
 8003df0:	4628      	mov	r0, r5
  GPIO_WriteBit(LCD_CS_PORT,LCD_CS_PIN,Bit_SET);
 8003df2:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8003ec4 <GPIO_Configuration+0x114>
  GPIO_InitStructure.GPIO_Pin =  LCD_CS_PIN;
 8003df6:	f8ad 7004 	strh.w	r7, [sp, #4]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8003dfa:	f88d 7007 	strb.w	r7, [sp, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003dfe:	f88d 6006 	strb.w	r6, [sp, #6]
  GPIO_Init(LCD_CS_PORT, &GPIO_InitStructure);
 8003e02:	47a0      	blx	r4
  GPIO_WriteBit(LCD_CS_PORT,LCD_CS_PIN,Bit_SET);
 8003e04:	2201      	movs	r2, #1
 8003e06:	4639      	mov	r1, r7
 8003e08:	4628      	mov	r0, r5
 8003e0a:	47c8      	blx	r9
    
  // LCD SDA Output 
  GPIO_InitStructure.GPIO_Pin =  LCD_SDA_PIN;
 8003e0c:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_Init(LCD_SDA_PORT, &GPIO_InitStructure);
 8003e0e:	a901      	add	r1, sp, #4
 8003e10:	4628      	mov	r0, r5
  GPIO_InitStructure.GPIO_Pin =  LCD_SDA_PIN;
 8003e12:	f8ad 3004 	strh.w	r3, [sp, #4]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8003e16:	f88d 7007 	strb.w	r7, [sp, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003e1a:	f88d 6006 	strb.w	r6, [sp, #6]
  GPIO_Init(LCD_SDA_PORT, &GPIO_InitStructure);
 8003e1e:	47a0      	blx	r4

  // LCD CLK Output 
  GPIO_InitStructure.GPIO_Pin =  LCD_CLK_PIN;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_Init(LCD_CLK_PORT, &GPIO_InitStructure);
 8003e20:	a901      	add	r1, sp, #4
 8003e22:	4628      	mov	r0, r5
  GPIO_InitStructure.GPIO_Pin =  LCD_CLK_PIN;
 8003e24:	f8ad 8004 	strh.w	r8, [sp, #4]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8003e28:	f88d 7007 	strb.w	r7, [sp, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003e2c:	f88d 6006 	strb.w	r6, [sp, #6]
  GPIO_Init(LCD_CLK_PORT, &GPIO_InitStructure);
 8003e30:	47a0      	blx	r4
  GPIO_WriteBit(LCD_CLK_PORT,LCD_CLK_PIN,Bit_SET);
 8003e32:	4641      	mov	r1, r8
 8003e34:	4628      	mov	r0, r5
 8003e36:	2201      	movs	r2, #1
 8003e38:	47c8      	blx	r9

  
  // USART TX : M->GPS
  GPIO_InitStructure.GPIO_Pin =  GPS_USART_TX_PIN;
 8003e3a:	f44f 7200 	mov.w	r2, #512	; 0x200
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8003e3e:	2318      	movs	r3, #24
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_Init(GPS_USART_TX_PORT, &GPIO_InitStructure);
  
  // USART RX : GPS->M
  GPIO_InitStructure.GPIO_Pin =  GPS_USART_RX_PIN;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8003e40:	f04f 0b04 	mov.w	fp, #4
  GPIO_Init(GPS_USART_TX_PORT, &GPIO_InitStructure);
 8003e44:	a901      	add	r1, sp, #4
 8003e46:	4628      	mov	r0, r5
  GPIO_InitStructure.GPIO_Pin =  GPS_USART_TX_PIN;
 8003e48:	f8ad 2004 	strh.w	r2, [sp, #4]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8003e4c:	f88d 3007 	strb.w	r3, [sp, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003e50:	f88d 6006 	strb.w	r6, [sp, #6]
  GPIO_Init(GPS_USART_TX_PORT, &GPIO_InitStructure);
 8003e54:	47a0      	blx	r4
  GPIO_InitStructure.GPIO_Pin =  GPS_USART_RX_PIN;
 8003e56:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_Init(GPS_POWER_PORT, &GPIO_InitStructure);
  
  // VBAT
  GPIO_InitStructure.GPIO_Pin =  VBAT_PIN;
 8003e5a:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
 8003e5e:	f04f 0800 	mov.w	r8, #0
  GPIO_Init(GPS_USART_RX_PORT, &GPIO_InitStructure);
 8003e62:	eb0d 010b 	add.w	r1, sp, fp
 8003e66:	4628      	mov	r0, r5
  GPIO_InitStructure.GPIO_Pin =  GPS_USART_RX_PIN;
 8003e68:	f8ad 3004 	strh.w	r3, [sp, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003e6c:	f88d 6006 	strb.w	r6, [sp, #6]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8003e70:	f88d b007 	strb.w	fp, [sp, #7]
  GPIO_Init(GPS_USART_RX_PORT, &GPIO_InitStructure);
 8003e74:	47a0      	blx	r4
  GPIO_Init(GPS_POWER_PORT, &GPIO_InitStructure);
 8003e76:	eb0d 010b 	add.w	r1, sp, fp
 8003e7a:	4810      	ldr	r0, [pc, #64]	; (8003ebc <GPIO_Configuration+0x10c>)
  GPIO_InitStructure.GPIO_Pin =  GPS_POWER_PIN;
 8003e7c:	f8ad b004 	strh.w	fp, [sp, #4]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8003e80:	f88d 7007 	strb.w	r7, [sp, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003e84:	f88d 6006 	strb.w	r6, [sp, #6]
  GPIO_Init(GPS_POWER_PORT, &GPIO_InitStructure);
 8003e88:	47a0      	blx	r4
  GPIO_Init(VBAT_PORT, &GPIO_InitStructure);
 8003e8a:	4628      	mov	r0, r5
 8003e8c:	eb0d 010b 	add.w	r1, sp, fp
  GPIO_InitStructure.GPIO_Pin =  VBAT_PIN;
 8003e90:	f8ad 9004 	strh.w	r9, [sp, #4]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
 8003e94:	f88d 8007 	strb.w	r8, [sp, #7]
  GPIO_Init(VBAT_PORT, &GPIO_InitStructure);
 8003e98:	47a0      	blx	r4

  // TBAT
  GPIO_InitStructure.GPIO_Pin =  TBAT_PIN; 
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
  GPIO_Init(TBAT_PORT, &GPIO_InitStructure);
 8003e9a:	eb0d 010b 	add.w	r1, sp, fp
 8003e9e:	4650      	mov	r0, sl
  GPIO_InitStructure.GPIO_Pin =  TBAT_PIN; 
 8003ea0:	f8ad 9004 	strh.w	r9, [sp, #4]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
 8003ea4:	f88d 8007 	strb.w	r8, [sp, #7]
  GPIO_Init(TBAT_PORT, &GPIO_InitStructure);
 8003ea8:	47a0      	blx	r4
  //GPIO_WriteBit(GPS_RESET_PORT,GPS_RESET_PIN,Bit_SET);
  GPS_RESET_PORT->BRR = GPS_RESET_PIN;

  
  */
}
 8003eaa:	b003      	add	sp, #12
 8003eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eb0:	08005245 	.word	0x08005245
 8003eb4:	40010800 	.word	0x40010800
 8003eb8:	40011000 	.word	0x40011000
 8003ebc:	40011400 	.word	0x40011400
 8003ec0:	40010c00 	.word	0x40010c00
 8003ec4:	08005301 	.word	0x08005301

08003ec8 <main>:
{
 8003ec8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  RCC_Configuration();
 8003ecc:	4b3d      	ldr	r3, [pc, #244]	; (8003fc4 <main+0xfc>)
 8003ece:	4798      	blx	r3
  GPIO_Configuration();
 8003ed0:	4b3d      	ldr	r3, [pc, #244]	; (8003fc8 <main+0x100>)
 8003ed2:	4798      	blx	r3
  USART_Configuration();
 8003ed4:	4b3d      	ldr	r3, [pc, #244]	; (8003fcc <main+0x104>)
 8003ed6:	4798      	blx	r3
  NVIC_Configuration();
 8003ed8:	4b3d      	ldr	r3, [pc, #244]	; (8003fd0 <main+0x108>)
 8003eda:	4798      	blx	r3
  ADC_Configuration();
 8003edc:	4b3d      	ldr	r3, [pc, #244]	; (8003fd4 <main+0x10c>)
 8003ede:	4798      	blx	r3
  DMA_Configuration();
 8003ee0:	4b3d      	ldr	r3, [pc, #244]	; (8003fd8 <main+0x110>)
 8003ee2:	4798      	blx	r3
  GPIO_WriteBit(PON_PORT,PON_PIN,Bit_SET);
 8003ee4:	f8df b11c 	ldr.w	fp, [pc, #284]	; 8004004 <main+0x13c>
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003eee:	483b      	ldr	r0, [pc, #236]	; (8003fdc <main+0x114>)
 8003ef0:	47d8      	blx	fp
  LCDInit();
 8003ef2:	4b3b      	ldr	r3, [pc, #236]	; (8003fe0 <main+0x118>)
 8003ef4:	4798      	blx	r3
  USART_Cmd(GPS_USART,ENABLE);
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	483a      	ldr	r0, [pc, #232]	; (8003fe4 <main+0x11c>)
 8003efa:	4b3b      	ldr	r3, [pc, #236]	; (8003fe8 <main+0x120>)
 8003efc:	4798      	blx	r3
  gpsSetEnabled(TRUE);
 8003efe:	4b3b      	ldr	r3, [pc, #236]	; (8003fec <main+0x124>)
 8003f00:	2001      	movs	r0, #1
 8003f02:	4798      	blx	r3
  delai(1000);
 8003f04:	4d3a      	ldr	r5, [pc, #232]	; (8003ff0 <main+0x128>)
 8003f06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f0a:	47a8      	blx	r5
  gpsInit();
 8003f0c:	4b39      	ldr	r3, [pc, #228]	; (8003ff4 <main+0x12c>)
 8003f0e:	4798      	blx	r3
  screen = TIME;
 8003f10:	2300      	movs	r3, #0
 8003f12:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8004008 <main+0x140>
  while((BTN_GAUCHE_PORT->IDR & BTN_GAUCHE_PIN) != 0) 
 8003f16:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 800400c <main+0x144>
  screen = TIME;
 8003f1a:	f889 3000 	strb.w	r3, [r9]
    if(newGPSData){
 8003f1e:	4f36      	ldr	r7, [pc, #216]	; (8003ff8 <main+0x130>)
    if((BTN_BACK_PORT->IDR & BTN_BACK_PIN) == 0){
 8003f20:	4e2e      	ldr	r6, [pc, #184]	; (8003fdc <main+0x114>)
      dispUpdate();
 8003f22:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 8004010 <main+0x148>
  while((BTN_GAUCHE_PORT->IDR & BTN_GAUCHE_PIN) != 0) 
 8003f26:	e009      	b.n	8003f3c <main+0x74>
    if((BTN_BACK_PORT->IDR & BTN_BACK_PIN) == 0){
 8003f28:	68b3      	ldr	r3, [r6, #8]
 8003f2a:	0799      	lsls	r1, r3, #30
 8003f2c:	d514      	bpl.n	8003f58 <main+0x90>
    if((BTN_DROITE_PORT->IDR & BTN_DROITE_PIN) == 0){
 8003f2e:	68b3      	ldr	r3, [r6, #8]
    if((BTN_BAS_PORT->IDR & BTN_BAS_PIN) == 0){
 8003f30:	68b3      	ldr	r3, [r6, #8]
 8003f32:	06da      	lsls	r2, r3, #27
 8003f34:	d519      	bpl.n	8003f6a <main+0xa2>
    if((BTN_HAUT_PORT->IDR & BTN_HAUT_PIN) == 0){
 8003f36:	68b3      	ldr	r3, [r6, #8]
 8003f38:	07db      	lsls	r3, r3, #31
 8003f3a:	d527      	bpl.n	8003f8c <main+0xc4>
  while((BTN_GAUCHE_PORT->IDR & BTN_GAUCHE_PIN) != 0) 
 8003f3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003f40:	f014 0401 	ands.w	r4, r4, #1
 8003f44:	d035      	beq.n	8003fb2 <main+0xea>
    if(newGPSData){
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0ed      	beq.n	8003f28 <main+0x60>
      dispUpdate();
 8003f4c:	47d0      	blx	sl
      newGPSData=FALSE;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	603b      	str	r3, [r7, #0]
    if((BTN_BACK_PORT->IDR & BTN_BACK_PIN) == 0){
 8003f52:	68b3      	ldr	r3, [r6, #8]
 8003f54:	0799      	lsls	r1, r3, #30
 8003f56:	d4ea      	bmi.n	8003f2e <main+0x66>
    LED_PORT->BRR = LED_PIN;
 8003f58:	2120      	movs	r1, #32
 8003f5a:	4a28      	ldr	r2, [pc, #160]	; (8003ffc <main+0x134>)
      gotoBootloader();
 8003f5c:	4b28      	ldr	r3, [pc, #160]	; (8004000 <main+0x138>)
    LED_PORT->BRR = LED_PIN;
 8003f5e:	6151      	str	r1, [r2, #20]
      gotoBootloader();
 8003f60:	4798      	blx	r3
    if((BTN_DROITE_PORT->IDR & BTN_DROITE_PIN) == 0){
 8003f62:	68b3      	ldr	r3, [r6, #8]
    if((BTN_BAS_PORT->IDR & BTN_BAS_PIN) == 0){
 8003f64:	68b3      	ldr	r3, [r6, #8]
 8003f66:	06da      	lsls	r2, r3, #27
 8003f68:	d4e5      	bmi.n	8003f36 <main+0x6e>
      screen = screen+1;
 8003f6a:	f899 3000 	ldrb.w	r3, [r9]
      dispUpdate();
 8003f6e:	2464      	movs	r4, #100	; 0x64
      screen = screen+1;
 8003f70:	3301      	adds	r3, #1
      screen = screen%4;
 8003f72:	f003 0303 	and.w	r3, r3, #3
 8003f76:	f889 3000 	strb.w	r3, [r9]
      dispUpdate();
 8003f7a:	47d0      	blx	sl
	delai(10000);
 8003f7c:	f242 7010 	movw	r0, #10000	; 0x2710
 8003f80:	47a8      	blx	r5
      for(i=0;i<100;i++)
 8003f82:	3c01      	subs	r4, #1
 8003f84:	d1fa      	bne.n	8003f7c <main+0xb4>
    if((BTN_HAUT_PORT->IDR & BTN_HAUT_PIN) == 0){
 8003f86:	68b3      	ldr	r3, [r6, #8]
 8003f88:	07db      	lsls	r3, r3, #31
 8003f8a:	d4d7      	bmi.n	8003f3c <main+0x74>
      screen = screen+3;
 8003f8c:	f899 3000 	ldrb.w	r3, [r9]
      dispUpdate();
 8003f90:	2464      	movs	r4, #100	; 0x64
      screen = screen+3;
 8003f92:	3303      	adds	r3, #3
      screen = screen%4;
 8003f94:	f003 0303 	and.w	r3, r3, #3
 8003f98:	f889 3000 	strb.w	r3, [r9]
      dispUpdate();
 8003f9c:	47d0      	blx	sl
	delai(10000); 
 8003f9e:	f242 7010 	movw	r0, #10000	; 0x2710
 8003fa2:	47a8      	blx	r5
      for(i=0;i<100;i++)
 8003fa4:	3c01      	subs	r4, #1
 8003fa6:	d1fa      	bne.n	8003f9e <main+0xd6>
  while((BTN_GAUCHE_PORT->IDR & BTN_GAUCHE_PIN) != 0) 
 8003fa8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003fac:	f014 0401 	ands.w	r4, r4, #1
 8003fb0:	d1c9      	bne.n	8003f46 <main+0x7e>
  GPIO_WriteBit(PON_PORT,PON_PIN,Bit_RESET);
 8003fb2:	4622      	mov	r2, r4
 8003fb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003fb8:	4808      	ldr	r0, [pc, #32]	; (8003fdc <main+0x114>)
 8003fba:	47d8      	blx	fp
}
 8003fbc:	4620      	mov	r0, r4
 8003fbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fc2:	bf00      	nop
 8003fc4:	08003c25 	.word	0x08003c25
 8003fc8:	08003db1 	.word	0x08003db1
 8003fcc:	08003be5 	.word	0x08003be5
 8003fd0:	08003d79 	.word	0x08003d79
 8003fd4:	08003c65 	.word	0x08003c65
 8003fd8:	08003d0d 	.word	0x08003d0d
 8003fdc:	40011000 	.word	0x40011000
 8003fe0:	080041b5 	.word	0x080041b5
 8003fe4:	40013800 	.word	0x40013800
 8003fe8:	08005059 	.word	0x08005059
 8003fec:	08004675 	.word	0x08004675
 8003ff0:	08004531 	.word	0x08004531
 8003ff4:	08004695 	.word	0x08004695
 8003ff8:	200005b0 	.word	0x200005b0
 8003ffc:	40010c00 	.word	0x40010c00
 8004000:	080038f9 	.word	0x080038f9
 8004004:	08005301 	.word	0x08005301
 8004008:	200005b8 	.word	0x200005b8
 800400c:	40010800 	.word	0x40010800
 8004010:	08003bad 	.word	0x08003bad

08004014 <LCDInit_u8g>:
u8g_t u8g;
u8g_dev_t u8g_dev;



void LCDInit_u8g(){
 8004014:	b538      	push	{r3, r4, r5, lr}
  u8g_dev.dev_fn = &u8g_dev_kalenji700gps_fn;
  u8g_dev.dev_mem = buffer;
  u8g_dev.com_fn= NULL;
 8004016:	2000      	movs	r0, #0

  u8g.width = 128;
 8004018:	f44f 45c9 	mov.w	r5, #25728	; 0x6480
  u8g_dev.dev_fn = &u8g_dev_kalenji700gps_fn;
 800401c:	4b08      	ldr	r3, [pc, #32]	; (8004040 <LCDInit_u8g+0x2c>)
  u8g.width = 128;
 800401e:	4c09      	ldr	r4, [pc, #36]	; (8004044 <LCDInit_u8g+0x30>)
  u8g_dev.dev_fn = &u8g_dev_kalenji700gps_fn;
 8004020:	4909      	ldr	r1, [pc, #36]	; (8004048 <LCDInit_u8g+0x34>)
  u8g_dev.dev_mem = buffer;
 8004022:	4a0a      	ldr	r2, [pc, #40]	; (800404c <LCDInit_u8g+0x38>)
  u8g_dev.com_fn= NULL;
 8004024:	6098      	str	r0, [r3, #8]
  u8g_dev.dev_fn = &u8g_dev_kalenji700gps_fn;
 8004026:	6019      	str	r1, [r3, #0]
  u8g_dev.dev_mem = buffer;
 8004028:	605a      	str	r2, [r3, #4]
  u8g.height = 100;
  u8g.dev = &u8g_dev;
  //u8g_SetFont(&u8g,u8g_font_6x10r);
  //u8g_SetFont(&u8g,u8g_font_9x15r);
  u8g_SetFont(&u8g,u8g_font_5x7r);
 800402a:	4620      	mov	r0, r4
 800402c:	4908      	ldr	r1, [pc, #32]	; (8004050 <LCDInit_u8g+0x3c>)
 800402e:	4a09      	ldr	r2, [pc, #36]	; (8004054 <LCDInit_u8g+0x40>)
  u8g.width = 128;
 8004030:	8025      	strh	r5, [r4, #0]
  u8g.dev = &u8g_dev;
 8004032:	6063      	str	r3, [r4, #4]
  u8g_SetFont(&u8g,u8g_font_5x7r);
 8004034:	4790      	blx	r2
  u8g.current_page.x0=0;
 8004036:	f04f 43c9 	mov.w	r3, #1686110208	; 0x64800000
 800403a:	63a3      	str	r3, [r4, #56]	; 0x38
  u8g.current_page.x1=128;
  u8g.current_page.y0=0; 
  u8g.current_page.y1=100;
}
 800403c:	bd38      	pop	{r3, r4, r5, pc}
 800403e:	bf00      	nop
 8004040:	20000608 	.word	0x20000608
 8004044:	200005cc 	.word	0x200005cc
 8004048:	08004325 	.word	0x08004325
 800404c:	20000614 	.word	0x20000614
 8004050:	080066ec 	.word	0x080066ec
 8004054:	08004dbd 	.word	0x08004dbd

08004058 <LCDSetFontSize>:


void LCDSetFontSize(fontSize_t size){
  switch(size){
 8004058:	2801      	cmp	r0, #1
 800405a:	d00b      	beq.n	8004074 <LCDSetFontSize+0x1c>
 800405c:	d306      	bcc.n	800406c <LCDSetFontSize+0x14>
 800405e:	2802      	cmp	r0, #2
 8004060:	d103      	bne.n	800406a <LCDSetFontSize+0x12>
    break;
  case NORMAL:
    u8g_SetFont(&u8g,u8g_font_6x10r);
    break;
  case LARGE:
    u8g_SetFont(&u8g,u8g_font_gdr30n);
 8004062:	4906      	ldr	r1, [pc, #24]	; (800407c <LCDSetFontSize+0x24>)
 8004064:	4806      	ldr	r0, [pc, #24]	; (8004080 <LCDSetFontSize+0x28>)
 8004066:	4b07      	ldr	r3, [pc, #28]	; (8004084 <LCDSetFontSize+0x2c>)
 8004068:	4718      	bx	r3
 800406a:	4770      	bx	lr
    u8g_SetFont(&u8g,u8g_font_5x7r);
 800406c:	4906      	ldr	r1, [pc, #24]	; (8004088 <LCDSetFontSize+0x30>)
 800406e:	4804      	ldr	r0, [pc, #16]	; (8004080 <LCDSetFontSize+0x28>)
 8004070:	4b04      	ldr	r3, [pc, #16]	; (8004084 <LCDSetFontSize+0x2c>)
 8004072:	4718      	bx	r3
    u8g_SetFont(&u8g,u8g_font_6x10r);
 8004074:	4905      	ldr	r1, [pc, #20]	; (800408c <LCDSetFontSize+0x34>)
 8004076:	4802      	ldr	r0, [pc, #8]	; (8004080 <LCDSetFontSize+0x28>)
 8004078:	4b02      	ldr	r3, [pc, #8]	; (8004084 <LCDSetFontSize+0x2c>)
 800407a:	4718      	bx	r3
 800407c:	08006a04 	.word	0x08006a04
 8004080:	200005cc 	.word	0x200005cc
 8004084:	08004dbd 	.word	0x08004dbd
 8004088:	080066ec 	.word	0x080066ec
 800408c:	08006370 	.word	0x08006370

08004090 <LCDPulseClock>:
   
}


void LCDPulseClock()
{
 8004090:	b570      	push	{r4, r5, r6, lr}
	GPIO_WriteBit(LCD_CLK_PORT,LCD_CLK_PIN,Bit_RESET);
 8004092:	4d06      	ldr	r5, [pc, #24]	; (80040ac <LCDPulseClock+0x1c>)
 8004094:	4c06      	ldr	r4, [pc, #24]	; (80040b0 <LCDPulseClock+0x20>)
 8004096:	4628      	mov	r0, r5
 8004098:	2200      	movs	r2, #0
 800409a:	2120      	movs	r1, #32
 800409c:	47a0      	blx	r4
	GPIO_WriteBit(LCD_CLK_PORT,LCD_CLK_PIN,Bit_SET);
 800409e:	4628      	mov	r0, r5
 80040a0:	4623      	mov	r3, r4
}
 80040a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	GPIO_WriteBit(LCD_CLK_PORT,LCD_CLK_PIN,Bit_SET);
 80040a6:	2201      	movs	r2, #1
 80040a8:	2120      	movs	r1, #32
 80040aa:	4718      	bx	r3
 80040ac:	40010800 	.word	0x40010800
 80040b0:	08005301 	.word	0x08005301

080040b4 <LCDSendCommand>:

//Send Command byte to LCD
void LCDSendCommand(unsigned char data)
{
 80040b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  //Select command mode
  GPIO_WriteBit(LCD_CS_PORT,LCD_CS_PIN,Bit_RESET);
 80040b8:	2200      	movs	r2, #0
{
 80040ba:	4606      	mov	r6, r0
  GPIO_WriteBit(LCD_CS_PORT,LCD_CS_PIN,Bit_RESET);
 80040bc:	2110      	movs	r1, #16
 80040be:	480e      	ldr	r0, [pc, #56]	; (80040f8 <LCDSendCommand+0x44>)
 80040c0:	4f0e      	ldr	r7, [pc, #56]	; (80040fc <LCDSendCommand+0x48>)
 80040c2:	47b8      	blx	r7
 80040c4:	2508      	movs	r5, #8

  int k;
  unsigned char mask = 0x80;
 80040c6:	2480      	movs	r4, #128	; 0x80
 80040c8:	f8df 9034 	ldr.w	r9, [pc, #52]	; 8004100 <LCDSendCommand+0x4c>
  for(k=0;k<8;k++)
    {
      if(data & mask)
	GPIO_WriteBit(LCD_SDA_PORT,LCD_SDA_PIN,Bit_SET);
      else
	GPIO_WriteBit(LCD_SDA_PORT,LCD_SDA_PIN,Bit_RESET);
 80040cc:	f8df 8028 	ldr.w	r8, [pc, #40]	; 80040f8 <LCDSendCommand+0x44>
      if(data & mask)
 80040d0:	ea16 0204 	ands.w	r2, r6, r4
	GPIO_WriteBit(LCD_SDA_PORT,LCD_SDA_PIN,Bit_SET);
 80040d4:	bf18      	it	ne
 80040d6:	2201      	movne	r2, #1
	GPIO_WriteBit(LCD_SDA_PORT,LCD_SDA_PIN,Bit_RESET);
 80040d8:	2180      	movs	r1, #128	; 0x80
 80040da:	4640      	mov	r0, r8
 80040dc:	47b8      	blx	r7
      LCDPulseClock();
 80040de:	47c8      	blx	r9
  for(k=0;k<8;k++)
 80040e0:	3d01      	subs	r5, #1
      mask>>=1;
 80040e2:	ea4f 0454 	mov.w	r4, r4, lsr #1
  for(k=0;k<8;k++)
 80040e6:	d1f3      	bne.n	80040d0 <LCDSendCommand+0x1c>
    }

  //Deactivate LCD
  GPIO_WriteBit(LCD_CS_PORT,LCD_CS_PIN,Bit_SET);
 80040e8:	463b      	mov	r3, r7
}
 80040ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  GPIO_WriteBit(LCD_CS_PORT,LCD_CS_PIN,Bit_SET);
 80040ee:	2201      	movs	r2, #1
 80040f0:	2110      	movs	r1, #16
 80040f2:	4801      	ldr	r0, [pc, #4]	; (80040f8 <LCDSendCommand+0x44>)
 80040f4:	4718      	bx	r3
 80040f6:	bf00      	nop
 80040f8:	40010800 	.word	0x40010800
 80040fc:	08005301 	.word	0x08005301
 8004100:	08004091 	.word	0x08004091

08004104 <LCDGotoLine.part.0>:
    LCDSendCommand(0x00 | (column & 0x1F));
  }
}

// Select page of LCD (line)
void LCDGotoLine(unsigned char line){
 8004104:	b570      	push	{r4, r5, r6, lr}
 8004106:	4604      	mov	r4, r0
  if(line<100){ //only 16 pages
    //Pourquoi ?
    LCDSendCommand(0x00);
 8004108:	4d07      	ldr	r5, [pc, #28]	; (8004128 <LCDGotoLine.part.0+0x24>)
 800410a:	2000      	movs	r0, #0
 800410c:	47a8      	blx	r5
    
    //poids faible
    unsigned char command = 0x60 | (line&0xF);
 800410e:	f004 000f 	and.w	r0, r4, #15
    LCDSendCommand(command);
 8004112:	f040 0060 	orr.w	r0, r0, #96	; 0x60
 8004116:	47a8      	blx	r5
    
    //poids fort
    command = 0x70 | ((line>>4)&0xF);
 8004118:	0920      	lsrs	r0, r4, #4
    LCDSendCommand(command);
 800411a:	462b      	mov	r3, r5
  }
}
 800411c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LCDSendCommand(command);
 8004120:	f040 0070 	orr.w	r0, r0, #112	; 0x70
 8004124:	4718      	bx	r3
 8004126:	bf00      	nop
 8004128:	080040b5 	.word	0x080040b5

0800412c <LCDGotoXY.part.1>:
void LCDGotoXY(unsigned char x, unsigned char y){
 800412c:	b510      	push	{r4, lr}
 800412e:	4604      	mov	r4, r0
 8004130:	4b05      	ldr	r3, [pc, #20]	; (8004148 <LCDGotoXY.part.1+0x1c>)
 8004132:	4608      	mov	r0, r1
 8004134:	4798      	blx	r3
    LCDGotoColumn(x>>2);
 8004136:	08a0      	lsrs	r0, r4, #2
  if(column<32){
 8004138:	281f      	cmp	r0, #31
 800413a:	d900      	bls.n	800413e <LCDGotoXY.part.1+0x12>
}
 800413c:	bd10      	pop	{r4, pc}
    LCDSendCommand(0x00 | (column & 0x1F));
 800413e:	4b03      	ldr	r3, [pc, #12]	; (800414c <LCDGotoXY.part.1+0x20>)
}
 8004140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LCDSendCommand(0x00 | (column & 0x1F));
 8004144:	4718      	bx	r3
 8004146:	bf00      	nop
 8004148:	08004105 	.word	0x08004105
 800414c:	080040b5 	.word	0x080040b5

08004150 <LCDSendData>:
{
 8004150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004154:	4605      	mov	r5, r0
   b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
 8004156:	2608      	movs	r6, #8
  unsigned char mask = 0x80;
 8004158:	2480      	movs	r4, #128	; 0x80
  GPIO_WriteBit(LCD_CS_PORT,LCD_CS_PIN,Bit_SET);
 800415a:	4813      	ldr	r0, [pc, #76]	; (80041a8 <LCDSendData+0x58>)
 800415c:	2201      	movs	r2, #1
 800415e:	2110      	movs	r1, #16
 8004160:	4f12      	ldr	r7, [pc, #72]	; (80041ac <LCDSendData+0x5c>)
 8004162:	47b8      	blx	r7
   b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
 8004164:	0128      	lsls	r0, r5, #4
 8004166:	ea40 1015 	orr.w	r0, r0, r5, lsr #4
   b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
 800416a:	b2c0      	uxtb	r0, r0
 800416c:	1083      	asrs	r3, r0, #2
 800416e:	0085      	lsls	r5, r0, #2
 8004170:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8004174:	f005 05cc 	and.w	r5, r5, #204	; 0xcc
 8004178:	f8df 9034 	ldr.w	r9, [pc, #52]	; 80041b0 <LCDSendData+0x60>
	GPIO_WriteBit(LCD_SDA_PORT,LCD_SDA_PIN,Bit_RESET);
 800417c:	f8df 8028 	ldr.w	r8, [pc, #40]	; 80041a8 <LCDSendData+0x58>
   b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
 8004180:	431d      	orrs	r5, r3
      if(data & mask)
 8004182:	ea15 0204 	ands.w	r2, r5, r4
	GPIO_WriteBit(LCD_SDA_PORT,LCD_SDA_PIN,Bit_SET);
 8004186:	bf18      	it	ne
 8004188:	2201      	movne	r2, #1
	GPIO_WriteBit(LCD_SDA_PORT,LCD_SDA_PIN,Bit_RESET);
 800418a:	2180      	movs	r1, #128	; 0x80
 800418c:	4640      	mov	r0, r8
 800418e:	47b8      	blx	r7
      LCDPulseClock();
 8004190:	47c8      	blx	r9
  for(k=0;k<8;k++)
 8004192:	3e01      	subs	r6, #1
      mask>>=1;
 8004194:	ea4f 0454 	mov.w	r4, r4, lsr #1
  for(k=0;k<8;k++)
 8004198:	d1f3      	bne.n	8004182 <LCDSendData+0x32>
  GPIO_WriteBit(LCD_CS_PORT,LCD_CS_PIN,Bit_RESET);
 800419a:	4632      	mov	r2, r6
 800419c:	463b      	mov	r3, r7
}
 800419e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  GPIO_WriteBit(LCD_CS_PORT,LCD_CS_PIN,Bit_RESET);
 80041a2:	2110      	movs	r1, #16
 80041a4:	4800      	ldr	r0, [pc, #0]	; (80041a8 <LCDSendData+0x58>)
 80041a6:	4718      	bx	r3
 80041a8:	40010800 	.word	0x40010800
 80041ac:	08005301 	.word	0x08005301
 80041b0:	08004091 	.word	0x08004091

080041b4 <LCDInit>:
void LCDInit(){
 80041b4:	b510      	push	{r4, lr}
  LCDSendCommand(0xE2);
 80041b6:	20e2      	movs	r0, #226	; 0xe2
 80041b8:	4c13      	ldr	r4, [pc, #76]	; (8004208 <LCDInit+0x54>)
 80041ba:	47a0      	blx	r4
  LCDSendCommand(0x24);
 80041bc:	2024      	movs	r0, #36	; 0x24
 80041be:	47a0      	blx	r4
  LCDSendCommand(0xC2);
 80041c0:	20c2      	movs	r0, #194	; 0xc2
 80041c2:	47a0      	blx	r4
  LCDSendCommand(0xA0);
 80041c4:	20a0      	movs	r0, #160	; 0xa0
 80041c6:	47a0      	blx	r4
  LCDSendCommand(0xD2);
 80041c8:	20d2      	movs	r0, #210	; 0xd2
 80041ca:	47a0      	blx	r4
  LCDSendCommand(0xEB);
 80041cc:	20eb      	movs	r0, #235	; 0xeb
 80041ce:	47a0      	blx	r4
  LCDSendCommand(0x81);
 80041d0:	2081      	movs	r0, #129	; 0x81
 80041d2:	47a0      	blx	r4
  LCDSendCommand(0x1E);
 80041d4:	201e      	movs	r0, #30
 80041d6:	47a0      	blx	r4
  LCDSendCommand(0xF1); //2 bytes instr
 80041d8:	20f1      	movs	r0, #241	; 0xf1
 80041da:	47a0      	blx	r4
  LCDSendCommand(0x63);
 80041dc:	2063      	movs	r0, #99	; 0x63
 80041de:	47a0      	blx	r4
  LCDSendCommand(0xF2);
 80041e0:	20f2      	movs	r0, #242	; 0xf2
 80041e2:	47a0      	blx	r4
  LCDSendCommand(0x00);
 80041e4:	2000      	movs	r0, #0
 80041e6:	47a0      	blx	r4
  LCDSendCommand(0xF3); //2 bytes instr
 80041e8:	20f3      	movs	r0, #243	; 0xf3
 80041ea:	47a0      	blx	r4
  LCDSendCommand(0x63);
 80041ec:	2063      	movs	r0, #99	; 0x63
 80041ee:	47a0      	blx	r4
  LCDSendCommand(0xAF);
 80041f0:	20af      	movs	r0, #175	; 0xaf
 80041f2:	47a0      	blx	r4
}
 80041f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  posX = posY = 0;
 80041f8:	2300      	movs	r3, #0
 80041fa:	4804      	ldr	r0, [pc, #16]	; (800420c <LCDInit+0x58>)
 80041fc:	4904      	ldr	r1, [pc, #16]	; (8004210 <LCDInit+0x5c>)
  LCDInit_u8g();
 80041fe:	4a05      	ldr	r2, [pc, #20]	; (8004214 <LCDInit+0x60>)
  posX = posY = 0;
 8004200:	6003      	str	r3, [r0, #0]
 8004202:	600b      	str	r3, [r1, #0]
  LCDInit_u8g();
 8004204:	4710      	bx	r2
 8004206:	bf00      	nop
 8004208:	080040b5 	.word	0x080040b5
 800420c:	200005bc 	.word	0x200005bc
 8004210:	200005c8 	.word	0x200005c8
 8004214:	08004015 	.word	0x08004015

08004218 <LCDPrintStringXY>:
{
 8004218:	b410      	push	{r4}
  u8g_DrawStr(&u8g, x, y,string);
 800421a:	4c04      	ldr	r4, [pc, #16]	; (800422c <LCDPrintStringXY+0x14>)
 800421c:	4613      	mov	r3, r2
 800421e:	46a4      	mov	ip, r4
 8004220:	460a      	mov	r2, r1
}
 8004222:	bc10      	pop	{r4}
  u8g_DrawStr(&u8g, x, y,string);
 8004224:	4601      	mov	r1, r0
 8004226:	4802      	ldr	r0, [pc, #8]	; (8004230 <LCDPrintStringXY+0x18>)
 8004228:	4760      	bx	ip
 800422a:	bf00      	nop
 800422c:	08004d11 	.word	0x08004d11
 8004230:	200005cc 	.word	0x200005cc

08004234 <LCDDrawImageTest>:
void LCDDrawImageTest(){
 8004234:	2100      	movs	r1, #0
 8004236:	b570      	push	{r4, r5, r6, lr}
 8004238:	4c07      	ldr	r4, [pc, #28]	; (8004258 <LCDDrawImageTest+0x24>)
 800423a:	4608      	mov	r0, r1
 800423c:	4b07      	ldr	r3, [pc, #28]	; (800425c <LCDDrawImageTest+0x28>)
 800423e:	4798      	blx	r3
 8004240:	4e07      	ldr	r6, [pc, #28]	; (8004260 <LCDDrawImageTest+0x2c>)
 8004242:	2000      	movs	r0, #0
 8004244:	f604 457f 	addw	r5, r4, #3199	; 0xc7f
 8004248:	e001      	b.n	800424e <LCDDrawImageTest+0x1a>
 800424a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    LCDSendData(imagedata[i]);
 800424e:	47b0      	blx	r6
  for(i=0;i<3200;i++)
 8004250:	42ac      	cmp	r4, r5
 8004252:	d1fa      	bne.n	800424a <LCDDrawImageTest+0x16>
}
 8004254:	bd70      	pop	{r4, r5, r6, pc}
 8004256:	bf00      	nop
 8004258:	08005690 	.word	0x08005690
 800425c:	0800412d 	.word	0x0800412d
 8004260:	08004151 	.word	0x08004151

08004264 <LCDDrawImage>:
void LCDDrawImage(char* data){
 8004264:	2100      	movs	r1, #0
 8004266:	b570      	push	{r4, r5, r6, lr}
 8004268:	4b06      	ldr	r3, [pc, #24]	; (8004284 <LCDDrawImage+0x20>)
 800426a:	4605      	mov	r5, r0
 800426c:	4608      	mov	r0, r1
 800426e:	4798      	blx	r3
 8004270:	4e05      	ldr	r6, [pc, #20]	; (8004288 <LCDDrawImage+0x24>)
 8004272:	1e6c      	subs	r4, r5, #1
 8004274:	f605 457f 	addw	r5, r5, #3199	; 0xc7f
    LCDSendData(data[i]);
 8004278:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800427c:	47b0      	blx	r6
  for(i=0;i<3200;i++)
 800427e:	42ac      	cmp	r4, r5
 8004280:	d1fa      	bne.n	8004278 <LCDDrawImage+0x14>
}
 8004282:	bd70      	pop	{r4, r5, r6, pc}
 8004284:	0800412d 	.word	0x0800412d
 8004288:	08004151 	.word	0x08004151

0800428c <LCDDrawBuffer>:
  LCDDrawImage(buffer);
 800428c:	4801      	ldr	r0, [pc, #4]	; (8004294 <LCDDrawBuffer+0x8>)
 800428e:	4b02      	ldr	r3, [pc, #8]	; (8004298 <LCDDrawBuffer+0xc>)
 8004290:	4718      	bx	r3
 8004292:	bf00      	nop
 8004294:	20000614 	.word	0x20000614
 8004298:	08004265 	.word	0x08004265

0800429c <LCDClearBuffer>:
    buffer[i] = 0;
 800429c:	2100      	movs	r1, #0
 800429e:	4b04      	ldr	r3, [pc, #16]	; (80042b0 <LCDClearBuffer+0x14>)
 80042a0:	f503 6248 	add.w	r2, r3, #3200	; 0xc80
 80042a4:	f803 1f01 	strb.w	r1, [r3, #1]!
  for(i=0;i<3200;i++)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d1fb      	bne.n	80042a4 <LCDClearBuffer+0x8>
}
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	20000613 	.word	0x20000613

080042b4 <LCDSet8Pixels>:
  buffer[arg_pixel->x/4+arg_pixel->y*32] |= bits;

}


void LCDSet8Pixels(u8g_dev_t *dev,u8g_dev_arg_pixel_t *arg_pixel){
 80042b4:	b4f0      	push	{r4, r5, r6, r7}
  register uint8_t pixel = arg_pixel->pixel;
 80042b6:	2008      	movs	r0, #8
  uint8_t bits = ( 0x3 << (2*(3-(arg_pixel->x % 4)))) & 0xFF;
 80042b8:	2603      	movs	r6, #3
  register uint8_t pixel = arg_pixel->pixel;
 80042ba:	788b      	ldrb	r3, [r1, #2]
  buffer[arg_pixel->x/4+arg_pixel->y*32] |= bits;
 80042bc:	4d18      	ldr	r5, [pc, #96]	; (8004320 <LCDSet8Pixels+0x6c>)
  int i;
  for(i=0;i<8;i++){
    if ( pixel & 128 ){
 80042be:	061a      	lsls	r2, r3, #24
 80042c0:	d41b      	bmi.n	80042fa <LCDSet8Pixels+0x46>
      LCDSetPixel(dev,arg_pixel);
    }
    switch( arg_pixel->dir ){
 80042c2:	78ca      	ldrb	r2, [r1, #3]
 80042c4:	2a03      	cmp	r2, #3
 80042c6:	d806      	bhi.n	80042d6 <LCDSet8Pixels+0x22>
 80042c8:	e8df f002 	tbb	[pc, r2]
 80042cc:	020f0b13 	.word	0x020f0b13
    case 0: arg_pixel->x++; break;
    case 1: arg_pixel->y++; break;
    case 2: arg_pixel->x--; break;
    case 3: arg_pixel->y--; break;
 80042d0:	784a      	ldrb	r2, [r1, #1]
 80042d2:	3a01      	subs	r2, #1
 80042d4:	704a      	strb	r2, [r1, #1]
    }
    pixel <<= 1;
 80042d6:	005b      	lsls	r3, r3, #1
  for(i=0;i<8;i++){
 80042d8:	3801      	subs	r0, #1
    pixel <<= 1;
 80042da:	b2db      	uxtb	r3, r3
  for(i=0;i<8;i++){
 80042dc:	d1ef      	bne.n	80042be <LCDSet8Pixels+0xa>
  }
}
 80042de:	bcf0      	pop	{r4, r5, r6, r7}
 80042e0:	4770      	bx	lr
    case 1: arg_pixel->y++; break;
 80042e2:	784a      	ldrb	r2, [r1, #1]
 80042e4:	3201      	adds	r2, #1
 80042e6:	704a      	strb	r2, [r1, #1]
 80042e8:	e7f5      	b.n	80042d6 <LCDSet8Pixels+0x22>
    case 2: arg_pixel->x--; break;
 80042ea:	780a      	ldrb	r2, [r1, #0]
 80042ec:	3a01      	subs	r2, #1
 80042ee:	700a      	strb	r2, [r1, #0]
 80042f0:	e7f1      	b.n	80042d6 <LCDSet8Pixels+0x22>
    case 0: arg_pixel->x++; break;
 80042f2:	780a      	ldrb	r2, [r1, #0]
 80042f4:	3201      	adds	r2, #1
 80042f6:	700a      	strb	r2, [r1, #0]
 80042f8:	e7ed      	b.n	80042d6 <LCDSet8Pixels+0x22>
  if((arg_pixel->x>128) || ((arg_pixel->y>100)))
 80042fa:	780f      	ldrb	r7, [r1, #0]
 80042fc:	2f80      	cmp	r7, #128	; 0x80
 80042fe:	d8e0      	bhi.n	80042c2 <LCDSet8Pixels+0xe>
 8004300:	784a      	ldrb	r2, [r1, #1]
 8004302:	2a64      	cmp	r2, #100	; 0x64
 8004304:	d8dd      	bhi.n	80042c2 <LCDSet8Pixels+0xe>
  uint8_t bits = ( 0x3 << (2*(3-(arg_pixel->x % 4)))) & 0xFF;
 8004306:	43fc      	mvns	r4, r7
  buffer[arg_pixel->x/4+arg_pixel->y*32] |= bits;
 8004308:	0152      	lsls	r2, r2, #5
 800430a:	eb02 0297 	add.w	r2, r2, r7, lsr #2
  uint8_t bits = ( 0x3 << (2*(3-(arg_pixel->x % 4)))) & 0xFF;
 800430e:	f004 0403 	and.w	r4, r4, #3
  buffer[arg_pixel->x/4+arg_pixel->y*32] |= bits;
 8004312:	5caf      	ldrb	r7, [r5, r2]
  uint8_t bits = ( 0x3 << (2*(3-(arg_pixel->x % 4)))) & 0xFF;
 8004314:	0064      	lsls	r4, r4, #1
 8004316:	fa06 f404 	lsl.w	r4, r6, r4
  buffer[arg_pixel->x/4+arg_pixel->y*32] |= bits;
 800431a:	433c      	orrs	r4, r7
 800431c:	54ac      	strb	r4, [r5, r2]
 800431e:	e7d0      	b.n	80042c2 <LCDSet8Pixels+0xe>
 8004320:	20000614 	.word	0x20000614

08004324 <u8g_dev_kalenji700gps_fn>:
  box->y1 = 100;
}


uint8_t u8g_dev_kalenji700gps_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg){
  switch(msg){
 8004324:	3a0a      	subs	r2, #10
uint8_t u8g_dev_kalenji700gps_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg){
 8004326:	b510      	push	{r4, lr}
 8004328:	4608      	mov	r0, r1
  switch(msg){
 800432a:	2a3e      	cmp	r2, #62	; 0x3e
 800432c:	d824      	bhi.n	8004378 <u8g_dev_kalenji700gps_fn+0x54>
 800432e:	e8df f002 	tbb	[pc, r2]
 8004332:	235c      	.short	0x235c
 8004334:	23232323 	.word	0x23232323
 8004338:	23232323 	.word	0x23232323
 800433c:	31232027 	.word	0x31232027
 8004340:	23232323 	.word	0x23232323
 8004344:	23232323 	.word	0x23232323
 8004348:	23232323 	.word	0x23232323
 800434c:	23232323 	.word	0x23232323
 8004350:	23232323 	.word	0x23232323
 8004354:	23232323 	.word	0x23232323
 8004358:	23392323 	.word	0x23392323
 800435c:	23232323 	.word	0x23232323
 8004360:	4f232323 	.word	0x4f232323
 8004364:	23232323 	.word	0x23232323
 8004368:	23232323 	.word	0x23232323
 800436c:	54582323 	.word	0x54582323
 8004370:	25          	.byte	0x25
 8004371:	00          	.byte	0x00
  LCDDrawImage(buffer);
 8004372:	4820      	ldr	r0, [pc, #128]	; (80043f4 <u8g_dev_kalenji700gps_fn+0xd0>)
 8004374:	4b20      	ldr	r3, [pc, #128]	; (80043f8 <u8g_dev_kalenji700gps_fn+0xd4>)
 8004376:	4798      	blx	r3
  case U8G_DEV_MSG_SET_XY_CB:
    break;
  case U8G_DEV_MSG_GET_MODE:
    return U8G_MODE_GRAY2BIT;
  }
  return 0;
 8004378:	2000      	movs	r0, #0
}
 800437a:	bd10      	pop	{r4, pc}
    return U8G_MODE_GRAY2BIT;
 800437c:	2002      	movs	r0, #2
}
 800437e:	bd10      	pop	{r4, pc}
    buffer[i] = 0;
 8004380:	2100      	movs	r1, #0
 8004382:	4b1e      	ldr	r3, [pc, #120]	; (80043fc <u8g_dev_kalenji700gps_fn+0xd8>)
 8004384:	f503 6248 	add.w	r2, r3, #3200	; 0xc80
 8004388:	f803 1f01 	strb.w	r1, [r3, #1]!
  for(i=0;i<3200;i++)
 800438c:	4293      	cmp	r3, r2
 800438e:	d1fb      	bne.n	8004388 <u8g_dev_kalenji700gps_fn+0x64>
  return 0;
 8004390:	2000      	movs	r0, #0
 8004392:	e7f2      	b.n	800437a <u8g_dev_kalenji700gps_fn+0x56>
  box->x0 = 0;
 8004394:	2000      	movs	r0, #0
  box->x1 = 128;
 8004396:	2180      	movs	r1, #128	; 0x80
  box->y1 = 100;
 8004398:	2264      	movs	r2, #100	; 0x64
  box->x0 = 0;
 800439a:	7018      	strb	r0, [r3, #0]
  box->y0 = 0;
 800439c:	7058      	strb	r0, [r3, #1]
  box->x1 = 128;
 800439e:	7099      	strb	r1, [r3, #2]
  box->y1 = 100;
 80043a0:	70da      	strb	r2, [r3, #3]
}
 80043a2:	bd10      	pop	{r4, pc}
  if((arg_pixel->x>128) || ((arg_pixel->y>100)))
 80043a4:	781a      	ldrb	r2, [r3, #0]
 80043a6:	2a80      	cmp	r2, #128	; 0x80
 80043a8:	d8e6      	bhi.n	8004378 <u8g_dev_kalenji700gps_fn+0x54>
 80043aa:	785b      	ldrb	r3, [r3, #1]
 80043ac:	2b64      	cmp	r3, #100	; 0x64
 80043ae:	d8e3      	bhi.n	8004378 <u8g_dev_kalenji700gps_fn+0x54>
  uint8_t bits = ( 0x3 << (2*(3-(arg_pixel->x % 4)))) & 0xFF;
 80043b0:	43d0      	mvns	r0, r2
 80043b2:	2103      	movs	r1, #3
  buffer[arg_pixel->x/4+arg_pixel->y*32] |= bits;
 80043b4:	4c0f      	ldr	r4, [pc, #60]	; (80043f4 <u8g_dev_kalenji700gps_fn+0xd0>)
 80043b6:	015b      	lsls	r3, r3, #5
 80043b8:	eb03 0292 	add.w	r2, r3, r2, lsr #2
  uint8_t bits = ( 0x3 << (2*(3-(arg_pixel->x % 4)))) & 0xFF;
 80043bc:	ea00 0301 	and.w	r3, r0, r1
 80043c0:	005b      	lsls	r3, r3, #1
  buffer[arg_pixel->x/4+arg_pixel->y*32] |= bits;
 80043c2:	5ca0      	ldrb	r0, [r4, r2]
  uint8_t bits = ( 0x3 << (2*(3-(arg_pixel->x % 4)))) & 0xFF;
 80043c4:	fa01 f303 	lsl.w	r3, r1, r3
  buffer[arg_pixel->x/4+arg_pixel->y*32] |= bits;
 80043c8:	4303      	orrs	r3, r0
 80043ca:	54a3      	strb	r3, [r4, r2]
  return 0;
 80043cc:	2000      	movs	r0, #0
}
 80043ce:	bd10      	pop	{r4, pc}
    LCDSet8Pixels(dev,(u8g_dev_arg_pixel_t *)arg);
 80043d0:	4619      	mov	r1, r3
 80043d2:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <u8g_dev_kalenji700gps_fn+0xdc>)
 80043d4:	4798      	blx	r3
  return 0;
 80043d6:	2000      	movs	r0, #0
}
 80043d8:	bd10      	pop	{r4, pc}
    *((u8g_uint_t *)arg) = 100;
 80043da:	2264      	movs	r2, #100	; 0x64
 80043dc:	701a      	strb	r2, [r3, #0]
  return 0;
 80043de:	2000      	movs	r0, #0
}
 80043e0:	bd10      	pop	{r4, pc}
    *((u8g_uint_t *)arg) = 128;
 80043e2:	2280      	movs	r2, #128	; 0x80
 80043e4:	701a      	strb	r2, [r3, #0]
  return 0;
 80043e6:	2000      	movs	r0, #0
}
 80043e8:	bd10      	pop	{r4, pc}
    LCDInit();
 80043ea:	4b06      	ldr	r3, [pc, #24]	; (8004404 <u8g_dev_kalenji700gps_fn+0xe0>)
 80043ec:	4798      	blx	r3
  return 0;
 80043ee:	2000      	movs	r0, #0
}
 80043f0:	bd10      	pop	{r4, pc}
 80043f2:	bf00      	nop
 80043f4:	20000614 	.word	0x20000614
 80043f8:	08004265 	.word	0x08004265
 80043fc:	20000613 	.word	0x20000613
 8004400:	080042b5 	.word	0x080042b5
 8004404:	080041b5 	.word	0x080041b5

08004408 <strlen>:
#include "utils.h"
#include <ctype.h>

char debug[15];

int strlen(char* string){
 8004408:	b410      	push	{r4}
  unsigned char len = 0;
  while(*(string++)!=0){
 800440a:	4603      	mov	r3, r0
 800440c:	f100 04fb 	add.w	r4, r0, #251	; 0xfb
 8004410:	e001      	b.n	8004416 <strlen+0xe>
    len++;
    if(len>250)
 8004412:	42a3      	cmp	r3, r4
 8004414:	d008      	beq.n	8004428 <strlen+0x20>
 8004416:	1a1a      	subs	r2, r3, r0
  while(*(string++)!=0){
 8004418:	f813 1b01 	ldrb.w	r1, [r3], #1
 800441c:	b2d2      	uxtb	r2, r2
 800441e:	2900      	cmp	r1, #0
 8004420:	d1f7      	bne.n	8004412 <strlen+0xa>
 8004422:	4610      	mov	r0, r2
      break;
  }
  return len;
}
 8004424:	bc10      	pop	{r4}
 8004426:	4770      	bx	lr
 8004428:	20fb      	movs	r0, #251	; 0xfb
 800442a:	bc10      	pop	{r4}
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop

08004430 <intToStr2>:
  }
  return n;
  
}

void intToStr2(int nb, char* str){
 8004430:	b410      	push	{r4}
  str[0] = '0'+nb/10;
  str[1] = '0'+nb%10;
  str[2] = 0;
 8004432:	2400      	movs	r4, #0
  str[0] = '0'+nb/10;
 8004434:	4a08      	ldr	r2, [pc, #32]	; (8004458 <intToStr2+0x28>)
 8004436:	17c3      	asrs	r3, r0, #31
 8004438:	fb82 c200 	smull	ip, r2, r2, r0
 800443c:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
  str[1] = '0'+nb%10;
 8004440:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004444:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
  str[0] = '0'+nb/10;
 8004448:	3330      	adds	r3, #48	; 0x30
  str[1] = '0'+nb%10;
 800444a:	3030      	adds	r0, #48	; 0x30
  str[2] = 0;
 800444c:	708c      	strb	r4, [r1, #2]
  str[0] = '0'+nb/10;
 800444e:	700b      	strb	r3, [r1, #0]
  str[1] = '0'+nb%10;
 8004450:	7048      	strb	r0, [r1, #1]
}
 8004452:	bc10      	pop	{r4}
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	66666667 	.word	0x66666667

0800445c <intToStr>:
void intToStr(int nb, char* str)
{
	int i=0;
	int cont=1;
	int neg=0;
	if(nb<0)
 800445c:	2800      	cmp	r0, #0
{
 800445e:	b4f0      	push	{r4, r5, r6, r7}
	if(nb<0)
 8004460:	db2c      	blt.n	80044bc <intToStr+0x60>
	int neg=0;
 8004462:	2700      	movs	r7, #0
		neg=1;
		nb=-nb;
	}
	while(cont)
	{
		str[i++] = '0'+nb%10;
 8004464:	2500      	movs	r5, #0
 8004466:	4e17      	ldr	r6, [pc, #92]	; (80044c4 <intToStr+0x68>)
 8004468:	1e4c      	subs	r4, r1, #1
 800446a:	fb86 3200 	smull	r3, r2, r6, r0
 800446e:	17c3      	asrs	r3, r0, #31
 8004470:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8004474:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004478:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
 800447c:	3030      	adds	r0, #48	; 0x30
 800447e:	f804 0f01 	strb.w	r0, [r4, #1]!
 8004482:	1c6a      	adds	r2, r5, #1
		nb = nb/10;
		if(nb==0) cont=0;
 8004484:	4618      	mov	r0, r3
 8004486:	b10b      	cbz	r3, 800448c <intToStr+0x30>
		str[i++] = '0'+nb%10;
 8004488:	4615      	mov	r5, r2
 800448a:	e7ee      	b.n	800446a <intToStr+0xe>
 800448c:	188c      	adds	r4, r1, r2
	}
	if(neg)
 800448e:	b11f      	cbz	r7, 8004498 <intToStr+0x3c>
		str[i++]='-';
 8004490:	232d      	movs	r3, #45	; 0x2d
 8004492:	1caa      	adds	r2, r5, #2
 8004494:	7023      	strb	r3, [r4, #0]
 8004496:	188c      	adds	r4, r1, r2
	str[i] = 0;
 8004498:	2300      	movs	r3, #0
	unsigned char temp;
	unsigned char k;
	for(k=0;k<i/2;k++)
 800449a:	1057      	asrs	r7, r2, #1
 800449c:	429f      	cmp	r7, r3
	str[i] = 0;
 800449e:	7023      	strb	r3, [r4, #0]
	for(k=0;k<i/2;k++)
 80044a0:	dd0a      	ble.n	80044b8 <intToStr+0x5c>
	{
		temp = str[k];
		str[k] = str[i-k-1];
 80044a2:	1a10      	subs	r0, r2, r0
 80044a4:	3801      	subs	r0, #1
 80044a6:	5c0e      	ldrb	r6, [r1, r0]
	for(k=0;k<i/2;k++)
 80044a8:	1c5d      	adds	r5, r3, #1
		temp = str[k];
 80044aa:	5ccc      	ldrb	r4, [r1, r3]
		str[k] = str[i-k-1];
 80044ac:	54ce      	strb	r6, [r1, r3]
	for(k=0;k<i/2;k++)
 80044ae:	b2eb      	uxtb	r3, r5
 80044b0:	42bb      	cmp	r3, r7
		str[i-k-1]=temp;
 80044b2:	540c      	strb	r4, [r1, r0]
	for(k=0;k<i/2;k++)
 80044b4:	4618      	mov	r0, r3
 80044b6:	dbf4      	blt.n	80044a2 <intToStr+0x46>
	}
}
 80044b8:	bcf0      	pop	{r4, r5, r6, r7}
 80044ba:	4770      	bx	lr
		nb=-nb;
 80044bc:	4240      	negs	r0, r0
		neg=1;
 80044be:	2701      	movs	r7, #1
 80044c0:	e7d0      	b.n	8004464 <intToStr+0x8>
 80044c2:	bf00      	nop
 80044c4:	66666667 	.word	0x66666667

080044c8 <doubleToStr>:

void doubleToStr(double nb, char* str)
{
 80044c8:	b538      	push	{r3, r4, r5, lr}
 80044ca:	4614      	mov	r4, r2
	nb = (int)(nb*1000);
 80044cc:	4b14      	ldr	r3, [pc, #80]	; (8004520 <doubleToStr+0x58>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	4d14      	ldr	r5, [pc, #80]	; (8004524 <doubleToStr+0x5c>)
 80044d2:	47a8      	blx	r5
 80044d4:	4b14      	ldr	r3, [pc, #80]	; (8004528 <doubleToStr+0x60>)
 80044d6:	4798      	blx	r3
	intToStr(nb,str);
 80044d8:	4621      	mov	r1, r4
 80044da:	4b14      	ldr	r3, [pc, #80]	; (800452c <doubleToStr+0x64>)
 80044dc:	4798      	blx	r3
 80044de:	f104 00fb 	add.w	r0, r4, #251	; 0xfb
 80044e2:	4622      	mov	r2, r4
 80044e4:	e001      	b.n	80044ea <doubleToStr+0x22>
    if(len>250)
 80044e6:	4282      	cmp	r2, r0
 80044e8:	d015      	beq.n	8004516 <doubleToStr+0x4e>
 80044ea:	1b13      	subs	r3, r2, r4
  while(*(string++)!=0){
 80044ec:	f812 1b01 	ldrb.w	r1, [r2], #1
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2900      	cmp	r1, #0
 80044f4:	d1f7      	bne.n	80044e6 <doubleToStr+0x1e>
 80044f6:	1c5d      	adds	r5, r3, #1
 80044f8:	1ed8      	subs	r0, r3, #3
 80044fa:	1f21      	subs	r1, r4, #4
 80044fc:	4419      	add	r1, r3
 80044fe:	4423      	add	r3, r4
	int i=strlen(str);
	int j;
	for(j=0;j<4;j++)
		str[i-j] = str[i-j-1];
 8004500:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8004504:	f803 2901 	strb.w	r2, [r3], #-1
	for(j=0;j<4;j++)
 8004508:	428b      	cmp	r3, r1
 800450a:	d1f9      	bne.n	8004500 <doubleToStr+0x38>
	str[i+1] = '\0';
 800450c:	2200      	movs	r2, #0
	str[i-3]='.';
 800450e:	232e      	movs	r3, #46	; 0x2e
	str[i+1] = '\0';
 8004510:	5562      	strb	r2, [r4, r5]
	str[i-3]='.';
 8004512:	5423      	strb	r3, [r4, r0]
}
 8004514:	bd38      	pop	{r3, r4, r5, pc}
    if(len>250)
 8004516:	23fb      	movs	r3, #251	; 0xfb
 8004518:	20f8      	movs	r0, #248	; 0xf8
 800451a:	25fc      	movs	r5, #252	; 0xfc
 800451c:	e7ed      	b.n	80044fa <doubleToStr+0x32>
 800451e:	bf00      	nop
 8004520:	408f4000 	.word	0x408f4000
 8004524:	08003485 	.word	0x08003485
 8004528:	080038a9 	.word	0x080038a9
 800452c:	0800445d 	.word	0x0800445d

08004530 <delai>:

void delai(int i)
{
	volatile int l;
	for(l=0;l<i;l++)
 8004530:	2300      	movs	r3, #0
{
 8004532:	b082      	sub	sp, #8
	for(l=0;l<i;l++)
 8004534:	9301      	str	r3, [sp, #4]
 8004536:	9b01      	ldr	r3, [sp, #4]
 8004538:	4298      	cmp	r0, r3
 800453a:	dd05      	ble.n	8004548 <delai+0x18>
 800453c:	9b01      	ldr	r3, [sp, #4]
 800453e:	3301      	adds	r3, #1
 8004540:	9301      	str	r3, [sp, #4]
 8004542:	9b01      	ldr	r3, [sp, #4]
 8004544:	4283      	cmp	r3, r0
 8004546:	dbf9      	blt.n	800453c <delai+0xc>
	{}
}
 8004548:	b002      	add	sp, #8
 800454a:	4770      	bx	lr

0800454c <atoi>:

int atoi(char* s)
{
 800454c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 int a=0;
 unsigned char c;
 while ((c = *s++) != '\0' && isdigit(c)) 
 800454e:	7804      	ldrb	r4, [r0, #0]
 int a=0;
 8004550:	4625      	mov	r5, r4
 while ((c = *s++) != '\0' && isdigit(c)) 
 8004552:	b194      	cbz	r4, 800457a <atoi+0x2e>
 8004554:	1c46      	adds	r6, r0, #1
 int a=0;
 8004556:	2500      	movs	r5, #0
 8004558:	4f09      	ldr	r7, [pc, #36]	; (8004580 <atoi+0x34>)
 800455a:	e004      	b.n	8004566 <atoi+0x1a>
 while ((c = *s++) != '\0' && isdigit(c)) 
 800455c:	f816 4b01 	ldrb.w	r4, [r6], #1
 {
   a = a*10 + (c - '0');
 8004560:	eb02 0543 	add.w	r5, r2, r3, lsl #1
 while ((c = *s++) != '\0' && isdigit(c)) 
 8004564:	b14c      	cbz	r4, 800457a <atoi+0x2e>
 8004566:	47b8      	blx	r7
 8004568:	4420      	add	r0, r4
 800456a:	7843      	ldrb	r3, [r0, #1]
   a = a*10 + (c - '0');
 800456c:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 while ((c = *s++) != '\0' && isdigit(c)) 
 8004570:	f013 0f04 	tst.w	r3, #4
   a = a*10 + (c - '0');
 8004574:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 while ((c = *s++) != '\0' && isdigit(c)) 
 8004578:	d1f0      	bne.n	800455c <atoi+0x10>
  }
  return a;
}
 800457a:	4628      	mov	r0, r5
 800457c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800457e:	bf00      	nop
 8004580:	080055d9 	.word	0x080055d9
 8004584:	00000000 	.word	0x00000000

08004588 <atof>:

// convertit une chaine de caractères en double
double atof(char* s)
{
 8004588:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 double a=0.0;
 int e=0;
 unsigned char c;
 while ((c = *s++) != '\0' && isdigit(c)) 
 800458c:	7804      	ldrb	r4, [r0, #0]
 800458e:	2c00      	cmp	r4, #0
 8004590:	d05f      	beq.n	8004652 <atof+0xca>
 8004592:	1c45      	adds	r5, r0, #1
 double a=0.0;
 8004594:	2600      	movs	r6, #0
 8004596:	2700      	movs	r7, #0
 8004598:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 800466c <atof+0xe4>
 {
   a = a*10.0 + (c - '0');
 800459c:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8004670 <atof+0xe8>
 80045a0:	e014      	b.n	80045cc <atof+0x44>
 80045a2:	2200      	movs	r2, #0
 80045a4:	4630      	mov	r0, r6
 80045a6:	4639      	mov	r1, r7
 80045a8:	4b2d      	ldr	r3, [pc, #180]	; (8004660 <atof+0xd8>)
 80045aa:	47d8      	blx	fp
 80045ac:	4680      	mov	r8, r0
 80045ae:	4689      	mov	r9, r1
 80045b0:	f1a4 0030 	sub.w	r0, r4, #48	; 0x30
 80045b4:	4b2b      	ldr	r3, [pc, #172]	; (8004664 <atof+0xdc>)
 80045b6:	4798      	blx	r3
 80045b8:	4c2b      	ldr	r4, [pc, #172]	; (8004668 <atof+0xe0>)
 80045ba:	4642      	mov	r2, r8
 80045bc:	464b      	mov	r3, r9
 80045be:	47a0      	blx	r4
 while ((c = *s++) != '\0' && isdigit(c)) 
 80045c0:	f815 4b01 	ldrb.w	r4, [r5], #1
   a = a*10.0 + (c - '0');
 80045c4:	4606      	mov	r6, r0
 80045c6:	460f      	mov	r7, r1
 while ((c = *s++) != '\0' && isdigit(c)) 
 80045c8:	2c00      	cmp	r4, #0
 80045ca:	d03e      	beq.n	800464a <atof+0xc2>
 80045cc:	47d0      	blx	sl
 80045ce:	4420      	add	r0, r4
 80045d0:	7841      	ldrb	r1, [r0, #1]
 80045d2:	f011 0104 	ands.w	r1, r1, #4
 80045d6:	d1e4      	bne.n	80045a2 <atof+0x1a>
  }
  if (c == '.') 
 80045d8:	2c2e      	cmp	r4, #46	; 0x2e
 80045da:	d136      	bne.n	800464a <atof+0xc2>
  {
   while ((c = *s++) != '\0' && isdigit(c)) 
 80045dc:	f895 8000 	ldrb.w	r8, [r5]
 80045e0:	3501      	adds	r5, #1
 80045e2:	f1b8 0f00 	cmp.w	r8, #0
 80045e6:	d030      	beq.n	800464a <atof+0xc2>
 int e=0;
 80045e8:	460c      	mov	r4, r1
   {
     a = a*10.0 + (c - '0');
 80045ea:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8004670 <atof+0xe8>
 80045ee:	e017      	b.n	8004620 <atof+0x98>
 80045f0:	2200      	movs	r2, #0
 80045f2:	4630      	mov	r0, r6
 80045f4:	4639      	mov	r1, r7
 80045f6:	4b1a      	ldr	r3, [pc, #104]	; (8004660 <atof+0xd8>)
 80045f8:	47c8      	blx	r9
 80045fa:	4606      	mov	r6, r0
 80045fc:	460f      	mov	r7, r1
 80045fe:	f1a8 0030 	sub.w	r0, r8, #48	; 0x30
 8004602:	4b18      	ldr	r3, [pc, #96]	; (8004664 <atof+0xdc>)
 8004604:	4798      	blx	r3
 8004606:	4632      	mov	r2, r6
 8004608:	463b      	mov	r3, r7
 800460a:	4e17      	ldr	r6, [pc, #92]	; (8004668 <atof+0xe0>)
 800460c:	47b0      	blx	r6
   while ((c = *s++) != '\0' && isdigit(c)) 
 800460e:	f815 8b01 	ldrb.w	r8, [r5], #1
     a = a*10.0 + (c - '0');
 8004612:	4606      	mov	r6, r0
 8004614:	460f      	mov	r7, r1
      e = e-1;
 8004616:	3c01      	subs	r4, #1
     a = a*10.0 + (c - '0');
 8004618:	46cb      	mov	fp, r9
   while ((c = *s++) != '\0' && isdigit(c)) 
 800461a:	f1b8 0f00 	cmp.w	r8, #0
 800461e:	d007      	beq.n	8004630 <atof+0xa8>
 8004620:	47d0      	blx	sl
 8004622:	4440      	add	r0, r8
 8004624:	7841      	ldrb	r1, [r0, #1]
 8004626:	074b      	lsls	r3, r1, #29
 8004628:	d4e2      	bmi.n	80045f0 <atof+0x68>
    }
  }
  while(e<0)
 800462a:	b174      	cbz	r4, 800464a <atof+0xc2>
 800462c:	f8df b040 	ldr.w	fp, [pc, #64]	; 8004670 <atof+0xe8>
  {
   a*=0.1;
 8004630:	f20f 0924 	addw	r9, pc, #36	; 0x24
 8004634:	e9d9 8900 	ldrd	r8, r9, [r9]
 8004638:	4630      	mov	r0, r6
 800463a:	4639      	mov	r1, r7
 800463c:	4642      	mov	r2, r8
 800463e:	464b      	mov	r3, r9
 8004640:	47d8      	blx	fp
  while(e<0)
 8004642:	3401      	adds	r4, #1
   a*=0.1;
 8004644:	4606      	mov	r6, r0
 8004646:	460f      	mov	r7, r1
  while(e<0)
 8004648:	d1f6      	bne.n	8004638 <atof+0xb0>
   e++;
  }
  return a;
}
 800464a:	4630      	mov	r0, r6
 800464c:	4639      	mov	r1, r7
 800464e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 double a=0.0;
 8004652:	2600      	movs	r6, #0
 8004654:	2700      	movs	r7, #0
 8004656:	e7f8      	b.n	800464a <atof+0xc2>
 8004658:	9999999a 	.word	0x9999999a
 800465c:	3fb99999 	.word	0x3fb99999
 8004660:	40240000 	.word	0x40240000
 8004664:	080033b1 	.word	0x080033b1
 8004668:	08003119 	.word	0x08003119
 800466c:	080055d9 	.word	0x080055d9
 8004670:	08003485 	.word	0x08003485

08004674 <gpsSetEnabled>:
int nbSats;



void gpsSetEnabled(int enable){
  if(enable==TRUE){
 8004674:	2801      	cmp	r0, #1
 8004676:	d004      	beq.n	8004682 <gpsSetEnabled+0xe>
    GPIO_WriteBit(GPS_POWER_PORT,GPS_POWER_PIN,Bit_SET);
  }
  else{
    GPIO_WriteBit(GPS_POWER_PORT,GPS_POWER_PIN,Bit_RESET);  
 8004678:	2200      	movs	r2, #0
 800467a:	2104      	movs	r1, #4
 800467c:	4803      	ldr	r0, [pc, #12]	; (800468c <gpsSetEnabled+0x18>)
 800467e:	4b04      	ldr	r3, [pc, #16]	; (8004690 <gpsSetEnabled+0x1c>)
 8004680:	4718      	bx	r3
    GPIO_WriteBit(GPS_POWER_PORT,GPS_POWER_PIN,Bit_SET);
 8004682:	4602      	mov	r2, r0
 8004684:	2104      	movs	r1, #4
 8004686:	4801      	ldr	r0, [pc, #4]	; (800468c <gpsSetEnabled+0x18>)
 8004688:	4b01      	ldr	r3, [pc, #4]	; (8004690 <gpsSetEnabled+0x1c>)
 800468a:	4718      	bx	r3
 800468c:	40011400 	.word	0x40011400
 8004690:	08005301 	.word	0x08005301

08004694 <gpsInit>:
  }
}
 

void gpsInit(){
 8004694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004698:	b08c      	sub	sp, #48	; 0x30
  int i;
  const char initSeq1[]="$PSRF151,00*0E\r\n";
 800469a:	466f      	mov	r7, sp
  const char initSeq2[]="$PSRF103,03,00,05,01*22\r\n";
  heures=minutes=secondes=0;
 800469c:	f04f 0e00 	mov.w	lr, #0
 80046a0:	2650      	movs	r6, #80	; 0x50
  for(i=0;initSeq1[i]!=0;i++)
 80046a2:	f04f 0824 	mov.w	r8, #36	; 0x24
  const char initSeq1[]="$PSRF151,00*0E\r\n";
 80046a6:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 8004750 <gpsInit+0xbc>
  const char initSeq2[]="$PSRF103,03,00,05,01*22\r\n";
 80046aa:	4d22      	ldr	r5, [pc, #136]	; (8004734 <gpsInit+0xa0>)
 80046ac:	ac05      	add	r4, sp, #20
  const char initSeq1[]="$PSRF151,00*0E\r\n";
 80046ae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80046b2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
  const char initSeq2[]="$PSRF103,03,00,05,01*22\r\n";
 80046b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80046bc:	c403      	stmia	r4!, {r0, r1}
  const char initSeq1[]="$PSRF151,00*0E\r\n";
 80046be:	f8dc 3000 	ldr.w	r3, [ip]
  const char initSeq2[]="$PSRF103,03,00,05,01*22\r\n";
 80046c2:	8022      	strh	r2, [r4, #0]
  const char initSeq1[]="$PSRF151,00*0E\r\n";
 80046c4:	703b      	strb	r3, [r7, #0]
  heures=minutes=secondes=0;
 80046c6:	491c      	ldr	r1, [pc, #112]	; (8004738 <gpsInit+0xa4>)
 80046c8:	4a1c      	ldr	r2, [pc, #112]	; (800473c <gpsInit+0xa8>)
 80046ca:	4b1d      	ldr	r3, [pc, #116]	; (8004740 <gpsInit+0xac>)
 80046cc:	4c1d      	ldr	r4, [pc, #116]	; (8004744 <gpsInit+0xb0>)
 80046ce:	4f1e      	ldr	r7, [pc, #120]	; (8004748 <gpsInit+0xb4>)
  {
    while(USART_GetFlagStatus(USART1, USART_FLAG_TXE)==RESET){};
 80046d0:	4d1e      	ldr	r5, [pc, #120]	; (800474c <gpsInit+0xb8>)
  heures=minutes=secondes=0;
 80046d2:	f8c1 e000 	str.w	lr, [r1]
 80046d6:	f8c2 e000 	str.w	lr, [r2]
 80046da:	f8c3 e000 	str.w	lr, [r3]
 80046de:	f10d 0901 	add.w	r9, sp, #1
    while(USART_GetFlagStatus(USART1, USART_FLAG_TXE)==RESET){};
 80046e2:	2180      	movs	r1, #128	; 0x80
 80046e4:	4628      	mov	r0, r5
 80046e6:	47a0      	blx	r4
 80046e8:	2800      	cmp	r0, #0
 80046ea:	d0fa      	beq.n	80046e2 <gpsInit+0x4e>
    USART_SendData(USART1, initSeq1[i]);
 80046ec:	fa1f f188 	uxth.w	r1, r8
 80046f0:	4628      	mov	r0, r5
 80046f2:	47b8      	blx	r7
  for(i=0;initSeq1[i]!=0;i++)
 80046f4:	b11e      	cbz	r6, 80046fe <gpsInit+0x6a>
 80046f6:	46b0      	mov	r8, r6
 80046f8:	f819 6f01 	ldrb.w	r6, [r9, #1]!
 80046fc:	e7f1      	b.n	80046e2 <gpsInit+0x4e>
 80046fe:	466e      	mov	r6, sp
 8004700:	f04f 0950 	mov.w	r9, #80	; 0x50
 8004704:	f04f 0824 	mov.w	r8, #36	; 0x24
  }
  
  for(i=0;initSeq2[i]!=0;i++)
  {
    while(USART_GetFlagStatus(USART1, USART_FLAG_TXE)==RESET){};
 8004708:	4d10      	ldr	r5, [pc, #64]	; (800474c <gpsInit+0xb8>)
 800470a:	f10d 0a15 	add.w	sl, sp, #21
 800470e:	2180      	movs	r1, #128	; 0x80
 8004710:	4628      	mov	r0, r5
 8004712:	47a0      	blx	r4
 8004714:	2800      	cmp	r0, #0
 8004716:	d0fa      	beq.n	800470e <gpsInit+0x7a>
    USART_SendData(USART1, initSeq1[i]);
 8004718:	4641      	mov	r1, r8
 800471a:	4628      	mov	r0, r5
 800471c:	47b8      	blx	r7
  for(i=0;initSeq2[i]!=0;i++)
 800471e:	f1b9 0f00 	cmp.w	r9, #0
 8004722:	d004      	beq.n	800472e <gpsInit+0x9a>
 8004724:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8004728:	f81a 9f01 	ldrb.w	r9, [sl, #1]!
 800472c:	e7ef      	b.n	800470e <gpsInit+0x7a>
  }
}
 800472e:	b00c      	add	sp, #48	; 0x30
 8004730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004734:	08006310 	.word	0x08006310
 8004738:	2000129c 	.word	0x2000129c
 800473c:	20001368 	.word	0x20001368
 8004740:	20001298 	.word	0x20001298
 8004744:	080050b9 	.word	0x080050b9
 8004748:	080050a9 	.word	0x080050a9
 800474c:	40013800 	.word	0x40013800
 8004750:	0800632c 	.word	0x0800632c

08004754 <gpsGetMessage>:
 * for a string (like an NMEA message that delimits fields with a comma) where
 * you want the third field, you would use something like so:
 *  gps_get_message(source,buffer,80,',',3);
 */ 
void gpsGetMessage(char *source, char *buffer, int bufferlen,char delimiter,int instance)
{
 8004754:	b4f0      	push	{r4, r5, r6, r7}
 int i = 0;
 int j = 0;
 int k = 0;
 while (source[i] != '\0' && k <= instance)
 8004756:	7802      	ldrb	r2, [r0, #0]
{
 8004758:	9d04      	ldr	r5, [sp, #16]
 while (source[i] != '\0' && k <= instance)
 800475a:	b1ca      	cbz	r2, 8004790 <gpsGetMessage+0x3c>
 800475c:	2d00      	cmp	r5, #0
 800475e:	db19      	blt.n	8004794 <gpsGetMessage+0x40>
 int k = 0;
 8004760:	2400      	movs	r4, #0
 8004762:	3001      	adds	r0, #1
 int j = 0;
 8004764:	4626      	mov	r6, r4
    buffer[j] = source[i];
    j++;
   }
   else
   {
    buffer[j] = '\0';
 8004766:	4627      	mov	r7, r4
 8004768:	e007      	b.n	800477a <gpsGetMessage+0x26>
    k++;
   }
  }
  else if(source[i] == delimiter)
 800476a:	4293      	cmp	r3, r2
  {
   k++;
 800476c:	bf08      	it	eq
 800476e:	3401      	addeq	r4, #1
 while (source[i] != '\0' && k <= instance)
 8004770:	7802      	ldrb	r2, [r0, #0]
 8004772:	b162      	cbz	r2, 800478e <gpsGetMessage+0x3a>
 8004774:	42ac      	cmp	r4, r5
 8004776:	dc0d      	bgt.n	8004794 <gpsGetMessage+0x40>
 8004778:	3001      	adds	r0, #1
  if (k == instance) {
 800477a:	42a5      	cmp	r5, r4
 800477c:	d1f5      	bne.n	800476a <gpsGetMessage+0x16>
   if (source[i] != delimiter) {
 800477e:	4293      	cmp	r3, r2
 8004780:	d00a      	beq.n	8004798 <gpsGetMessage+0x44>
    buffer[j] = source[i];
 8004782:	558a      	strb	r2, [r1, r6]
 while (source[i] != '\0' && k <= instance)
 8004784:	7802      	ldrb	r2, [r0, #0]
    j++;
 8004786:	3601      	adds	r6, #1
 while (source[i] != '\0' && k <= instance)
 8004788:	b10a      	cbz	r2, 800478e <gpsGetMessage+0x3a>
 800478a:	462c      	mov	r4, r5
 800478c:	e7f4      	b.n	8004778 <gpsGetMessage+0x24>
 800478e:	4431      	add	r1, r6
  }
  i++;
 }
 if(source[i] == '\0')
  buffer[j] = '\0';
 8004790:	2300      	movs	r3, #0
 8004792:	700b      	strb	r3, [r1, #0]
}
 8004794:	bcf0      	pop	{r4, r5, r6, r7}
 8004796:	4770      	bx	lr
    buffer[j] = '\0';
 8004798:	558f      	strb	r7, [r1, r6]
    k++;
 800479a:	1c6c      	adds	r4, r5, #1
 800479c:	e7e8      	b.n	8004770 <gpsGetMessage+0x1c>
 800479e:	bf00      	nop

080047a0 <gpsAnalyse>:


void gpsAnalyse(char* buffer)
{
  char result[20];
  if (buffer[0] == '$' && buffer[3] == 'G' && buffer[4] == 'S' && buffer[5] == 'V'){
 80047a0:	7802      	ldrb	r2, [r0, #0]
 80047a2:	2a24      	cmp	r2, #36	; 0x24
 80047a4:	d000      	beq.n	80047a8 <gpsAnalyse+0x8>
 80047a6:	4770      	bx	lr
{
 80047a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (buffer[0] == '$' && buffer[3] == 'G' && buffer[4] == 'S' && buffer[5] == 'V'){
 80047ac:	78c2      	ldrb	r2, [r0, #3]
{
 80047ae:	b088      	sub	sp, #32
  if (buffer[0] == '$' && buffer[3] == 'G' && buffer[4] == 'S' && buffer[5] == 'V'){
 80047b0:	2a47      	cmp	r2, #71	; 0x47
 80047b2:	4604      	mov	r4, r0
 80047b4:	d002      	beq.n	80047bc <gpsAnalyse+0x1c>
    
    //hdop
    gpsGetMessage(buffer,result,20,',',8);
    hdop = atof(result);
  }
}
 80047b6:	b008      	add	sp, #32
 80047b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (buffer[0] == '$' && buffer[3] == 'G' && buffer[4] == 'S' && buffer[5] == 'V'){
 80047bc:	7903      	ldrb	r3, [r0, #4]
 80047be:	2b53      	cmp	r3, #83	; 0x53
 80047c0:	f000 8093 	beq.w	80048ea <gpsAnalyse+0x14a>
  if (buffer[0] == '$' && buffer[3] == 'G' && buffer[4] == 'G' && buffer[5] == 'A'){
 80047c4:	2b47      	cmp	r3, #71	; 0x47
 80047c6:	d1f6      	bne.n	80047b6 <gpsAnalyse+0x16>
 80047c8:	7963      	ldrb	r3, [r4, #5]
 80047ca:	2b41      	cmp	r3, #65	; 0x41
 80047cc:	d1f3      	bne.n	80047b6 <gpsAnalyse+0x16>
    gpsGetMessage(buffer,result,20,',',1);
 80047ce:	2301      	movs	r3, #1
 80047d0:	a903      	add	r1, sp, #12
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	2214      	movs	r2, #20
 80047d6:	232c      	movs	r3, #44	; 0x2c
 80047d8:	4620      	mov	r0, r4
 80047da:	4d73      	ldr	r5, [pc, #460]	; (80049a8 <gpsAnalyse+0x208>)
 80047dc:	47a8      	blx	r5
    if(strlen(result)>5){
 80047de:	4e73      	ldr	r6, [pc, #460]	; (80049ac <gpsAnalyse+0x20c>)
 80047e0:	a803      	add	r0, sp, #12
 80047e2:	47b0      	blx	r6
 80047e4:	2805      	cmp	r0, #5
 80047e6:	dd23      	ble.n	8004830 <gpsAnalyse+0x90>
      heures = 10*(result[0]-'0') + (result[1]-'0');
 80047e8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80047ec:	f89d 100d 	ldrb.w	r1, [sp, #13]
 80047f0:	3a30      	subs	r2, #48	; 0x30
 80047f2:	3930      	subs	r1, #48	; 0x30
 80047f4:	4f6e      	ldr	r7, [pc, #440]	; (80049b0 <gpsAnalyse+0x210>)
 80047f6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80047fa:	eb01 0242 	add.w	r2, r1, r2, lsl #1
      secondes = 10*(result[4]-'0') + (result[5]-'0');
 80047fe:	f89d 0010 	ldrb.w	r0, [sp, #16]
      heures = 10*(result[0]-'0') + (result[1]-'0');
 8004802:	603a      	str	r2, [r7, #0]
      minutes = 10*(result[2]-'0') + (result[3]-'0');
 8004804:	f89d 300e 	ldrb.w	r3, [sp, #14]
      secondes = 10*(result[4]-'0') + (result[5]-'0');
 8004808:	f89d 2011 	ldrb.w	r2, [sp, #17]
 800480c:	3830      	subs	r0, #48	; 0x30
      minutes = 10*(result[2]-'0') + (result[3]-'0');
 800480e:	f89d 100f 	ldrb.w	r1, [sp, #15]
      secondes = 10*(result[4]-'0') + (result[5]-'0');
 8004812:	3a30      	subs	r2, #48	; 0x30
      minutes = 10*(result[2]-'0') + (result[3]-'0');
 8004814:	3b30      	subs	r3, #48	; 0x30
      secondes = 10*(result[4]-'0') + (result[5]-'0');
 8004816:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800481a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
      minutes = 10*(result[2]-'0') + (result[3]-'0');
 800481e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004822:	3930      	subs	r1, #48	; 0x30
 8004824:	4f63      	ldr	r7, [pc, #396]	; (80049b4 <gpsAnalyse+0x214>)
      secondes = 10*(result[4]-'0') + (result[5]-'0');
 8004826:	4a64      	ldr	r2, [pc, #400]	; (80049b8 <gpsAnalyse+0x218>)
      minutes = 10*(result[2]-'0') + (result[3]-'0');
 8004828:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800482c:	6039      	str	r1, [r7, #0]
      secondes = 10*(result[4]-'0') + (result[5]-'0');
 800482e:	6010      	str	r0, [r2, #0]
    gpsGetMessage(buffer,result,20,',',2);
 8004830:	2202      	movs	r2, #2
 8004832:	232c      	movs	r3, #44	; 0x2c
 8004834:	9200      	str	r2, [sp, #0]
 8004836:	a903      	add	r1, sp, #12
 8004838:	2214      	movs	r2, #20
 800483a:	4620      	mov	r0, r4
 800483c:	47a8      	blx	r5
    if(strlen(result)>3){
 800483e:	a803      	add	r0, sp, #12
 8004840:	47b0      	blx	r6
 8004842:	2803      	cmp	r0, #3
 8004844:	f300 808e 	bgt.w	8004964 <gpsAnalyse+0x1c4>
      latitude = -1;
 8004848:	2200      	movs	r2, #0
 800484a:	4b5c      	ldr	r3, [pc, #368]	; (80049bc <gpsAnalyse+0x21c>)
 800484c:	f8df 8198 	ldr.w	r8, [pc, #408]	; 80049e8 <gpsAnalyse+0x248>
 8004850:	4f5b      	ldr	r7, [pc, #364]	; (80049c0 <gpsAnalyse+0x220>)
 8004852:	e9c8 2300 	strd	r2, r3, [r8]
    gpsGetMessage(buffer,result,20,',',3);
 8004856:	2203      	movs	r2, #3
 8004858:	232c      	movs	r3, #44	; 0x2c
 800485a:	9200      	str	r2, [sp, #0]
 800485c:	a903      	add	r1, sp, #12
 800485e:	2214      	movs	r2, #20
 8004860:	4620      	mov	r0, r4
 8004862:	47a8      	blx	r5
    if(result[0] == 'S')
 8004864:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004868:	2b53      	cmp	r3, #83	; 0x53
 800486a:	d105      	bne.n	8004878 <gpsAnalyse+0xd8>
      latitude = -latitude;
 800486c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004870:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004874:	f8c8 3004 	str.w	r3, [r8, #4]
    gpsGetMessage(buffer,result,20,',',4);
 8004878:	2204      	movs	r2, #4
 800487a:	232c      	movs	r3, #44	; 0x2c
 800487c:	9200      	str	r2, [sp, #0]
 800487e:	a903      	add	r1, sp, #12
 8004880:	2214      	movs	r2, #20
 8004882:	4620      	mov	r0, r4
 8004884:	47a8      	blx	r5
    if(strlen(result)>3){
 8004886:	a803      	add	r0, sp, #12
 8004888:	47b0      	blx	r6
 800488a:	2803      	cmp	r0, #3
 800488c:	dc47      	bgt.n	800491e <gpsAnalyse+0x17e>
      longitude = -1;
 800488e:	2200      	movs	r2, #0
 8004890:	4b4a      	ldr	r3, [pc, #296]	; (80049bc <gpsAnalyse+0x21c>)
 8004892:	4e4c      	ldr	r6, [pc, #304]	; (80049c4 <gpsAnalyse+0x224>)
 8004894:	e9c6 2300 	strd	r2, r3, [r6]
    gpsGetMessage(buffer,result,20,',',5);
 8004898:	2205      	movs	r2, #5
 800489a:	232c      	movs	r3, #44	; 0x2c
 800489c:	9200      	str	r2, [sp, #0]
 800489e:	a903      	add	r1, sp, #12
 80048a0:	2214      	movs	r2, #20
 80048a2:	4620      	mov	r0, r4
 80048a4:	47a8      	blx	r5
    if(result[0] == 'W')
 80048a6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80048aa:	2b57      	cmp	r3, #87	; 0x57
 80048ac:	d103      	bne.n	80048b6 <gpsAnalyse+0x116>
      longitude = -longitude;
 80048ae:	6873      	ldr	r3, [r6, #4]
 80048b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80048b4:	6073      	str	r3, [r6, #4]
    gpsGetMessage(buffer,result,20,',',6);
 80048b6:	2206      	movs	r2, #6
 80048b8:	4620      	mov	r0, r4
 80048ba:	232c      	movs	r3, #44	; 0x2c
 80048bc:	9200      	str	r2, [sp, #0]
 80048be:	a903      	add	r1, sp, #12
 80048c0:	2214      	movs	r2, #20
 80048c2:	47a8      	blx	r5
    gpsGetMessage(buffer,result,20,',',8);
 80048c4:	2208      	movs	r2, #8
    fix = result[0]-'0';
 80048c6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80048ca:	4e3f      	ldr	r6, [pc, #252]	; (80049c8 <gpsAnalyse+0x228>)
    gpsGetMessage(buffer,result,20,',',8);
 80048cc:	4620      	mov	r0, r4
    fix = result[0]-'0';
 80048ce:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
    gpsGetMessage(buffer,result,20,',',8);
 80048d2:	9200      	str	r2, [sp, #0]
 80048d4:	232c      	movs	r3, #44	; 0x2c
 80048d6:	2214      	movs	r2, #20
 80048d8:	a903      	add	r1, sp, #12
    fix = result[0]-'0';
 80048da:	6034      	str	r4, [r6, #0]
    gpsGetMessage(buffer,result,20,',',8);
 80048dc:	47a8      	blx	r5
    hdop = atof(result);
 80048de:	a803      	add	r0, sp, #12
 80048e0:	47b8      	blx	r7
 80048e2:	4b3a      	ldr	r3, [pc, #232]	; (80049cc <gpsAnalyse+0x22c>)
 80048e4:	e9c3 0100 	strd	r0, r1, [r3]
}
 80048e8:	e765      	b.n	80047b6 <gpsAnalyse+0x16>
  if (buffer[0] == '$' && buffer[3] == 'G' && buffer[4] == 'S' && buffer[5] == 'V'){
 80048ea:	7943      	ldrb	r3, [r0, #5]
 80048ec:	2b56      	cmp	r3, #86	; 0x56
 80048ee:	f47f af62 	bne.w	80047b6 <gpsAnalyse+0x16>
    gpsGetMessage(buffer,result,12,',',3);
 80048f2:	2303      	movs	r3, #3
 80048f4:	a903      	add	r1, sp, #12
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	220c      	movs	r2, #12
 80048fa:	232c      	movs	r3, #44	; 0x2c
 80048fc:	4d2a      	ldr	r5, [pc, #168]	; (80049a8 <gpsAnalyse+0x208>)
 80048fe:	47a8      	blx	r5
    nbSats = atoi(result);
 8004900:	4b33      	ldr	r3, [pc, #204]	; (80049d0 <gpsAnalyse+0x230>)
 8004902:	a803      	add	r0, sp, #12
 8004904:	4798      	blx	r3
 8004906:	4b33      	ldr	r3, [pc, #204]	; (80049d4 <gpsAnalyse+0x234>)
 8004908:	6018      	str	r0, [r3, #0]
  if (buffer[0] == '$' && buffer[3] == 'G' && buffer[4] == 'G' && buffer[5] == 'A'){
 800490a:	7823      	ldrb	r3, [r4, #0]
 800490c:	2b24      	cmp	r3, #36	; 0x24
 800490e:	f47f af52 	bne.w	80047b6 <gpsAnalyse+0x16>
 8004912:	78e3      	ldrb	r3, [r4, #3]
 8004914:	2b47      	cmp	r3, #71	; 0x47
 8004916:	f47f af4e 	bne.w	80047b6 <gpsAnalyse+0x16>
 800491a:	7923      	ldrb	r3, [r4, #4]
 800491c:	e752      	b.n	80047c4 <gpsAnalyse+0x24>
      degs = 100*(result[0]-'0') + 10*(result[1]-'0') + (result[2]-'0');
 800491e:	2164      	movs	r1, #100	; 0x64
 8004920:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8004924:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8004928:	3b30      	subs	r3, #48	; 0x30
 800492a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800492e:	3a30      	subs	r2, #48	; 0x30
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	fb01 3302 	mla	r3, r1, r2, r3
 8004936:	f89d 000e 	ldrb.w	r0, [sp, #14]
 800493a:	4a27      	ldr	r2, [pc, #156]	; (80049d8 <gpsAnalyse+0x238>)
 800493c:	3830      	subs	r0, #48	; 0x30
 800493e:	4418      	add	r0, r3
 8004940:	4790      	blx	r2
 8004942:	4680      	mov	r8, r0
 8004944:	4689      	mov	r9, r1
      mins = atof(result+3);
 8004946:	f10d 000f 	add.w	r0, sp, #15
 800494a:	47b8      	blx	r7
      longitude = degs+mins/60;
 800494c:	4e23      	ldr	r6, [pc, #140]	; (80049dc <gpsAnalyse+0x23c>)
 800494e:	2200      	movs	r2, #0
 8004950:	4b23      	ldr	r3, [pc, #140]	; (80049e0 <gpsAnalyse+0x240>)
 8004952:	47b0      	blx	r6
 8004954:	4e23      	ldr	r6, [pc, #140]	; (80049e4 <gpsAnalyse+0x244>)
 8004956:	4642      	mov	r2, r8
 8004958:	464b      	mov	r3, r9
 800495a:	47b0      	blx	r6
 800495c:	4e19      	ldr	r6, [pc, #100]	; (80049c4 <gpsAnalyse+0x224>)
 800495e:	e9c6 0100 	strd	r0, r1, [r6]
 8004962:	e799      	b.n	8004898 <gpsAnalyse+0xf8>
      degs = 10*(result[0]-'0') + (result[1]-'0');
 8004964:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8004968:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800496c:	3830      	subs	r0, #48	; 0x30
 800496e:	3b30      	subs	r3, #48	; 0x30
 8004970:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004974:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8004978:	4b17      	ldr	r3, [pc, #92]	; (80049d8 <gpsAnalyse+0x238>)
 800497a:	4798      	blx	r3
 800497c:	4680      	mov	r8, r0
 800497e:	4689      	mov	r9, r1
      mins = atof(result+2);
 8004980:	4f0f      	ldr	r7, [pc, #60]	; (80049c0 <gpsAnalyse+0x220>)
 8004982:	f10d 000e 	add.w	r0, sp, #14
 8004986:	47b8      	blx	r7
      latitude = degs+mins/60;
 8004988:	f8df a050 	ldr.w	sl, [pc, #80]	; 80049dc <gpsAnalyse+0x23c>
 800498c:	2200      	movs	r2, #0
 800498e:	4b14      	ldr	r3, [pc, #80]	; (80049e0 <gpsAnalyse+0x240>)
 8004990:	47d0      	blx	sl
 8004992:	4642      	mov	r2, r8
 8004994:	464b      	mov	r3, r9
 8004996:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80049e4 <gpsAnalyse+0x244>
 800499a:	47c0      	blx	r8
 800499c:	f8df 8048 	ldr.w	r8, [pc, #72]	; 80049e8 <gpsAnalyse+0x248>
 80049a0:	e9c8 0100 	strd	r0, r1, [r8]
 80049a4:	e757      	b.n	8004856 <gpsAnalyse+0xb6>
 80049a6:	bf00      	nop
 80049a8:	08004755 	.word	0x08004755
 80049ac:	08004409 	.word	0x08004409
 80049b0:	20001298 	.word	0x20001298
 80049b4:	20001368 	.word	0x20001368
 80049b8:	2000129c 	.word	0x2000129c
 80049bc:	bff00000 	.word	0xbff00000
 80049c0:	08004589 	.word	0x08004589
 80049c4:	200012f8 	.word	0x200012f8
 80049c8:	20001300 	.word	0x20001300
 80049cc:	20001370 	.word	0x20001370
 80049d0:	0800454d 	.word	0x0800454d
 80049d4:	20001358 	.word	0x20001358
 80049d8:	080033b1 	.word	0x080033b1
 80049dc:	080036d9 	.word	0x080036d9
 80049e0:	404e0000 	.word	0x404e0000
 80049e4:	08003119 	.word	0x08003119
 80049e8:	20001360 	.word	0x20001360

080049ec <gpsDataReceived>:
  if(data == '$'){  // previous NMEA frame finished
 80049ec:	2824      	cmp	r0, #36	; 0x24
void gpsDataReceived(char data){
 80049ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049f0:	4606      	mov	r6, r0
    for(j=0;j<recvIndex;j++)
 80049f2:	4c16      	ldr	r4, [pc, #88]	; (8004a4c <gpsDataReceived+0x60>)
  if(data == '$'){  // previous NMEA frame finished
 80049f4:	d005      	beq.n	8004a02 <gpsDataReceived+0x16>
  recvTemp[recvIndex++] = data;
 80049f6:	6823      	ldr	r3, [r4, #0]
 80049f8:	4f15      	ldr	r7, [pc, #84]	; (8004a50 <gpsDataReceived+0x64>)
 80049fa:	1c5a      	adds	r2, r3, #1
 80049fc:	54fe      	strb	r6, [r7, r3]
 80049fe:	6022      	str	r2, [r4, #0]
}
 8004a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for(j=0;j<recvIndex;j++)
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	dd1c      	ble.n	8004a42 <gpsDataReceived+0x56>
 8004a08:	4f11      	ldr	r7, [pc, #68]	; (8004a50 <gpsDataReceived+0x64>)
 8004a0a:	f8df c048 	ldr.w	ip, [pc, #72]	; 8004a54 <gpsDataReceived+0x68>
 8004a0e:	4639      	mov	r1, r7
 8004a10:	4662      	mov	r2, ip
 8004a12:	2300      	movs	r3, #0
 8004a14:	6820      	ldr	r0, [r4, #0]
      recvBuff[j] = recvTemp[j];
 8004a16:	f811 5b01 	ldrb.w	r5, [r1], #1
    for(j=0;j<recvIndex;j++)
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	4298      	cmp	r0, r3
      recvBuff[j] = recvTemp[j];
 8004a1e:	f802 5b01 	strb.w	r5, [r2], #1
    for(j=0;j<recvIndex;j++)
 8004a22:	dcf7      	bgt.n	8004a14 <gpsDataReceived+0x28>
    recvBuff[j] = '\0';
 8004a24:	2200      	movs	r2, #0
    gpsAnalyse(recvBuff);
 8004a26:	480b      	ldr	r0, [pc, #44]	; (8004a54 <gpsDataReceived+0x68>)
    recvBuff[j] = '\0';
 8004a28:	f80c 2003 	strb.w	r2, [ip, r3]
    gpsAnalyse(recvBuff);
 8004a2c:	4b0a      	ldr	r3, [pc, #40]	; (8004a58 <gpsDataReceived+0x6c>)
    recvIndex = 0;
 8004a2e:	6022      	str	r2, [r4, #0]
    gpsAnalyse(recvBuff);
 8004a30:	4798      	blx	r3
    newGPSData=TRUE;
 8004a32:	2201      	movs	r2, #1
 8004a34:	4b09      	ldr	r3, [pc, #36]	; (8004a5c <gpsDataReceived+0x70>)
 8004a36:	601a      	str	r2, [r3, #0]
  recvTemp[recvIndex++] = data;
 8004a38:	6823      	ldr	r3, [r4, #0]
 8004a3a:	1c5a      	adds	r2, r3, #1
 8004a3c:	54fe      	strb	r6, [r7, r3]
 8004a3e:	6022      	str	r2, [r4, #0]
}
 8004a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for(j=0;j<recvIndex;j++)
 8004a42:	2300      	movs	r3, #0
 8004a44:	4f02      	ldr	r7, [pc, #8]	; (8004a50 <gpsDataReceived+0x64>)
 8004a46:	f8df c00c 	ldr.w	ip, [pc, #12]	; 8004a54 <gpsDataReceived+0x68>
 8004a4a:	e7eb      	b.n	8004a24 <gpsDataReceived+0x38>
 8004a4c:	200005b4 	.word	0x200005b4
 8004a50:	20001304 	.word	0x20001304
 8004a54:	200012a0 	.word	0x200012a0
 8004a58:	080047a1 	.word	0x080047a1
 8004a5c:	200005b0 	.word	0x200005b0

08004a60 <USART1_IRQHandler>:
#include "lcd.h"
#include "gps.h"

// Interruption de reception de données série
void USART1_IRQHandler(void)
{
 8004a60:	b510      	push	{r4, lr}
  if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
 8004a62:	f240 5125 	movw	r1, #1317	; 0x525
 8004a66:	4806      	ldr	r0, [pc, #24]	; (8004a80 <USART1_IRQHandler+0x20>)
 8004a68:	4b06      	ldr	r3, [pc, #24]	; (8004a84 <USART1_IRQHandler+0x24>)
 8004a6a:	4798      	blx	r3
 8004a6c:	b900      	cbnz	r0, 8004a70 <USART1_IRQHandler+0x10>
  {
    /* Read one byte from the receive data register */
    char data = USART_ReceiveData(USART1);
    gpsDataReceived(data);
  }
}
 8004a6e:	bd10      	pop	{r4, pc}
    char data = USART_ReceiveData(USART1);
 8004a70:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <USART1_IRQHandler+0x28>)
 8004a72:	4803      	ldr	r0, [pc, #12]	; (8004a80 <USART1_IRQHandler+0x20>)
 8004a74:	4798      	blx	r3
}
 8004a76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    gpsDataReceived(data);
 8004a7a:	4b04      	ldr	r3, [pc, #16]	; (8004a8c <USART1_IRQHandler+0x2c>)
 8004a7c:	b2c0      	uxtb	r0, r0
 8004a7e:	4718      	bx	r3
 8004a80:	40013800 	.word	0x40013800
 8004a84:	080050c5 	.word	0x080050c5
 8004a88:	080050b1 	.word	0x080050b1
 8004a8c:	080049ed 	.word	0x080049ed

08004a90 <HardFault_Handler>:

void HardFault_Handler(void){
  LCDPrintStringXY(0,0,"HardFault");
 8004a90:	2100      	movs	r1, #0
 8004a92:	4a02      	ldr	r2, [pc, #8]	; (8004a9c <HardFault_Handler+0xc>)
 8004a94:	4608      	mov	r0, r1
 8004a96:	4b02      	ldr	r3, [pc, #8]	; (8004aa0 <HardFault_Handler+0x10>)
 8004a98:	4718      	bx	r3
 8004a9a:	bf00      	nop
 8004a9c:	0800634c 	.word	0x0800634c
 8004aa0:	08004219 	.word	0x08004219

08004aa4 <MemManage_Handler>:
}

void MemManage_Handler(void){
  LCDPrintStringXY(0,0,"MemManager");
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	4a02      	ldr	r2, [pc, #8]	; (8004ab0 <MemManage_Handler+0xc>)
 8004aa8:	4608      	mov	r0, r1
 8004aaa:	4b02      	ldr	r3, [pc, #8]	; (8004ab4 <MemManage_Handler+0x10>)
 8004aac:	4718      	bx	r3
 8004aae:	bf00      	nop
 8004ab0:	08006358 	.word	0x08006358
 8004ab4:	08004219 	.word	0x08004219

08004ab8 <BusFault_Handler>:
}

void BusFault_Handler(void){
  LCDPrintStringXY(0,0,"BusFault");
 8004ab8:	2100      	movs	r1, #0
 8004aba:	4a02      	ldr	r2, [pc, #8]	; (8004ac4 <BusFault_Handler+0xc>)
 8004abc:	4608      	mov	r0, r1
 8004abe:	4b02      	ldr	r3, [pc, #8]	; (8004ac8 <BusFault_Handler+0x10>)
 8004ac0:	4718      	bx	r3
 8004ac2:	bf00      	nop
 8004ac4:	08006340 	.word	0x08006340
 8004ac8:	08004219 	.word	0x08004219

08004acc <UsageFault_Handler>:
}

void UsageFault_Handler(void){
  LCDPrintStringXY(0,0,"Usage Fault");
 8004acc:	2100      	movs	r1, #0
 8004ace:	4a02      	ldr	r2, [pc, #8]	; (8004ad8 <UsageFault_Handler+0xc>)
 8004ad0:	4608      	mov	r0, r1
 8004ad2:	4b02      	ldr	r3, [pc, #8]	; (8004adc <UsageFault_Handler+0x10>)
 8004ad4:	4718      	bx	r3
 8004ad6:	bf00      	nop
 8004ad8:	08006364 	.word	0x08006364
 8004adc:	08004219 	.word	0x08004219

08004ae0 <u8g_font_get_word>:

static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE; 
static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
    uint16_t pos;
    font += offset;
 8004ae0:	1843      	adds	r3, r0, r1
    pos = u8g_pgm_read( (u8g_pgm_uint8_t *)font );
    font++;
    pos <<= 8;
    pos += u8g_pgm_read( (u8g_pgm_uint8_t *)font);
 8004ae2:	785b      	ldrb	r3, [r3, #1]
    pos = u8g_pgm_read( (u8g_pgm_uint8_t *)font );
 8004ae4:	5c40      	ldrb	r0, [r0, r1]
    pos += u8g_pgm_read( (u8g_pgm_uint8_t *)font);
 8004ae6:	eb03 2000 	add.w	r0, r3, r0, lsl #8
    return pos;
}
 8004aea:	b280      	uxth	r0, r0
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop

08004af0 <u8g_font_calc_vref_font>:
/* callback procedures to correct the y position */

u8g_uint_t u8g_font_calc_vref_font(u8g_t *u8g)
{
  return 0;
}
 8004af0:	2000      	movs	r0, #0
 8004af2:	4770      	bx	lr

08004af4 <u8g_font_GetFormat.isra.0>:
}
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop

08004af8 <u8g_font_GetFontGlyphStructureSize.isra.1>:
static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font)
 8004af8:	b508      	push	{r3, lr}
  switch(u8g_font_GetFormat(font))
 8004afa:	4b04      	ldr	r3, [pc, #16]	; (8004b0c <u8g_font_GetFontGlyphStructureSize.isra.1+0x14>)
 8004afc:	4798      	blx	r3
 8004afe:	b118      	cbz	r0, 8004b08 <u8g_font_GetFontGlyphStructureSize.isra.1+0x10>
 8004b00:	2802      	cmp	r0, #2
 8004b02:	d001      	beq.n	8004b08 <u8g_font_GetFontGlyphStructureSize.isra.1+0x10>
    case 1: return 3;
 8004b04:	2003      	movs	r0, #3
}
 8004b06:	bd08      	pop	{r3, pc}
    case 0: return 6;
 8004b08:	2006      	movs	r0, #6
}
 8004b0a:	bd08      	pop	{r3, pc}
 8004b0c:	08004af5 	.word	0x08004af5

08004b10 <u8g_font_GetEncoding65Pos>:
    return u8g_font_get_word(font, 6);
 8004b10:	2106      	movs	r1, #6
 8004b12:	4b01      	ldr	r3, [pc, #4]	; (8004b18 <u8g_font_GetEncoding65Pos+0x8>)
 8004b14:	4718      	bx	r3
 8004b16:	bf00      	nop
 8004b18:	08004ae1 	.word	0x08004ae1

08004b1c <u8g_font_GetEncoding97Pos>:
    return u8g_font_get_word(font, 8);
 8004b1c:	2108      	movs	r1, #8
 8004b1e:	4b01      	ldr	r3, [pc, #4]	; (8004b24 <u8g_font_GetEncoding97Pos+0x8>)
 8004b20:	4718      	bx	r3
 8004b22:	bf00      	nop
 8004b24:	08004ae1 	.word	0x08004ae1

08004b28 <u8g_font_GetFontStartEncoding>:
}
 8004b28:	7a80      	ldrb	r0, [r0, #10]
 8004b2a:	4770      	bx	lr

08004b2c <u8g_font_GetFontEndEncoding>:
}
 8004b2c:	7ac0      	ldrb	r0, [r0, #11]
 8004b2e:	4770      	bx	lr

08004b30 <u8g_GetGlyph>:
{
 8004b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t *p = (uint8_t *)(u8g->font);
 8004b34:	f8d0 a008 	ldr.w	sl, [r0, #8]
  uint8_t font_format = u8g_font_GetFormat(u8g->font);
 8004b38:	4a3c      	ldr	r2, [pc, #240]	; (8004c2c <u8g_GetGlyph+0xfc>)
 8004b3a:	f89a 3000 	ldrb.w	r3, [sl]
{
 8004b3e:	4680      	mov	r8, r0
  uint8_t font_format = u8g_font_GetFormat(u8g->font);
 8004b40:	4618      	mov	r0, r3
{
 8004b42:	460d      	mov	r5, r1
  uint8_t font_format = u8g_font_GetFormat(u8g->font);
 8004b44:	4790      	blx	r2
 8004b46:	4607      	mov	r7, r0
  uint8_t data_structure_size = u8g_font_GetFontGlyphStructureSize(u8g->font);
 8004b48:	4618      	mov	r0, r3
 8004b4a:	4b39      	ldr	r3, [pc, #228]	; (8004c30 <u8g_GetGlyph+0x100>)
 8004b4c:	4798      	blx	r3
    mask = 15;
 8004b4e:	2f01      	cmp	r7, #1
  start = u8g_font_GetFontStartEncoding(u8g->font);
 8004b50:	4b38      	ldr	r3, [pc, #224]	; (8004c34 <u8g_GetGlyph+0x104>)
  uint8_t data_structure_size = u8g_font_GetFontGlyphStructureSize(u8g->font);
 8004b52:	4681      	mov	r9, r0
  start = u8g_font_GetFontStartEncoding(u8g->font);
 8004b54:	4650      	mov	r0, sl
    mask = 15;
 8004b56:	bf14      	ite	ne
 8004b58:	26ff      	movne	r6, #255	; 0xff
 8004b5a:	260f      	moveq	r6, #15
  start = u8g_font_GetFontStartEncoding(u8g->font);
 8004b5c:	4798      	blx	r3
  end = u8g_font_GetFontEndEncoding(u8g->font);
 8004b5e:	4b36      	ldr	r3, [pc, #216]	; (8004c38 <u8g_GetGlyph+0x108>)
  start = u8g_font_GetFontStartEncoding(u8g->font);
 8004b60:	4602      	mov	r2, r0
  end = u8g_font_GetFontEndEncoding(u8g->font);
 8004b62:	4650      	mov	r0, sl
 8004b64:	4798      	blx	r3
  pos = u8g_font_GetEncoding97Pos(u8g->font);
 8004b66:	4b35      	ldr	r3, [pc, #212]	; (8004c3c <u8g_GetGlyph+0x10c>)
  end = u8g_font_GetFontEndEncoding(u8g->font);
 8004b68:	4604      	mov	r4, r0
  pos = u8g_font_GetEncoding97Pos(u8g->font);
 8004b6a:	4650      	mov	r0, sl
 8004b6c:	4798      	blx	r3
  if ( requested_encoding >= 97 && pos > 0 )
 8004b6e:	2d60      	cmp	r5, #96	; 0x60
 8004b70:	d903      	bls.n	8004b7a <u8g_GetGlyph+0x4a>
 8004b72:	b350      	cbz	r0, 8004bca <u8g_GetGlyph+0x9a>
    p+= pos;
 8004b74:	4450      	add	r0, sl
    start = 97;
 8004b76:	2261      	movs	r2, #97	; 0x61
 8004b78:	e006      	b.n	8004b88 <u8g_GetGlyph+0x58>
    pos = u8g_font_GetEncoding65Pos(u8g->font);
 8004b7a:	4650      	mov	r0, sl
 8004b7c:	4b30      	ldr	r3, [pc, #192]	; (8004c40 <u8g_GetGlyph+0x110>)
 8004b7e:	4798      	blx	r3
    if ( requested_encoding >= 65 && pos > 0 )
 8004b80:	2d40      	cmp	r5, #64	; 0x40
 8004b82:	d825      	bhi.n	8004bd0 <u8g_GetGlyph+0xa0>
      p += U8G_FONT_DATA_STRUCT_SIZE;       /* skip font general information */  
 8004b84:	f10a 0011 	add.w	r0, sl, #17
  if ( requested_encoding > end )
 8004b88:	42ac      	cmp	r4, r5
 8004b8a:	d317      	bcc.n	8004bbc <u8g_GetGlyph+0x8c>
  if ( i <= end )
 8004b8c:	42a2      	cmp	r2, r4
 8004b8e:	d90c      	bls.n	8004baa <u8g_GetGlyph+0x7a>
 8004b90:	e014      	b.n	8004bbc <u8g_GetGlyph+0x8c>
        if ( i == requested_encoding )
 8004b92:	42aa      	cmp	r2, r5
 8004b94:	d021      	beq.n	8004bda <u8g_GetGlyph+0xaa>
        p += u8g_pgm_read( ((u8g_pgm_uint8_t *)(p)) + 2 ) & mask;
 8004b96:	7883      	ldrb	r3, [r0, #2]
      if ( i == end )
 8004b98:	42a2      	cmp	r2, r4
        p += u8g_pgm_read( ((u8g_pgm_uint8_t *)(p)) + 2 ) & mask;
 8004b9a:	ea03 0306 	and.w	r3, r3, r6
 8004b9e:	444b      	add	r3, r9
        p += data_structure_size;
 8004ba0:	4418      	add	r0, r3
      i++;
 8004ba2:	f102 0201 	add.w	r2, r2, #1
      if ( i == end )
 8004ba6:	d009      	beq.n	8004bbc <u8g_GetGlyph+0x8c>
      i++;
 8004ba8:	b2d2      	uxtb	r2, r2
      if ( u8g_pgm_read((u8g_pgm_uint8_t *)(p)) == 255 )
 8004baa:	7803      	ldrb	r3, [r0, #0]
 8004bac:	2bff      	cmp	r3, #255	; 0xff
 8004bae:	d1f0      	bne.n	8004b92 <u8g_GetGlyph+0x62>
      if ( i == end )
 8004bb0:	42a2      	cmp	r2, r4
        p += 1;
 8004bb2:	f100 0001 	add.w	r0, r0, #1
      i++;
 8004bb6:	f102 0201 	add.w	r2, r2, #1
      if ( i == end )
 8004bba:	d1f5      	bne.n	8004ba8 <u8g_GetGlyph+0x78>
  u8g->glyph_dx = 0;
 8004bbc:	2000      	movs	r0, #0
 8004bbe:	f8c8 001c 	str.w	r0, [r8, #28]
  u8g->glyph_width = 0;
 8004bc2:	f888 0020 	strb.w	r0, [r8, #32]
}
 8004bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pos = u8g_font_GetEncoding65Pos(u8g->font);
 8004bca:	4650      	mov	r0, sl
 8004bcc:	4b1c      	ldr	r3, [pc, #112]	; (8004c40 <u8g_GetGlyph+0x110>)
 8004bce:	4798      	blx	r3
    if ( requested_encoding >= 65 && pos > 0 )
 8004bd0:	2800      	cmp	r0, #0
 8004bd2:	d0d7      	beq.n	8004b84 <u8g_GetGlyph+0x54>
      p+= pos;
 8004bd4:	4450      	add	r0, sl
      start = 65;
 8004bd6:	2241      	movs	r2, #65	; 0x41
 8004bd8:	e7d6      	b.n	8004b88 <u8g_GetGlyph+0x58>
  switch( u8g_font_GetFormat(u8g->font) )
 8004bda:	b1bf      	cbz	r7, 8004c0c <u8g_GetGlyph+0xdc>
 8004bdc:	2f02      	cmp	r7, #2
 8004bde:	d015      	beq.n	8004c0c <u8g_GetGlyph+0xdc>
      u8g->glyph_y =  tmp & 15;
 8004be0:	f003 020f 	and.w	r2, r3, #15
      u8g->glyph_y-=2;
 8004be4:	3a02      	subs	r2, #2
      tmp >>= 4;
 8004be6:	091b      	lsrs	r3, r3, #4
      u8g->glyph_y-=2;
 8004be8:	f888 201e 	strb.w	r2, [r8, #30]
      u8g->glyph_x =  tmp;
 8004bec:	f888 301d 	strb.w	r3, [r8, #29]
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
 8004bf0:	7843      	ldrb	r3, [r0, #1]
      u8g->glyph_height =  tmp & 15;
 8004bf2:	f003 020f 	and.w	r2, r3, #15
      tmp >>= 4;
 8004bf6:	091b      	lsrs	r3, r3, #4
      u8g->glyph_height =  tmp & 15;
 8004bf8:	f888 2020 	strb.w	r2, [r8, #32]
      u8g->glyph_width =  tmp;
 8004bfc:	f888 301f 	strb.w	r3, [r8, #31]
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 2 );
 8004c00:	7883      	ldrb	r3, [r0, #2]
      tmp >>= 4;
 8004c02:	091b      	lsrs	r3, r3, #4
      u8g->glyph_dx = tmp;
 8004c04:	f888 301c 	strb.w	r3, [r8, #28]
}
 8004c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      u8g->glyph_width =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
 8004c0c:	f888 301f 	strb.w	r3, [r8, #31]
      u8g->glyph_height =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
 8004c10:	7843      	ldrb	r3, [r0, #1]
 8004c12:	f888 3020 	strb.w	r3, [r8, #32]
      u8g->glyph_dx =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 3 );
 8004c16:	78c3      	ldrb	r3, [r0, #3]
 8004c18:	f888 301c 	strb.w	r3, [r8, #28]
      u8g->glyph_x =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 4 );
 8004c1c:	7903      	ldrb	r3, [r0, #4]
 8004c1e:	f888 301d 	strb.w	r3, [r8, #29]
      u8g->glyph_y =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 5 );
 8004c22:	7943      	ldrb	r3, [r0, #5]
 8004c24:	f888 301e 	strb.w	r3, [r8, #30]
}
 8004c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c2c:	08004af5 	.word	0x08004af5
 8004c30:	08004af9 	.word	0x08004af9
 8004c34:	08004b29 	.word	0x08004b29
 8004c38:	08004b2d 	.word	0x08004b2d
 8004c3c:	08004b1d 	.word	0x08004b1d
 8004c40:	08004b11 	.word	0x08004b11

08004c44 <u8g_draw_glyph>:
{
 8004c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c48:	468b      	mov	fp, r1
 8004c4a:	b087      	sub	sp, #28
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 8004c4c:	4d2c      	ldr	r5, [pc, #176]	; (8004d00 <u8g_draw_glyph+0xbc>)
 8004c4e:	4619      	mov	r1, r3
{
 8004c50:	4614      	mov	r4, r2
 8004c52:	4607      	mov	r7, r0
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 8004c54:	47a8      	blx	r5
    if ( g == NULL  )
 8004c56:	4682      	mov	sl, r0
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	d04d      	beq.n	8004cf8 <u8g_draw_glyph+0xb4>
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	4b29      	ldr	r3, [pc, #164]	; (8004d04 <u8g_draw_glyph+0xc0>)
 8004c60:	7810      	ldrb	r0, [r2, #0]
 8004c62:	4798      	blx	r3
  h = u8g->glyph_height;
 8004c64:	f897 8020 	ldrb.w	r8, [r7, #32]
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
 8004c68:	7fba      	ldrb	r2, [r7, #30]
  x += u8g->glyph_x;
 8004c6a:	7f7b      	ldrb	r3, [r7, #29]
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
 8004c6c:	eba4 0508 	sub.w	r5, r4, r8
 8004c70:	1aad      	subs	r5, r5, r2
  x += u8g->glyph_x;
 8004c72:	449b      	add	fp, r3
  w = u8g->glyph_width;
 8004c74:	7ffc      	ldrb	r4, [r7, #31]
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
 8004c76:	b2ed      	uxtb	r5, r5
  x += u8g->glyph_x;
 8004c78:	fa5f fb8b 	uxtb.w	fp, fp
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 8004c7c:	4606      	mov	r6, r0
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
 8004c7e:	f8cd 8000 	str.w	r8, [sp]
 8004c82:	462a      	mov	r2, r5
 8004c84:	4659      	mov	r1, fp
 8004c86:	4623      	mov	r3, r4
 8004c88:	4638      	mov	r0, r7
 8004c8a:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8004d0c <u8g_draw_glyph+0xc8>
 8004c8e:	47c8      	blx	r9
 8004c90:	b368      	cbz	r0, 8004cee <u8g_draw_glyph+0xaa>
  w += 7;
 8004c92:	3407      	adds	r4, #7
  w /= 8;
 8004c94:	f3c4 02c4 	ubfx	r2, r4, #3, #5
 8004c98:	9203      	str	r2, [sp, #12]
  for( j = 0; j < h; j++ )
 8004c9a:	f1b8 0f00 	cmp.w	r8, #0
 8004c9e:	d026      	beq.n	8004cee <u8g_draw_glyph+0xaa>
 8004ca0:	44a8      	add	r8, r5
 8004ca2:	1e53      	subs	r3, r2, #1
 8004ca4:	eb0b 09c2 	add.w	r9, fp, r2, lsl #3
 8004ca8:	fa5f f288 	uxtb.w	r2, r8
 8004cac:	46b8      	mov	r8, r7
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	9204      	str	r2, [sp, #16]
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 8004cb4:	44b2      	add	sl, r6
 8004cb6:	9305      	str	r3, [sp, #20]
 8004cb8:	fa5f f989 	uxtb.w	r9, r9
    for( i = 0; i < w; i++ )
 8004cbc:	9b03      	ldr	r3, [sp, #12]
 8004cbe:	b183      	cbz	r3, 8004ce2 <u8g_draw_glyph+0x9e>
    ix = x;
 8004cc0:	465c      	mov	r4, fp
    for( i = 0; i < w; i++ )
 8004cc2:	4656      	mov	r6, sl
 8004cc4:	4f10      	ldr	r7, [pc, #64]	; (8004d08 <u8g_draw_glyph+0xc4>)
      u8g_Draw8Pixel(u8g, ix, iy, 0, u8g_pgm_read(data));
 8004cc6:	f816 2b01 	ldrb.w	r2, [r6], #1
 8004cca:	4621      	mov	r1, r4
      ix+=8;
 8004ccc:	3408      	adds	r4, #8
      u8g_Draw8Pixel(u8g, ix, iy, 0, u8g_pgm_read(data));
 8004cce:	9200      	str	r2, [sp, #0]
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	462a      	mov	r2, r5
 8004cd4:	4640      	mov	r0, r8
      ix+=8;
 8004cd6:	b2e4      	uxtb	r4, r4
      u8g_Draw8Pixel(u8g, ix, iy, 0, u8g_pgm_read(data));
 8004cd8:	47b8      	blx	r7
    for( i = 0; i < w; i++ )
 8004cda:	454c      	cmp	r4, r9
 8004cdc:	d1f3      	bne.n	8004cc6 <u8g_draw_glyph+0x82>
 8004cde:	9b05      	ldr	r3, [sp, #20]
 8004ce0:	449a      	add	sl, r3
    iy++;
 8004ce2:	3501      	adds	r5, #1
  for( j = 0; j < h; j++ )
 8004ce4:	9b04      	ldr	r3, [sp, #16]
    iy++;
 8004ce6:	b2ed      	uxtb	r5, r5
  for( j = 0; j < h; j++ )
 8004ce8:	42ab      	cmp	r3, r5
 8004cea:	d1e7      	bne.n	8004cbc <u8g_draw_glyph+0x78>
 8004cec:	4647      	mov	r7, r8
  return u8g->glyph_dx;
 8004cee:	f997 001c 	ldrsb.w	r0, [r7, #28]
}
 8004cf2:	b007      	add	sp, #28
 8004cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cf8:	b007      	add	sp, #28
 8004cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cfe:	bf00      	nop
 8004d00:	08004b31 	.word	0x08004b31
 8004d04:	08004af9 	.word	0x08004af9
 8004d08:	08004ddd 	.word	0x08004ddd
 8004d0c:	08004e05 	.word	0x08004e05

08004d10 <u8g_DrawStr>:
{
 8004d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d14:	461d      	mov	r5, r3
  y += u8g->font_calc_vref(u8g);
 8004d16:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8004d18:	4616      	mov	r6, r2
 8004d1a:	4607      	mov	r7, r0
 8004d1c:	460c      	mov	r4, r1
  y += u8g->font_calc_vref(u8g);
 8004d1e:	4798      	blx	r3
  while( *s != '\0' )
 8004d20:	782b      	ldrb	r3, [r5, #0]
  y += u8g->font_calc_vref(u8g);
 8004d22:	4406      	add	r6, r0
  while( *s != '\0' )
 8004d24:	b1ab      	cbz	r3, 8004d52 <u8g_DrawStr+0x42>
  u8g_uint_t t = 0;
 8004d26:	f04f 0900 	mov.w	r9, #0
 8004d2a:	f8df 8030 	ldr.w	r8, [pc, #48]	; 8004d5c <u8g_DrawStr+0x4c>
 8004d2e:	b2f6      	uxtb	r6, r6
    d = u8g_draw_glyph(u8g, x, y, *s);
 8004d30:	4621      	mov	r1, r4
 8004d32:	4632      	mov	r2, r6
 8004d34:	4638      	mov	r0, r7
 8004d36:	47c0      	blx	r8
  while( *s != '\0' )
 8004d38:	f815 3f01 	ldrb.w	r3, [r5, #1]!
    x += d;
 8004d3c:	b2c0      	uxtb	r0, r0
 8004d3e:	4404      	add	r4, r0
    t += d;
 8004d40:	4448      	add	r0, r9
    x += d;
 8004d42:	b2e4      	uxtb	r4, r4
    t += d;
 8004d44:	fa5f f980 	uxtb.w	r9, r0
  while( *s != '\0' )
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1f1      	bne.n	8004d30 <u8g_DrawStr+0x20>
}
 8004d4c:	4648      	mov	r0, r9
 8004d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  u8g_uint_t t = 0;
 8004d52:	4699      	mov	r9, r3
}
 8004d54:	4648      	mov	r0, r9
 8004d56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d5a:	bf00      	nop
 8004d5c:	08004c45 	.word	0x08004c45

08004d60 <u8g_UpdateRefHeight>:
  if ( u8g->font == NULL )
 8004d60:	6882      	ldr	r2, [r0, #8]
 8004d62:	b1c2      	cbz	r2, 8004d96 <u8g_UpdateRefHeight+0x36>
  if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_TEXT )
 8004d64:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8004d68:	b1b3      	cbz	r3, 8004d98 <u8g_UpdateRefHeight+0x38>
  else if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_XTEXT )
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d01d      	beq.n	8004daa <u8g_UpdateRefHeight+0x4a>
  return u8g_font_get_byte(font, 13);
 8004d6e:	f992 300d 	ldrsb.w	r3, [r2, #13]
    u8g->font_ref_ascent = u8g_font_GetFontAscent(u8g->font);
 8004d72:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
  return u8g_font_get_byte(font, 14);
 8004d76:	f992 100e 	ldrsb.w	r1, [r2, #14]
    u8g->font_ref_descent = u8g_font_GetFontDescent(u8g->font);
 8004d7a:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
  if ( u8g->font_line_spacing_factor != 64 )
 8004d7e:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
  ls = u8g->font_ref_ascent - u8g->font_ref_descent;
 8004d82:	1a5b      	subs	r3, r3, r1
  if ( u8g->font_line_spacing_factor != 64 )
 8004d84:	2a40      	cmp	r2, #64	; 0x40
  ls = u8g->font_ref_ascent - u8g->font_ref_descent;
 8004d86:	b29b      	uxth	r3, r3
  if ( u8g->font_line_spacing_factor != 64 )
 8004d88:	d003      	beq.n	8004d92 <u8g_UpdateRefHeight+0x32>
    ls &= 255;
 8004d8a:	b2db      	uxtb	r3, r3
    ls *= u8g->font_line_spacing_factor;
 8004d8c:	fb02 f303 	mul.w	r3, r2, r3
    ls >>= 6;
 8004d90:	099b      	lsrs	r3, r3, #6
  u8g->line_spacing = ls;
 8004d92:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
}
 8004d96:	4770      	bx	lr
    u8g->font_ref_ascent = u8g_font_GetCapitalAHeight(u8g->font);
 8004d98:	f992 3005 	ldrsb.w	r3, [r2, #5]
 8004d9c:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
  return u8g_font_get_byte(font, 12);
 8004da0:	f992 100c 	ldrsb.w	r1, [r2, #12]
    u8g->font_ref_descent = u8g_font_GetLowerGDescent(u8g->font);
 8004da4:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
 8004da8:	e7e9      	b.n	8004d7e <u8g_UpdateRefHeight+0x1e>
  return u8g_font_get_byte(font, 15);
 8004daa:	f992 300f 	ldrsb.w	r3, [r2, #15]
    u8g->font_ref_ascent = u8g_font_GetFontXAscent(u8g->font);
 8004dae:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
  return u8g_font_get_byte(font, 16);
 8004db2:	f992 1010 	ldrsb.w	r1, [r2, #16]
    u8g->font_ref_descent = u8g_font_GetFontXDescent(u8g->font);
 8004db6:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
 8004dba:	e7e0      	b.n	8004d7e <u8g_UpdateRefHeight+0x1e>

08004dbc <u8g_SetFont>:
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}

void u8g_SetFont(u8g_t *u8g, const u8g_fntpgm_uint8_t  *font)
{
  if ( u8g->font != font )
 8004dbc:	6882      	ldr	r2, [r0, #8]
 8004dbe:	428a      	cmp	r2, r1
 8004dc0:	d006      	beq.n	8004dd0 <u8g_SetFont+0x14>
  {
    u8g->font = font;
    u8g_UpdateRefHeight(u8g);
 8004dc2:	4b04      	ldr	r3, [pc, #16]	; (8004dd4 <u8g_SetFont+0x18>)
{
 8004dc4:	b510      	push	{r4, lr}
    u8g->font = font;
 8004dc6:	6081      	str	r1, [r0, #8]
    u8g_UpdateRefHeight(u8g);
 8004dc8:	4798      	blx	r3
  u8g->font_calc_vref = u8g_font_calc_vref_font;
 8004dca:	4b03      	ldr	r3, [pc, #12]	; (8004dd8 <u8g_SetFont+0x1c>)
 8004dcc:	6243      	str	r3, [r0, #36]	; 0x24
    u8g_SetFontPosBaseline(u8g);
  }
}
 8004dce:	bd10      	pop	{r4, pc}
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	08004d61 	.word	0x08004d61
 8004dd8:	08004af1 	.word	0x08004af1

08004ddc <u8g_Draw8Pixel>:
{
  u8g_DrawPixelLL(u8g, u8g->dev, x, y);
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 8004ddc:	b430      	push	{r4, r5}
 8004dde:	f89d 5008 	ldrb.w	r5, [sp, #8]
  arg->x = x;
 8004de2:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
 8004de6:	6841      	ldr	r1, [r0, #4]
  arg->y = y;
 8004de8:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
  arg->dir = dir;
 8004dec:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  arg->pixel = pixel;
 8004df0:	f880 502f 	strb.w	r5, [r0, #47]	; 0x2f
  return dev->dev_fn(u8g, dev, msg, arg); 
 8004df4:	680c      	ldr	r4, [r1, #0]
 8004df6:	f100 032d 	add.w	r3, r0, #45	; 0x2d
 8004dfa:	46a4      	mov	ip, r4
}
 8004dfc:	bc30      	pop	{r4, r5}
  return dev->dev_fn(u8g, dev, msg, arg); 
 8004dfe:	223b      	movs	r2, #59	; 0x3b
 8004e00:	4760      	bx	ip
 8004e02:	bf00      	nop

08004e04 <u8g_IsBBXIntersection>:
  }
}


uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
 8004e04:	b470      	push	{r4, r5, r6}
 8004e06:	f89d 400c 	ldrb.w	r4, [sp, #12]
  if ( v0 <= a1 )
 8004e0a:	f890 603b 	ldrb.w	r6, [r0, #59]	; 0x3b
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
 8004e0e:	3c01      	subs	r4, #1
 8004e10:	4414      	add	r4, r2
  if ( v0 <= a1 )
 8004e12:	4296      	cmp	r6, r2
  tmp--;
 8004e14:	b2e4      	uxtb	r4, r4
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
 8004e16:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
  if ( v0 <= a1 )
 8004e1a:	d312      	bcc.n	8004e42 <u8g_IsBBXIntersection+0x3e>
    if ( v1 >= a0 )
 8004e1c:	42a5      	cmp	r5, r4
 8004e1e:	d812      	bhi.n	8004e46 <u8g_IsBBXIntersection+0x42>
  if ( v0 <= a1 )
 8004e20:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
    return 0; 
  
  tmp = x;
  tmp += w;
  tmp--;
 8004e24:	3b01      	subs	r3, #1
 8004e26:	440b      	add	r3, r1
  if ( v0 <= a1 )
 8004e28:	428c      	cmp	r4, r1
  tmp--;
 8004e2a:	b2db      	uxtb	r3, r3
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 8004e2c:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
  if ( v0 <= a1 )
 8004e30:	d30e      	bcc.n	8004e50 <u8g_IsBBXIntersection+0x4c>
    if ( v1 >= a0 )
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d913      	bls.n	8004e5e <u8g_IsBBXIntersection+0x5a>
    return 0; 
 8004e36:	4299      	cmp	r1, r3
 8004e38:	bf94      	ite	ls
 8004e3a:	2000      	movls	r0, #0
 8004e3c:	2001      	movhi	r0, #1
}
 8004e3e:	bc70      	pop	{r4, r5, r6}
 8004e40:	4770      	bx	lr
    if ( v1 >= a0 )
 8004e42:	42a5      	cmp	r5, r4
 8004e44:	d801      	bhi.n	8004e4a <u8g_IsBBXIntersection+0x46>
      if ( v0 > v1 )
 8004e46:	42a2      	cmp	r2, r4
 8004e48:	d8ea      	bhi.n	8004e20 <u8g_IsBBXIntersection+0x1c>
}
 8004e4a:	bc70      	pop	{r4, r5, r6}
    return 0; 
 8004e4c:	2000      	movs	r0, #0
}
 8004e4e:	4770      	bx	lr
    if ( v1 >= a0 )
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d8fa      	bhi.n	8004e4a <u8g_IsBBXIntersection+0x46>
    return 0; 
 8004e54:	4299      	cmp	r1, r3
 8004e56:	bf94      	ite	ls
 8004e58:	2000      	movls	r0, #0
 8004e5a:	2001      	movhi	r0, #1
 8004e5c:	e7ef      	b.n	8004e3e <u8g_IsBBXIntersection+0x3a>
      return 1;
 8004e5e:	2001      	movs	r0, #1
}
 8004e60:	bc70      	pop	{r4, r5, r6}
 8004e62:	4770      	bx	lr

08004e64 <Default_Handler>:
 * @param  None
 * @retval : None
*/

void Default_Handler(void)
{
 8004e64:	e7fe      	b.n	8004e64 <Default_Handler>
 8004e66:	bf00      	nop

08004e68 <Reset_Handler>:
{
 8004e68:	4668      	mov	r0, sp
 8004e6a:	f020 0107 	bic.w	r1, r0, #7
 8004e6e:	468d      	mov	sp, r1
  for (i=0;i<500000;i++) { ; }
 8004e70:	2300      	movs	r3, #0
{
 8004e72:	b500      	push	{lr}
 8004e74:	b083      	sub	sp, #12
  for (i=0;i<500000;i++) { ; }
 8004e76:	9301      	str	r3, [sp, #4]
 8004e78:	9a01      	ldr	r2, [sp, #4]
 8004e7a:	4b17      	ldr	r3, [pc, #92]	; (8004ed8 <Reset_Handler+0x70>)
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d805      	bhi.n	8004e8c <Reset_Handler+0x24>
 8004e80:	9a01      	ldr	r2, [sp, #4]
 8004e82:	3201      	adds	r2, #1
 8004e84:	9201      	str	r2, [sp, #4]
 8004e86:	9a01      	ldr	r2, [sp, #4]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d9f9      	bls.n	8004e80 <Reset_Handler+0x18>
  if ( pulSrc != pulDest )
 8004e8c:	4913      	ldr	r1, [pc, #76]	; (8004edc <Reset_Handler+0x74>)
 8004e8e:	4a14      	ldr	r2, [pc, #80]	; (8004ee0 <Reset_Handler+0x78>)
 8004e90:	4291      	cmp	r1, r2
 8004e92:	d00e      	beq.n	8004eb2 <Reset_Handler+0x4a>
    for(; pulDest < &_edata; )
 8004e94:	4b13      	ldr	r3, [pc, #76]	; (8004ee4 <Reset_Handler+0x7c>)
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d20b      	bcs.n	8004eb2 <Reset_Handler+0x4a>
 8004e9a:	1d10      	adds	r0, r2, #4
 8004e9c:	3303      	adds	r3, #3
 8004e9e:	1a1b      	subs	r3, r3, r0
 8004ea0:	f023 0303 	bic.w	r3, r3, #3
 8004ea4:	4403      	add	r3, r0
      *(pulDest++) = *(pulSrc++);
 8004ea6:	f851 0b04 	ldr.w	r0, [r1], #4
 8004eaa:	f842 0b04 	str.w	r0, [r2], #4
    for(; pulDest < &_edata; )
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d1f9      	bne.n	8004ea6 <Reset_Handler+0x3e>
  for(pulDest = &_sbss; pulDest < &_ebss; )
 8004eb2:	4a0d      	ldr	r2, [pc, #52]	; (8004ee8 <Reset_Handler+0x80>)
 8004eb4:	4b0d      	ldr	r3, [pc, #52]	; (8004eec <Reset_Handler+0x84>)
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d20a      	bcs.n	8004ed0 <Reset_Handler+0x68>
    *(pulDest++) = 0;
 8004eba:	2000      	movs	r0, #0
 8004ebc:	1d11      	adds	r1, r2, #4
 8004ebe:	3303      	adds	r3, #3
 8004ec0:	1a5b      	subs	r3, r3, r1
 8004ec2:	f023 0303 	bic.w	r3, r3, #3
 8004ec6:	440b      	add	r3, r1
 8004ec8:	f842 0b04 	str.w	r0, [r2], #4
  for(pulDest = &_sbss; pulDest < &_ebss; )
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d1fb      	bne.n	8004ec8 <Reset_Handler+0x60>
  main();
 8004ed0:	4b07      	ldr	r3, [pc, #28]	; (8004ef0 <Reset_Handler+0x88>)
 8004ed2:	4798      	blx	r3
 8004ed4:	e7fe      	b.n	8004ed4 <Reset_Handler+0x6c>
 8004ed6:	bf00      	nop
 8004ed8:	0007a11f 	.word	0x0007a11f
 8004edc:	0800701c 	.word	0x0800701c
 8004ee0:	20000000 	.word	0x20000000
 8004ee4:	200005b0 	.word	0x200005b0
 8004ee8:	200005b0 	.word	0x200005b0
 8004eec:	20001378 	.word	0x20001378
 8004ef0:	08003ec9 	.word	0x08003ec9

08004ef4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004ef4:	b430      	push	{r4, r5}
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8004ef6:	2400      	movs	r4, #0
  RCC->CIR = 0x009F0000;
 8004ef8:	f44f 051f 	mov.w	r5, #10420224	; 0x9f0000
  RCC->CR |= (uint32_t)0x00000001;
 8004efc:	4b38      	ldr	r3, [pc, #224]	; (8004fe0 <SystemInit+0xec>)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8004efe:	4a39      	ldr	r2, [pc, #228]	; (8004fe4 <SystemInit+0xf0>)
  RCC->CR |= (uint32_t)0x00000001;
 8004f00:	6819      	ldr	r1, [r3, #0]
{
 8004f02:	b082      	sub	sp, #8
  RCC->CR |= (uint32_t)0x00000001;
 8004f04:	f041 0101 	orr.w	r1, r1, #1
 8004f08:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8004f0a:	6859      	ldr	r1, [r3, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8004f0c:	4618      	mov	r0, r3
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8004f0e:	400a      	ands	r2, r1
 8004f10:	605a      	str	r2, [r3, #4]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004f18:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004f1c:	601a      	str	r2, [r3, #0]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f24:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8004f2c:	605a      	str	r2, [r3, #4]
  RCC->CIR = 0x009F0000;
 8004f2e:	609d      	str	r5, [r3, #8]
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8004f30:	9400      	str	r4, [sp, #0]
 8004f32:	9401      	str	r4, [sp, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004f3a:	601a      	str	r2, [r3, #0]
 8004f3c:	e003      	b.n	8004f46 <SystemInit+0x52>
    StartUpCounter++;  
  } while((HSEStatus == 0) && (StartUpCounter != HSEStartUp_TimeOut));
 8004f3e:	9b00      	ldr	r3, [sp, #0]
 8004f40:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004f44:	d009      	beq.n	8004f5a <SystemInit+0x66>
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8004f46:	6803      	ldr	r3, [r0, #0]
 8004f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f4c:	9301      	str	r3, [sp, #4]
    StartUpCounter++;  
 8004f4e:	9b00      	ldr	r3, [sp, #0]
 8004f50:	3301      	adds	r3, #1
 8004f52:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSEStartUp_TimeOut));
 8004f54:	9b01      	ldr	r3, [sp, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d0f1      	beq.n	8004f3e <SystemInit+0x4a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8004f5a:	4b21      	ldr	r3, [pc, #132]	; (8004fe0 <SystemInit+0xec>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8004f62:	bf18      	it	ne
 8004f64:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8004f66:	9301      	str	r3, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8004f68:	9b01      	ldr	r3, [sp, #4]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d000      	beq.n	8004f70 <SystemInit+0x7c>
 8004f6e:	e7fe      	b.n	8004f6e <SystemInit+0x7a>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8004f70:	4a1d      	ldr	r2, [pc, #116]	; (8004fe8 <SystemInit+0xf4>)
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8004f72:	4b1b      	ldr	r3, [pc, #108]	; (8004fe0 <SystemInit+0xec>)
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8004f74:	6810      	ldr	r0, [r2, #0]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8004f76:	4619      	mov	r1, r3
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8004f78:	f040 0010 	orr.w	r0, r0, #16
 8004f7c:	6010      	str	r0, [r2, #0]
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8004f7e:	6810      	ldr	r0, [r2, #0]
 8004f80:	f020 0003 	bic.w	r0, r0, #3
 8004f84:	6010      	str	r0, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8004f86:	6810      	ldr	r0, [r2, #0]
 8004f88:	f040 0002 	orr.w	r0, r0, #2
 8004f8c:	6010      	str	r0, [r2, #0]
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f9c:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8004f9e:	685a      	ldr	r2, [r3, #4]
 8004fa0:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8004fa4:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 8004fac:	605a      	str	r2, [r3, #4]
    RCC->CR |= RCC_CR_PLLON;
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004fb4:	601a      	str	r2, [r3, #0]
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8004fb6:	680b      	ldr	r3, [r1, #0]
 8004fb8:	019b      	lsls	r3, r3, #6
 8004fba:	d5fc      	bpl.n	8004fb6 <SystemInit+0xc2>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8004fbc:	684b      	ldr	r3, [r1, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8004fbe:	4a08      	ldr	r2, [pc, #32]	; (8004fe0 <SystemInit+0xec>)
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8004fc0:	f023 0303 	bic.w	r3, r3, #3
 8004fc4:	604b      	str	r3, [r1, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8004fc6:	684b      	ldr	r3, [r1, #4]
 8004fc8:	f043 0302 	orr.w	r3, r3, #2
 8004fcc:	604b      	str	r3, [r1, #4]
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8004fce:	6853      	ldr	r3, [r2, #4]
 8004fd0:	f003 030c 	and.w	r3, r3, #12
 8004fd4:	2b08      	cmp	r3, #8
 8004fd6:	d1fa      	bne.n	8004fce <SystemInit+0xda>
}
 8004fd8:	b002      	add	sp, #8
 8004fda:	bc30      	pop	{r4, r5}
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	40021000 	.word	0x40021000
 8004fe4:	f8ff0000 	.word	0xf8ff0000
 8004fe8:	40022000 	.word	0x40022000

08004fec <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *   that contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8004fec:	b530      	push	{r4, r5, lr}
 8004fee:	460d      	mov	r5, r1
 8004ff0:	4604      	mov	r4, r0
  }

  usartxbase = (uint32_t)USARTx;

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8004ff2:	8a03      	ldrh	r3, [r0, #16]
 8004ff4:	88ca      	ldrh	r2, [r1, #6]
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004ffc:	4313      	orrs	r3, r2
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 8004ffe:	898a      	ldrh	r2, [r1, #12]
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8005000:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8005002:	8980      	ldrh	r0, [r0, #12]
 8005004:	4b11      	ldr	r3, [pc, #68]	; (800504c <USART_Init+0x60>)
 8005006:	8889      	ldrh	r1, [r1, #4]
 8005008:	4003      	ands	r3, r0
 800500a:	8928      	ldrh	r0, [r5, #8]
 800500c:	430b      	orrs	r3, r1
 800500e:	8969      	ldrh	r1, [r5, #10]
 8005010:	4303      	orrs	r3, r0
 8005012:	430b      	orrs	r3, r1
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8005014:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8005016:	8aa3      	ldrh	r3, [r4, #20]
{
 8005018:	b087      	sub	sp, #28
  tmpreg = USARTx->CR3;
 800501a:	b29b      	uxth	r3, r3
 800501c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005020:	4313      	orrs	r3, r2
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8005022:	a801      	add	r0, sp, #4
  USARTx->CR3 = (uint16_t)tmpreg;
 8005024:	82a3      	strh	r3, [r4, #20]
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8005026:	4b0a      	ldr	r3, [pc, #40]	; (8005050 <USART_Init+0x64>)
 8005028:	4798      	blx	r3
  if (usartxbase == USART1_BASE)
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800502a:	e9dd 3103 	ldrd	r3, r1, [sp, #12]
  if (usartxbase == USART1_BASE)
 800502e:	4809      	ldr	r0, [pc, #36]	; (8005054 <USART_Init+0x68>)
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
#ifdef MOD_MTHOMAS_STMLIB
  /* proposed by "A.K." in the mikrocontroller.net forum: */
  USARTx->BRR = ((2 * apbclock) / (USART_InitStruct->USART_BaudRate) + 1) / 2;
 8005030:	682a      	ldr	r2, [r5, #0]
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8005032:	4284      	cmp	r4, r0
 8005034:	bf08      	it	eq
 8005036:	460b      	moveq	r3, r1
  USARTx->BRR = ((2 * apbclock) / (USART_InitStruct->USART_BaudRate) + 1) / 2;
 8005038:	005b      	lsls	r3, r3, #1
 800503a:	fbb3 f3f2 	udiv	r3, r3, r2
 800503e:	3301      	adds	r3, #1
 8005040:	f3c3 034f 	ubfx	r3, r3, #1, #16
 8005044:	8123      	strh	r3, [r4, #8]
  fractionaldivider = integerdivider - (0x64 * (tmpreg >> 0x04));
  tmpreg |= ((((fractionaldivider * 0x10) + 0x32) / 0x64)) & ((uint8_t)0x0F);
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
#endif
}
 8005046:	b007      	add	sp, #28
 8005048:	bd30      	pop	{r4, r5, pc}
 800504a:	bf00      	nop
 800504c:	ffffe9f3 	.word	0xffffe9f3
 8005050:	0800530d 	.word	0x0800530d
 8005054:	40013800 	.word	0x40013800

08005058 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8005058:	8983      	ldrh	r3, [r0, #12]
  if (NewState != DISABLE)
 800505a:	b929      	cbnz	r1, 8005068 <USART_Cmd+0x10>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 800505c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005060:	041b      	lsls	r3, r3, #16
 8005062:	0c1b      	lsrs	r3, r3, #16
 8005064:	8183      	strh	r3, [r0, #12]
  }
}
 8005066:	4770      	bx	lr
    USARTx->CR1 |= CR1_UE_Set;
 8005068:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800506c:	8183      	strh	r3, [r0, #12]
 800506e:	4770      	bx	lr

08005070 <USART_ITConfig>:
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
  itmask = (((uint32_t)0x01) << itpos);
 8005070:	2301      	movs	r3, #1
{
 8005072:	b410      	push	{r4}
  itpos = USART_IT & IT_Mask;
 8005074:	f001 041f 	and.w	r4, r1, #31
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8005078:	f3c1 1142 	ubfx	r1, r1, #5, #3
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800507c:	2901      	cmp	r1, #1
  itmask = (((uint32_t)0x01) << itpos);
 800507e:	fa03 f304 	lsl.w	r3, r3, r4
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8005082:	d00f      	beq.n	80050a4 <USART_ITConfig+0x34>
  {
    usartxbase += 0x0C;
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8005084:	2902      	cmp	r1, #2
  {
    usartxbase += 0x10;
 8005086:	bf0c      	ite	eq
 8005088:	3010      	addeq	r0, #16
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 800508a:	3014      	addne	r0, #20
  }
  if (NewState != DISABLE)
 800508c:	b92a      	cbnz	r2, 800509a <USART_ITConfig+0x2a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800508e:	6802      	ldr	r2, [r0, #0]
  }
}
 8005090:	bc10      	pop	{r4}
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8005092:	ea22 0303 	bic.w	r3, r2, r3
 8005096:	6003      	str	r3, [r0, #0]
}
 8005098:	4770      	bx	lr
    *(__IO uint32_t*)usartxbase  |= itmask;
 800509a:	6802      	ldr	r2, [r0, #0]
}
 800509c:	bc10      	pop	{r4}
    *(__IO uint32_t*)usartxbase  |= itmask;
 800509e:	4313      	orrs	r3, r2
 80050a0:	6003      	str	r3, [r0, #0]
}
 80050a2:	4770      	bx	lr
    usartxbase += 0x0C;
 80050a4:	300c      	adds	r0, #12
 80050a6:	e7f1      	b.n	800508c <USART_ITConfig+0x1c>

080050a8 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80050a8:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80050ac:	8081      	strh	r1, [r0, #4]
}
 80050ae:	4770      	bx	lr

080050b0 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80050b0:	8880      	ldrh	r0, [r0, #4]
}
 80050b2:	f3c0 0008 	ubfx	r0, r0, #0, #9
 80050b6:	4770      	bx	lr

080050b8 <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80050b8:	8803      	ldrh	r3, [r0, #0]
 80050ba:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80050bc:	bf14      	ite	ne
 80050be:	2001      	movne	r0, #1
 80050c0:	2000      	moveq	r0, #0
 80050c2:	4770      	bx	lr

080050c4 <USART_GetITStatus>:
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
  itmask = (uint32_t)0x01 << itmask;
 80050c4:	2301      	movs	r3, #1
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80050c6:	f3c1 1242 	ubfx	r2, r1, #5, #3
{
 80050ca:	b410      	push	{r4}
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80050cc:	2a01      	cmp	r2, #1
  itmask = USART_IT & IT_Mask;
 80050ce:	f001 041f 	and.w	r4, r1, #31
  itmask = (uint32_t)0x01 << itmask;
 80050d2:	fa03 f304 	lsl.w	r3, r3, r4
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80050d6:	d014      	beq.n	8005102 <USART_GetITStatus+0x3e>
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80050d8:	2a02      	cmp	r2, #2
  {
    itmask &= USARTx->CR2;
 80050da:	bf0c      	ite	eq
 80050dc:	8a02      	ldrheq	r2, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80050de:	8a82      	ldrhne	r2, [r0, #20]
 80050e0:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 80050e2:	8802      	ldrh	r2, [r0, #0]
 80050e4:	b292      	uxth	r2, r2
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80050e6:	b14b      	cbz	r3, 80050fc <USART_GetITStatus+0x38>
  bitpos = (uint32_t)0x01 << bitpos;
 80050e8:	2301      	movs	r3, #1
  bitpos = USART_IT >> 0x08;
 80050ea:	0a09      	lsrs	r1, r1, #8
  bitpos = (uint32_t)0x01 << bitpos;
 80050ec:	fa03 f101 	lsl.w	r1, r3, r1
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80050f0:	420a      	tst	r2, r1
  {
    bitstatus = SET;
 80050f2:	bf14      	ite	ne
 80050f4:	4618      	movne	r0, r3
 80050f6:	2000      	moveq	r0, #0
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
}
 80050f8:	bc10      	pop	{r4}
 80050fa:	4770      	bx	lr
    bitstatus = RESET;
 80050fc:	4618      	mov	r0, r3
}
 80050fe:	bc10      	pop	{r4}
 8005100:	4770      	bx	lr
    itmask &= USARTx->CR1;
 8005102:	8982      	ldrh	r2, [r0, #12]
 8005104:	4013      	ands	r3, r2
 8005106:	e7ec      	b.n	80050e2 <USART_GetITStatus+0x1e>

08005108 <ADC_Init>:
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8005108:	6843      	ldr	r3, [r0, #4]
{
 800510a:	b430      	push	{r4, r5}
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
 800510c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
 8005110:	790c      	ldrb	r4, [r1, #4]
 8005112:	680a      	ldr	r2, [r1, #0]
  tmpreg1 &= CR1_CLEAR_Mask;
 8005114:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005118:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
 800511c:	4313      	orrs	r3, r2
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 800511e:	6043      	str	r3, [r0, #4]

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8005120:	6885      	ldr	r5, [r0, #8]
  /* Clear CONT, ALIGN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_Mask;
 8005122:	4a0a      	ldr	r2, [pc, #40]	; (800514c <ADC_Init+0x44>)
 8005124:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8005128:	402a      	ands	r2, r5
 800512a:	4323      	orrs	r3, r4
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 800512c:	794c      	ldrb	r4, [r1, #5]
 800512e:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 8005130:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8005134:	6083      	str	r3, [r0, #8]
  tmpreg1 = ADCx->SQR1;
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
 8005136:	7c0a      	ldrb	r2, [r1, #16]
  tmpreg1 = ADCx->SQR1;
 8005138:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
 800513a:	3a01      	subs	r2, #1
  tmpreg1 |= (uint32_t)tmpreg2 << 20;
 800513c:	b2d2      	uxtb	r2, r2
  tmpreg1 &= SQR1_CLEAR_Mask;
 800513e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
  tmpreg1 |= (uint32_t)tmpreg2 << 20;
 8005142:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8005146:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8005148:	bc30      	pop	{r4, r5}
 800514a:	4770      	bx	lr
 800514c:	fff1f7fd 	.word	0xfff1f7fd

08005150 <ADC_Cmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
 8005150:	6883      	ldr	r3, [r0, #8]
  if (NewState != DISABLE)
 8005152:	b919      	cbnz	r1, 800515c <ADC_Cmd+0xc>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
 8005154:	f023 0301 	bic.w	r3, r3, #1
 8005158:	6083      	str	r3, [r0, #8]
  }
}
 800515a:	4770      	bx	lr
    ADCx->CR2 |= CR2_ADON_Set;
 800515c:	f043 0301 	orr.w	r3, r3, #1
 8005160:	6083      	str	r3, [r0, #8]
 8005162:	4770      	bx	lr

08005164 <ADC_DMACmd>:
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= CR2_DMA_Set;
 8005164:	6883      	ldr	r3, [r0, #8]
  if (NewState != DISABLE)
 8005166:	b919      	cbnz	r1, 8005170 <ADC_DMACmd+0xc>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= CR2_DMA_Reset;
 8005168:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800516c:	6083      	str	r3, [r0, #8]
  }
}
 800516e:	4770      	bx	lr
    ADCx->CR2 |= CR2_DMA_Set;
 8005170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005174:	6083      	str	r3, [r0, #8]
 8005176:	4770      	bx	lr

08005178 <ADC_ResetCalibration>:
void ADC_ResetCalibration(ADC_TypeDef* ADCx)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Resets the selected ADC calibartion registers */  
  ADCx->CR2 |= CR2_RSTCAL_Set;
 8005178:	6883      	ldr	r3, [r0, #8]
 800517a:	f043 0308 	orr.w	r3, r3, #8
 800517e:	6083      	str	r3, [r0, #8]
}
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop

08005184 <ADC_GetResetCalibrationStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of RSTCAL bit */
  if ((ADCx->CR2 & CR2_RSTCAL_Set) != (uint32_t)RESET)
 8005184:	6880      	ldr	r0, [r0, #8]
    /* RSTCAL bit is reset */
    bitstatus = RESET;
  }
  /* Return the RSTCAL bit status */
  return  bitstatus;
}
 8005186:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 800518a:	4770      	bx	lr

0800518c <ADC_StartCalibration>:
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
 800518c:	6883      	ldr	r3, [r0, #8]
 800518e:	f043 0304 	orr.w	r3, r3, #4
 8005192:	6083      	str	r3, [r0, #8]
}
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop

08005198 <ADC_GetCalibrationStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR2 & CR2_CAL_Set) != (uint32_t)RESET)
 8005198:	6880      	ldr	r0, [r0, #8]
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
  }
  /* Return the CAL bit status */
  return  bitstatus;
}
 800519a:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800519e:	4770      	bx	lr

080051a0 <ADC_SoftwareStartConvCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
 80051a0:	6883      	ldr	r3, [r0, #8]
  if (NewState != DISABLE)
 80051a2:	b919      	cbnz	r1, 80051ac <ADC_SoftwareStartConvCmd+0xc>
  }
  else
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
 80051a4:	f423 03a0 	bic.w	r3, r3, #5242880	; 0x500000
 80051a8:	6083      	str	r3, [r0, #8]
  }
}
 80051aa:	4770      	bx	lr
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
 80051ac:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 80051b0:	6083      	str	r3, [r0, #8]
 80051b2:	4770      	bx	lr

080051b4 <ADC_RegularChannelConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80051b4:	2909      	cmp	r1, #9
{
 80051b6:	b470      	push	{r4, r5, r6}
  if (ADC_Channel > ADC_Channel_9)
 80051b8:	d91d      	bls.n	80051f6 <ADC_RegularChannelConfig+0x42>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
 80051ba:	2607      	movs	r6, #7
 80051bc:	f1a1 040a 	sub.w	r4, r1, #10
 80051c0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    tmpreg1 = ADCx->SMPR1;
 80051c4:	68c5      	ldr	r5, [r0, #12]
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
 80051c6:	40a6      	lsls	r6, r4
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 80051c8:	40a3      	lsls	r3, r4
    tmpreg1 &= ~tmpreg2;
 80051ca:	ea25 0406 	bic.w	r4, r5, r6
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 80051ce:	4323      	orrs	r3, r4
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80051d0:	2a06      	cmp	r2, #6
    ADCx->SMPR1 = tmpreg1;
 80051d2:	60c3      	str	r3, [r0, #12]
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
 80051d4:	f04f 041f 	mov.w	r4, #31
  if (Rank < 7)
 80051d8:	d91b      	bls.n	8005212 <ADC_RegularChannelConfig+0x5e>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 80051da:	2a0c      	cmp	r2, #12
 80051dc:	d925      	bls.n	800522a <ADC_RegularChannelConfig+0x76>
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
 80051de:	3a0d      	subs	r2, #13
 80051e0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    tmpreg1 = ADCx->SQR1;
 80051e4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
 80051e6:	4094      	lsls	r4, r2
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 80051e8:	4091      	lsls	r1, r2
    tmpreg1 &= ~tmpreg2;
 80051ea:	ea23 0204 	bic.w	r2, r3, r4
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80051ee:	4311      	orrs	r1, r2
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 80051f0:	62c1      	str	r1, [r0, #44]	; 0x2c
  }
}
 80051f2:	bc70      	pop	{r4, r5, r6}
 80051f4:	4770      	bx	lr
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 80051f6:	2507      	movs	r5, #7
 80051f8:	eb01 0641 	add.w	r6, r1, r1, lsl #1
    tmpreg1 = ADCx->SMPR2;
 80051fc:	6904      	ldr	r4, [r0, #16]
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 80051fe:	40b5      	lsls	r5, r6
    tmpreg1 &= ~tmpreg2;
 8005200:	ea24 0405 	bic.w	r4, r4, r5
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8005204:	40b3      	lsls	r3, r6
    tmpreg1 |= tmpreg2;
 8005206:	4323      	orrs	r3, r4
  if (Rank < 7)
 8005208:	2a06      	cmp	r2, #6
    ADCx->SMPR2 = tmpreg1;
 800520a:	6103      	str	r3, [r0, #16]
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
 800520c:	f04f 041f 	mov.w	r4, #31
  if (Rank < 7)
 8005210:	d8e3      	bhi.n	80051da <ADC_RegularChannelConfig+0x26>
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
 8005212:	3a01      	subs	r2, #1
 8005214:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    tmpreg1 = ADCx->SQR3;
 8005218:	6b43      	ldr	r3, [r0, #52]	; 0x34
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
 800521a:	4094      	lsls	r4, r2
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 800521c:	4091      	lsls	r1, r2
    tmpreg1 &= ~tmpreg2;
 800521e:	ea23 0204 	bic.w	r2, r3, r4
    tmpreg1 |= tmpreg2;
 8005222:	4311      	orrs	r1, r2
    ADCx->SQR3 = tmpreg1;
 8005224:	6341      	str	r1, [r0, #52]	; 0x34
}
 8005226:	bc70      	pop	{r4, r5, r6}
 8005228:	4770      	bx	lr
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
 800522a:	3a07      	subs	r2, #7
 800522c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    tmpreg1 = ADCx->SQR2;
 8005230:	6b03      	ldr	r3, [r0, #48]	; 0x30
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
 8005232:	4094      	lsls	r4, r2
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8005234:	4091      	lsls	r1, r2
    tmpreg1 &= ~tmpreg2;
 8005236:	ea23 0204 	bic.w	r2, r3, r4
    tmpreg1 |= tmpreg2;
 800523a:	4311      	orrs	r1, r2
    ADCx->SQR2 = tmpreg1;
 800523c:	6301      	str	r1, [r0, #48]	; 0x30
}
 800523e:	bc70      	pop	{r4, r5, r6}
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop

08005244 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *   contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8005244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8005248:	78cd      	ldrb	r5, [r1, #3]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 800524a:	06eb      	lsls	r3, r5, #27
 800524c:	bf48      	it	mi
 800524e:	788b      	ldrbmi	r3, [r1, #2]
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8005250:	8809      	ldrh	r1, [r1, #0]
 8005252:	f005 070f 	and.w	r7, r5, #15
 8005256:	bf48      	it	mi
 8005258:	431f      	orrmi	r7, r3
 800525a:	f011 0fff 	tst.w	r1, #255	; 0xff
 800525e:	d021      	beq.n	80052a4 <GPIO_Init+0x60>
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8005260:	2300      	movs	r3, #0
    {
      pos = ((uint32_t)0x01) << pinpos;
 8005262:	f04f 0c01 	mov.w	ip, #1
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8005266:	f04f 080f 	mov.w	r8, #15
    tmpreg = GPIOx->CRL;
 800526a:	6806      	ldr	r6, [r0, #0]
 800526c:	e002      	b.n	8005274 <GPIO_Init+0x30>
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800526e:	3301      	adds	r3, #1
 8005270:	2b08      	cmp	r3, #8
 8005272:	d016      	beq.n	80052a2 <GPIO_Init+0x5e>
      pos = ((uint32_t)0x01) << pinpos;
 8005274:	fa0c f203 	lsl.w	r2, ip, r3
      if (currentpin == pos)
 8005278:	ea32 0401 	bics.w	r4, r2, r1
 800527c:	d1f7      	bne.n	800526e <GPIO_Init+0x2a>
        pos = pinpos << 2;
 800527e:	009c      	lsls	r4, r3, #2
        pinmask = ((uint32_t)0x0F) << pos;
 8005280:	fa08 fe04 	lsl.w	lr, r8, r4
        tmpreg &= ~pinmask;
 8005284:	ea26 060e 	bic.w	r6, r6, lr
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8005288:	fa07 f404 	lsl.w	r4, r7, r4
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800528c:	2d28      	cmp	r5, #40	; 0x28
        tmpreg |= (currentmode << pos);
 800528e:	ea46 0604 	orr.w	r6, r6, r4
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8005292:	d032      	beq.n	80052fa <GPIO_Init+0xb6>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8005294:	2d48      	cmp	r5, #72	; 0x48
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8005296:	f103 0301 	add.w	r3, r3, #1
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800529a:	bf08      	it	eq
 800529c:	6102      	streq	r2, [r0, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800529e:	2b08      	cmp	r3, #8
 80052a0:	d1e8      	bne.n	8005274 <GPIO_Init+0x30>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80052a2:	6006      	str	r6, [r0, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80052a4:	29ff      	cmp	r1, #255	; 0xff
 80052a6:	d924      	bls.n	80052f2 <GPIO_Init+0xae>
  {
    tmpreg = GPIOx->CRH;
 80052a8:	2308      	movs	r3, #8
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80052aa:	f04f 0c01 	mov.w	ip, #1
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80052ae:	f04f 080f 	mov.w	r8, #15
    tmpreg = GPIOx->CRH;
 80052b2:	6846      	ldr	r6, [r0, #4]
 80052b4:	e002      	b.n	80052bc <GPIO_Init+0x78>
 80052b6:	3301      	adds	r3, #1
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80052b8:	2b10      	cmp	r3, #16
 80052ba:	d019      	beq.n	80052f0 <GPIO_Init+0xac>
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80052bc:	fa0c f403 	lsl.w	r4, ip, r3
      if (currentpin == pos)
 80052c0:	ea34 0201 	bics.w	r2, r4, r1
 80052c4:	d1f7      	bne.n	80052b6 <GPIO_Init+0x72>
 80052c6:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 80052ca:	3a08      	subs	r2, #8
 80052cc:	0092      	lsls	r2, r2, #2
        pinmask = ((uint32_t)0x0F) << pos;
 80052ce:	fa08 fe02 	lsl.w	lr, r8, r2
        tmpreg &= ~pinmask;
 80052d2:	ea26 060e 	bic.w	r6, r6, lr
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80052d6:	fa07 f202 	lsl.w	r2, r7, r2
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80052da:	2d28      	cmp	r5, #40	; 0x28
        tmpreg |= (currentmode << pos);
 80052dc:	ea46 0602 	orr.w	r6, r6, r2
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80052e0:	d009      	beq.n	80052f6 <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80052e2:	2d48      	cmp	r5, #72	; 0x48
 80052e4:	f103 0301 	add.w	r3, r3, #1
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80052e8:	bf08      	it	eq
 80052ea:	6104      	streq	r4, [r0, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80052ec:	2b10      	cmp	r3, #16
 80052ee:	d1e5      	bne.n	80052bc <GPIO_Init+0x78>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80052f0:	6046      	str	r6, [r0, #4]
  }
}
 80052f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80052f6:	6144      	str	r4, [r0, #20]
 80052f8:	e7dd      	b.n	80052b6 <GPIO_Init+0x72>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80052fa:	6142      	str	r2, [r0, #20]
 80052fc:	e7b7      	b.n	800526e <GPIO_Init+0x2a>
 80052fe:	bf00      	nop

08005300 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 8005300:	b90a      	cbnz	r2, 8005306 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 8005302:	6141      	str	r1, [r0, #20]
  }
}
 8005304:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8005306:	6101      	str	r1, [r0, #16]
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop

0800530c <RCC_GetClocksFreq>:
#ifdef  STM32F10X_CL
  uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
#endif /* STM32F10X_CL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 800530c:	4a1e      	ldr	r2, [pc, #120]	; (8005388 <RCC_GetClocksFreq+0x7c>)
{
 800530e:	b430      	push	{r4, r5}
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8005310:	6853      	ldr	r3, [r2, #4]
 8005312:	f003 030c 	and.w	r3, r3, #12
  
  switch (tmp)
 8005316:	2b08      	cmp	r3, #8
 8005318:	d10f      	bne.n	800533a <RCC_GetClocksFreq+0x2e>
      RCC_Clocks->SYSCLK_Frequency = HSE_Value;
      break;
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 800531a:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 800531c:	6851      	ldr	r1, [r2, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 800531e:	f3c3 4383 	ubfx	r3, r3, #18, #4
      
      if (pllsource == 0x00)
 8005322:	03c9      	lsls	r1, r1, #15
      pllmull = ( pllmull >> 18) + 2;
 8005324:	f103 0302 	add.w	r3, r3, #2
      if (pllsource == 0x00)
 8005328:	d528      	bpl.n	800537c <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
      }
      else
      {/* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 800532a:	6852      	ldr	r2, [r2, #4]
 800532c:	0392      	lsls	r2, r2, #14
 800532e:	d425      	bmi.n	800537c <RCC_GetClocksFreq+0x70>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_Value >> 1) * pllmull;
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_Value * pllmull;
 8005330:	4a16      	ldr	r2, [pc, #88]	; (800538c <RCC_GetClocksFreq+0x80>)
 8005332:	fb02 f303 	mul.w	r3, r2, r3
 8005336:	6003      	str	r3, [r0, #0]
 8005338:	e001      	b.n	800533e <RCC_GetClocksFreq+0x32>
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
 800533a:	4b14      	ldr	r3, [pc, #80]	; (800538c <RCC_GetClocksFreq+0x80>)
 800533c:	6003      	str	r3, [r0, #0]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 800533e:	4a12      	ldr	r2, [pc, #72]	; (8005388 <RCC_GetClocksFreq+0x7c>)
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8005340:	4c13      	ldr	r4, [pc, #76]	; (8005390 <RCC_GetClocksFreq+0x84>)
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8005342:	6851      	ldr	r1, [r2, #4]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
  tmp = tmp >> 14;
  presc = ADCPrescTable[tmp];
 8005344:	4d13      	ldr	r5, [pc, #76]	; (8005394 <RCC_GetClocksFreq+0x88>)
  tmp = tmp >> 4;
 8005346:	f3c1 1103 	ubfx	r1, r1, #4, #4
  presc = APBAHBPrescTable[tmp];
 800534a:	5c61      	ldrb	r1, [r4, r1]
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800534c:	40cb      	lsrs	r3, r1
 800534e:	6043      	str	r3, [r0, #4]
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8005350:	6851      	ldr	r1, [r2, #4]
  tmp = tmp >> 8;
 8005352:	f3c1 2102 	ubfx	r1, r1, #8, #3
  presc = APBAHBPrescTable[tmp];
 8005356:	5c61      	ldrb	r1, [r4, r1]
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8005358:	fa23 f101 	lsr.w	r1, r3, r1
 800535c:	6081      	str	r1, [r0, #8]
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 800535e:	6851      	ldr	r1, [r2, #4]
  tmp = tmp >> 11;
 8005360:	f3c1 21c2 	ubfx	r1, r1, #11, #3
  presc = APBAHBPrescTable[tmp];
 8005364:	5c61      	ldrb	r1, [r4, r1]
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8005366:	40cb      	lsrs	r3, r1
 8005368:	60c3      	str	r3, [r0, #12]
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 800536a:	6852      	ldr	r2, [r2, #4]
  tmp = tmp >> 14;
 800536c:	f3c2 3281 	ubfx	r2, r2, #14, #2
  presc = ADCPrescTable[tmp];
 8005370:	5caa      	ldrb	r2, [r5, r2]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
}
 8005372:	bc30      	pop	{r4, r5}
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8005374:	fbb3 f3f2 	udiv	r3, r3, r2
 8005378:	6103      	str	r3, [r0, #16]
}
 800537a:	4770      	bx	lr
          RCC_Clocks->SYSCLK_Frequency = (HSE_Value >> 1) * pllmull;
 800537c:	4a06      	ldr	r2, [pc, #24]	; (8005398 <RCC_GetClocksFreq+0x8c>)
 800537e:	fb02 f303 	mul.w	r3, r2, r3
 8005382:	6003      	str	r3, [r0, #0]
 8005384:	e7db      	b.n	800533e <RCC_GetClocksFreq+0x32>
 8005386:	bf00      	nop
 8005388:	40021000 	.word	0x40021000
 800538c:	007a1200 	.word	0x007a1200
 8005390:	20000004 	.word	0x20000004
 8005394:	20000000 	.word	0x20000000
 8005398:	003d0900 	.word	0x003d0900

0800539c <RCC_AHBPeriphClockCmd>:
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800539c:	4a04      	ldr	r2, [pc, #16]	; (80053b0 <RCC_AHBPeriphClockCmd+0x14>)
 800539e:	6953      	ldr	r3, [r2, #20]
  if (NewState != DISABLE)
 80053a0:	b919      	cbnz	r1, 80053aa <RCC_AHBPeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80053a2:	ea23 0000 	bic.w	r0, r3, r0
 80053a6:	6150      	str	r0, [r2, #20]
  }
}
 80053a8:	4770      	bx	lr
    RCC->AHBENR |= RCC_AHBPeriph;
 80053aa:	4318      	orrs	r0, r3
 80053ac:	6150      	str	r0, [r2, #20]
 80053ae:	4770      	bx	lr
 80053b0:	40021000 	.word	0x40021000

080053b4 <RCC_APB2PeriphClockCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80053b4:	4a04      	ldr	r2, [pc, #16]	; (80053c8 <RCC_APB2PeriphClockCmd+0x14>)
 80053b6:	6993      	ldr	r3, [r2, #24]
  if (NewState != DISABLE)
 80053b8:	b919      	cbnz	r1, 80053c2 <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80053ba:	ea23 0000 	bic.w	r0, r3, r0
 80053be:	6190      	str	r0, [r2, #24]
  }
}
 80053c0:	4770      	bx	lr
    RCC->APB2ENR |= RCC_APB2Periph;
 80053c2:	4318      	orrs	r0, r3
 80053c4:	6190      	str	r0, [r2, #24]
 80053c6:	4770      	bx	lr
 80053c8:	40021000 	.word	0x40021000

080053cc <BKP_WriteBackupRegister>:
  * @param  Data: data to write
  * @retval None
  */
void BKP_WriteBackupRegister(uint16_t BKP_DR, uint16_t Data)
{
  __IO uint32_t tmp = 0;
 80053cc:	2200      	movs	r2, #0

  /* Check the parameters */
  assert_param(IS_BKP_DR(BKP_DR));

  tmp = (uint32_t)BKP_BASE; 
 80053ce:	4b05      	ldr	r3, [pc, #20]	; (80053e4 <BKP_WriteBackupRegister+0x18>)
{
 80053d0:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 80053d2:	9201      	str	r2, [sp, #4]
  tmp = (uint32_t)BKP_BASE; 
 80053d4:	9301      	str	r3, [sp, #4]
  tmp += BKP_DR;
 80053d6:	9b01      	ldr	r3, [sp, #4]
 80053d8:	4418      	add	r0, r3
 80053da:	9001      	str	r0, [sp, #4]

  *(__IO uint32_t *) tmp = Data;
 80053dc:	9b01      	ldr	r3, [sp, #4]
 80053de:	6019      	str	r1, [r3, #0]
}
 80053e0:	b002      	add	sp, #8
 80053e2:	4770      	bx	lr
 80053e4:	40006c00 	.word	0x40006c00

080053e8 <PWR_BackupAccessCmd>:
  */
void PWR_BackupAccessCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 80053e8:	4b01      	ldr	r3, [pc, #4]	; (80053f0 <PWR_BackupAccessCmd+0x8>)
 80053ea:	6018      	str	r0, [r3, #0]
}
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	420e0020 	.word	0x420e0020

080053f4 <DMA_DeInit>:
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 80053f4:	2300      	movs	r3, #0
  DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
 80053f6:	6802      	ldr	r2, [r0, #0]
  DMAy_Channelx->CPAR  = 0;
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
  
  if (DMAy_Channelx == DMA1_Channel1)
 80053f8:	4939      	ldr	r1, [pc, #228]	; (80054e0 <DMA_DeInit+0xec>)
  DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
 80053fa:	f022 0201 	bic.w	r2, r2, #1
  if (DMAy_Channelx == DMA1_Channel1)
 80053fe:	4288      	cmp	r0, r1
  DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
 8005400:	6002      	str	r2, [r0, #0]
  DMAy_Channelx->CCR  = 0;
 8005402:	6003      	str	r3, [r0, #0]
  DMAy_Channelx->CNDTR = 0;
 8005404:	6043      	str	r3, [r0, #4]
  DMAy_Channelx->CPAR  = 0;
 8005406:	6083      	str	r3, [r0, #8]
  DMAy_Channelx->CMAR = 0;
 8005408:	60c3      	str	r3, [r0, #12]
  if (DMAy_Channelx == DMA1_Channel1)
 800540a:	d026      	beq.n	800545a <DMA_DeInit+0x66>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_Channel1_IT_Mask;
  }
  else if (DMAy_Channelx == DMA1_Channel2)
 800540c:	4b35      	ldr	r3, [pc, #212]	; (80054e4 <DMA_DeInit+0xf0>)
 800540e:	4298      	cmp	r0, r3
 8005410:	d035      	beq.n	800547e <DMA_DeInit+0x8a>
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_Channel2_IT_Mask;
  }
  else if (DMAy_Channelx == DMA1_Channel3)
 8005412:	4b35      	ldr	r3, [pc, #212]	; (80054e8 <DMA_DeInit+0xf4>)
 8005414:	4298      	cmp	r0, r3
 8005416:	d026      	beq.n	8005466 <DMA_DeInit+0x72>
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
  }
  else if (DMAy_Channelx == DMA1_Channel4)
 8005418:	4b34      	ldr	r3, [pc, #208]	; (80054ec <DMA_DeInit+0xf8>)
 800541a:	4298      	cmp	r0, r3
 800541c:	d035      	beq.n	800548a <DMA_DeInit+0x96>
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
  }
  else if (DMAy_Channelx == DMA1_Channel5)
 800541e:	4b34      	ldr	r3, [pc, #208]	; (80054f0 <DMA_DeInit+0xfc>)
 8005420:	4298      	cmp	r0, r3
 8005422:	d038      	beq.n	8005496 <DMA_DeInit+0xa2>
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
  }
  else if (DMAy_Channelx == DMA1_Channel6)
 8005424:	4b33      	ldr	r3, [pc, #204]	; (80054f4 <DMA_DeInit+0x100>)
 8005426:	4298      	cmp	r0, r3
 8005428:	d023      	beq.n	8005472 <DMA_DeInit+0x7e>
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
  }
  else if (DMAy_Channelx == DMA1_Channel7)
 800542a:	4b33      	ldr	r3, [pc, #204]	; (80054f8 <DMA_DeInit+0x104>)
 800542c:	4298      	cmp	r0, r3
 800542e:	d03e      	beq.n	80054ae <DMA_DeInit+0xba>
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
  }
  else if (DMAy_Channelx == DMA2_Channel1)
 8005430:	4b32      	ldr	r3, [pc, #200]	; (80054fc <DMA_DeInit+0x108>)
 8005432:	4298      	cmp	r0, r3
 8005434:	d041      	beq.n	80054ba <DMA_DeInit+0xc6>
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
  }
  else if (DMAy_Channelx == DMA2_Channel2)
 8005436:	4b32      	ldr	r3, [pc, #200]	; (8005500 <DMA_DeInit+0x10c>)
 8005438:	4298      	cmp	r0, r3
 800543a:	d044      	beq.n	80054c6 <DMA_DeInit+0xd2>
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
  }
  else if (DMAy_Channelx == DMA2_Channel3)
 800543c:	4b31      	ldr	r3, [pc, #196]	; (8005504 <DMA_DeInit+0x110>)
 800543e:	4298      	cmp	r0, r3
 8005440:	d02f      	beq.n	80054a2 <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
  }
  else if (DMAy_Channelx == DMA2_Channel4)
 8005442:	4b31      	ldr	r3, [pc, #196]	; (8005508 <DMA_DeInit+0x114>)
 8005444:	4298      	cmp	r0, r3
 8005446:	d044      	beq.n	80054d2 <DMA_DeInit+0xde>
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
  }
  else
  { 
    if (DMAy_Channelx == DMA2_Channel5)
 8005448:	4b30      	ldr	r3, [pc, #192]	; (800550c <DMA_DeInit+0x118>)
 800544a:	4298      	cmp	r0, r3
 800544c:	d104      	bne.n	8005458 <DMA_DeInit+0x64>
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
 800544e:	4a30      	ldr	r2, [pc, #192]	; (8005510 <DMA_DeInit+0x11c>)
 8005450:	6853      	ldr	r3, [r2, #4]
 8005452:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8005456:	6053      	str	r3, [r2, #4]
    }
  }
}
 8005458:	4770      	bx	lr
    DMA1->IFCR |= DMA1_Channel1_IT_Mask;
 800545a:	4a2e      	ldr	r2, [pc, #184]	; (8005514 <DMA_DeInit+0x120>)
 800545c:	6853      	ldr	r3, [r2, #4]
 800545e:	f043 030f 	orr.w	r3, r3, #15
 8005462:	6053      	str	r3, [r2, #4]
 8005464:	4770      	bx	lr
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
 8005466:	4a2b      	ldr	r2, [pc, #172]	; (8005514 <DMA_DeInit+0x120>)
 8005468:	6853      	ldr	r3, [r2, #4]
 800546a:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 800546e:	6053      	str	r3, [r2, #4]
 8005470:	4770      	bx	lr
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
 8005472:	4a28      	ldr	r2, [pc, #160]	; (8005514 <DMA_DeInit+0x120>)
 8005474:	6853      	ldr	r3, [r2, #4]
 8005476:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800547a:	6053      	str	r3, [r2, #4]
 800547c:	4770      	bx	lr
    DMA1->IFCR |= DMA1_Channel2_IT_Mask;
 800547e:	4a25      	ldr	r2, [pc, #148]	; (8005514 <DMA_DeInit+0x120>)
 8005480:	6853      	ldr	r3, [r2, #4]
 8005482:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8005486:	6053      	str	r3, [r2, #4]
 8005488:	4770      	bx	lr
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
 800548a:	4a22      	ldr	r2, [pc, #136]	; (8005514 <DMA_DeInit+0x120>)
 800548c:	6853      	ldr	r3, [r2, #4]
 800548e:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8005492:	6053      	str	r3, [r2, #4]
 8005494:	4770      	bx	lr
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
 8005496:	4a1f      	ldr	r2, [pc, #124]	; (8005514 <DMA_DeInit+0x120>)
 8005498:	6853      	ldr	r3, [r2, #4]
 800549a:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 800549e:	6053      	str	r3, [r2, #4]
 80054a0:	4770      	bx	lr
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
 80054a2:	4a1b      	ldr	r2, [pc, #108]	; (8005510 <DMA_DeInit+0x11c>)
 80054a4:	6853      	ldr	r3, [r2, #4]
 80054a6:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 80054aa:	6053      	str	r3, [r2, #4]
 80054ac:	4770      	bx	lr
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
 80054ae:	4a19      	ldr	r2, [pc, #100]	; (8005514 <DMA_DeInit+0x120>)
 80054b0:	6853      	ldr	r3, [r2, #4]
 80054b2:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80054b6:	6053      	str	r3, [r2, #4]
 80054b8:	4770      	bx	lr
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
 80054ba:	4a15      	ldr	r2, [pc, #84]	; (8005510 <DMA_DeInit+0x11c>)
 80054bc:	6853      	ldr	r3, [r2, #4]
 80054be:	f043 030f 	orr.w	r3, r3, #15
 80054c2:	6053      	str	r3, [r2, #4]
 80054c4:	4770      	bx	lr
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
 80054c6:	4a12      	ldr	r2, [pc, #72]	; (8005510 <DMA_DeInit+0x11c>)
 80054c8:	6853      	ldr	r3, [r2, #4]
 80054ca:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80054ce:	6053      	str	r3, [r2, #4]
 80054d0:	4770      	bx	lr
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
 80054d2:	4a0f      	ldr	r2, [pc, #60]	; (8005510 <DMA_DeInit+0x11c>)
 80054d4:	6853      	ldr	r3, [r2, #4]
 80054d6:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 80054da:	6053      	str	r3, [r2, #4]
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	40020008 	.word	0x40020008
 80054e4:	4002001c 	.word	0x4002001c
 80054e8:	40020030 	.word	0x40020030
 80054ec:	40020044 	.word	0x40020044
 80054f0:	40020058 	.word	0x40020058
 80054f4:	4002006c 	.word	0x4002006c
 80054f8:	40020080 	.word	0x40020080
 80054fc:	40020408 	.word	0x40020408
 8005500:	4002041c 	.word	0x4002041c
 8005504:	40020430 	.word	0x40020430
 8005508:	40020444 	.word	0x40020444
 800550c:	40020458 	.word	0x40020458
 8005510:	40020400 	.word	0x40020400
 8005514:	40020000 	.word	0x40020000

08005518 <DMA_Init>:
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8005518:	688b      	ldr	r3, [r1, #8]
{
 800551a:	b430      	push	{r4, r5}
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 800551c:	6a0c      	ldr	r4, [r1, #32]
 800551e:	690a      	ldr	r2, [r1, #16]
 8005520:	4323      	orrs	r3, r4
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8005522:	694c      	ldr	r4, [r1, #20]
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8005524:	4313      	orrs	r3, r2
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8005526:	698a      	ldr	r2, [r1, #24]
 8005528:	4323      	orrs	r3, r4
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800552a:	69cc      	ldr	r4, [r1, #28]
 800552c:	6a4d      	ldr	r5, [r1, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800552e:	4313      	orrs	r3, r2
  tmpreg = DMAy_Channelx->CCR;
 8005530:	6802      	ldr	r2, [r0, #0]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8005532:	4323      	orrs	r3, r4
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8005534:	6a8c      	ldr	r4, [r1, #40]	; 0x28
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8005536:	432b      	orrs	r3, r5
  tmpreg &= CCR_CLEAR_Mask;
 8005538:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 800553c:	68cd      	ldr	r5, [r1, #12]
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 800553e:	4323      	orrs	r3, r4
  tmpreg &= CCR_CLEAR_Mask;
 8005540:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8005544:	4313      	orrs	r3, r2
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8005546:	e9d1 4100 	ldrd	r4, r1, [r1]
  DMAy_Channelx->CCR = tmpreg;
 800554a:	6003      	str	r3, [r0, #0]
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 800554c:	6045      	str	r5, [r0, #4]
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800554e:	6084      	str	r4, [r0, #8]
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8005550:	60c1      	str	r1, [r0, #12]
}
 8005552:	bc30      	pop	{r4, r5}
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop

08005558 <DMA_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= CCR_ENABLE_Set;
 8005558:	6803      	ldr	r3, [r0, #0]
  if (NewState != DISABLE)
 800555a:	b919      	cbnz	r1, 8005564 <DMA_Cmd+0xc>
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
 800555c:	f023 0301 	bic.w	r3, r3, #1
 8005560:	6003      	str	r3, [r0, #0]
  }
}
 8005562:	4770      	bx	lr
    DMAy_Channelx->CCR |= CCR_ENABLE_Set;
 8005564:	f043 0301 	orr.w	r3, r3, #1
 8005568:	6003      	str	r3, [r0, #0]
 800556a:	4770      	bx	lr

0800556c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *   the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800556c:	b4f0      	push	{r4, r5, r6, r7}
 800556e:	2401      	movs	r4, #1
 8005570:	7801      	ldrb	r1, [r0, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8005572:	78c3      	ldrb	r3, [r0, #3]
 8005574:	f001 021f 	and.w	r2, r1, #31
 8005578:	4094      	lsls	r4, r2
 800557a:	094e      	lsrs	r6, r1, #5
 800557c:	b92b      	cbnz	r3, 800558a <NVIC_Init+0x1e>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800557e:	4b0f      	ldr	r3, [pc, #60]	; (80055bc <NVIC_Init+0x50>)
 8005580:	3620      	adds	r6, #32
 8005582:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8005586:	bcf0      	pop	{r4, r5, r6, r7}
 8005588:	4770      	bx	lr
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800558a:	4b0d      	ldr	r3, [pc, #52]	; (80055c0 <NVIC_Init+0x54>)
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800558c:	7847      	ldrb	r7, [r0, #1]
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800558e:	68dd      	ldr	r5, [r3, #12]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8005590:	7882      	ldrb	r2, [r0, #2]
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8005592:	43e8      	mvns	r0, r5
    tmpsub = tmpsub >> tmppriority;
 8005594:	230f      	movs	r3, #15
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8005596:	f3c0 2002 	ubfx	r0, r0, #8, #3
    tmppre = (0x4 - tmppriority);
 800559a:	f1c0 0504 	rsb	r5, r0, #4
    tmpsub = tmpsub >> tmppriority;
 800559e:	40c3      	lsrs	r3, r0
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80055a0:	fa07 f505 	lsl.w	r5, r7, r5
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80055a4:	4013      	ands	r3, r2
 80055a6:	432b      	orrs	r3, r5
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80055a8:	4a04      	ldr	r2, [pc, #16]	; (80055bc <NVIC_Init+0x50>)
    tmppriority = tmppriority << 0x04;
 80055aa:	011b      	lsls	r3, r3, #4
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	4411      	add	r1, r2
 80055b0:	f881 3300 	strb.w	r3, [r1, #768]	; 0x300
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80055b4:	f842 4026 	str.w	r4, [r2, r6, lsl #2]
}
 80055b8:	bcf0      	pop	{r4, r5, r6, r7}
 80055ba:	4770      	bx	lr
 80055bc:	e000e100 	.word	0xe000e100
 80055c0:	e000ed00 	.word	0xe000ed00

080055c4 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 80055c4:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 80055c8:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 80055cc:	4b01      	ldr	r3, [pc, #4]	; (80055d4 <NVIC_SetVectorTable+0x10>)
 80055ce:	4301      	orrs	r1, r0
 80055d0:	6099      	str	r1, [r3, #8]
}
 80055d2:	4770      	bx	lr
 80055d4:	e000ed00 	.word	0xe000ed00

080055d8 <__locale_ctype_ptr>:
 80055d8:	4b04      	ldr	r3, [pc, #16]	; (80055ec <__locale_ctype_ptr+0x14>)
 80055da:	4a05      	ldr	r2, [pc, #20]	; (80055f0 <__locale_ctype_ptr+0x18>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	bf08      	it	eq
 80055e4:	4613      	moveq	r3, r2
 80055e6:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80055ea:	4770      	bx	lr
 80055ec:	20000180 	.word	0x20000180
 80055f0:	20000014 	.word	0x20000014

080055f4 <__ascii_mbtowc>:
 80055f4:	b082      	sub	sp, #8
 80055f6:	b149      	cbz	r1, 800560c <__ascii_mbtowc+0x18>
 80055f8:	b15a      	cbz	r2, 8005612 <__ascii_mbtowc+0x1e>
 80055fa:	b16b      	cbz	r3, 8005618 <__ascii_mbtowc+0x24>
 80055fc:	7813      	ldrb	r3, [r2, #0]
 80055fe:	600b      	str	r3, [r1, #0]
 8005600:	7812      	ldrb	r2, [r2, #0]
 8005602:	1c10      	adds	r0, r2, #0
 8005604:	bf18      	it	ne
 8005606:	2001      	movne	r0, #1
 8005608:	b002      	add	sp, #8
 800560a:	4770      	bx	lr
 800560c:	a901      	add	r1, sp, #4
 800560e:	2a00      	cmp	r2, #0
 8005610:	d1f3      	bne.n	80055fa <__ascii_mbtowc+0x6>
 8005612:	4610      	mov	r0, r2
 8005614:	b002      	add	sp, #8
 8005616:	4770      	bx	lr
 8005618:	f06f 0001 	mvn.w	r0, #1
 800561c:	e7f4      	b.n	8005608 <__ascii_mbtowc+0x14>
 800561e:	bf00      	nop

08005620 <__ascii_wctomb>:
 8005620:	b119      	cbz	r1, 800562a <__ascii_wctomb+0xa>
 8005622:	2aff      	cmp	r2, #255	; 0xff
 8005624:	d803      	bhi.n	800562e <__ascii_wctomb+0xe>
 8005626:	700a      	strb	r2, [r1, #0]
 8005628:	2101      	movs	r1, #1
 800562a:	4608      	mov	r0, r1
 800562c:	4770      	bx	lr
 800562e:	238a      	movs	r3, #138	; 0x8a
 8005630:	f04f 31ff 	mov.w	r1, #4294967295
 8005634:	6003      	str	r3, [r0, #0]
 8005636:	e7f8      	b.n	800562a <__ascii_wctomb+0xa>
 8005638:	65746153 	.word	0x65746153
 800563c:	74696c6c 	.word	0x74696c6c
 8005640:	3a207365 	.word	0x3a207365
 8005644:	00000020 	.word	0x00000020
 8005648:	676e6f4c 	.word	0x676e6f4c
 800564c:	00203a20 	.word	0x00203a20
 8005650:	2074614c 	.word	0x2074614c
 8005654:	0000203a 	.word	0x0000203a
 8005658:	72756548 	.word	0x72756548
 800565c:	203a2065 	.word	0x203a2065
 8005660:	00000000 	.word	0x00000000
 8005664:	00000068 	.word	0x00000068
 8005668:	0000006d 	.word	0x0000006d
 800566c:	00000073 	.word	0x00000073
 8005670:	54414256 	.word	0x54414256
 8005674:	00203a20 	.word	0x00203a20
 8005678:	504d4554 	.word	0x504d4554
 800567c:	00203a20 	.word	0x00203a20
 8005680:	69736f50 	.word	0x69736f50
 8005684:	6e6f6974 	.word	0x6e6f6974
 8005688:	00000000 	.word	0x00000000
 800568c:	0000003a 	.word	0x0000003a

08005690 <imagedata>:
	...
 8005700:	000000a4 00000000 00000000 00000000     ................
	...
 800571c:	01000000 00000050 00000000 00000000     ....P...........
	...
 800573c:	0b000000 000000e8 00000000 00000000     ................
	...
 800575c:	bfaaaa00 eaabeaff 0000aaaa 00000000     ................
 800576c:	00000000 0090ba01 00000000 00000000     ................
 800577c:	af96ea1f aa00a0fe 000000a5 00000000     ................
 800578c:	00000000 00b4b500 00000000 10740000     ..............t.
 800579c:	fe010078 0a00d05b 1b0000fe 00000040     x...[.......@...
 80057ac:	00000500 007c7400 00000000 a5790000     .....t|.......y.
 80057bc:	b40000e0 0000d002 3600001e 000000c0     ...........6....
 80057cc:	00802714 007c7400 2900f42d fe7e0018     .'...t|.-..)..~.
 80057dc:	b4ae01f0 0600d001 f060005e 500040a6     ........^.`..@.P
 80057ec:	0040a519 5bf47a00 9e2b7c6e a0b8061c     ..@..z.[n|+.....
 80057fc:	bb4e07fd 7178d181 f9bb5bef 6d0646fa     ..N...xq.[...F.m
 800580c:	00bcf6ba d6d07b00 dea72ded 00b8291e     .....{...-...)..
 800581c:	ba40db3f e06edad1 f4b5595f 6fde66f4     ?.@...n._Y...f.o
 800582c:	00e4ffff eae17500 de5b2dad 0038781e     .....u...-[..x8.
 800583c:	b440ef07 e0aaefa1 f020900f 57eeebf0     ..@....... ....W
 800584c:	00d0f6e7 d0ba7400 dd762d1d b038b41d     .....t...-v...8.
 800585c:	b481ff01 b000efa1 f020d01f 031ee0f0     .......... .....
 800586c:	00e0e190 e43eb400 def62dad 0038b47d     ......>..-..}.8.
 800587c:	b4fd7f80 b941dba6 f0b0f09f 991ff0f0     ......A.........
 800588c:	00f0e1a0 ff1fb400 ebfb6daa 41797dae     .........m...}yA
 800589c:	b4a0baf4 2ff8e7a6 f0007c9f f887f9f8     ......./.|......
 80058ac:	00f4e1b4 fe07b800 95695555 fbbb6f55     ........UUi.Uo..
 80058bc:	f5e055ea 05a450f4 f000bf6f 50407f00     .U...P..o.....@P
 80058cc:	c0fff574 ff01b900 ffffffff ffffbffa     t...............
 80058dc:	00fdffff 02000000 fd06fdff 55555555     ............UUUU
 80058ec:	40fffb01 1540ff07 00000054 ff070000     ...@..@.T.......
 80058fc:	00000090 00000000 ff0bf4bf 00000000     ................
 800590c:	00fe0700 0000ff03 00000000 aa010000     ................
	...
 8005924:	fd02d02f 00000000 007d0000 0000fc00     /.........}.....
 8005934:	00000000 1a000000 00000000 00000000     ................
 8005944:	a000401e 00000000 00040000 00001000     .@..............
 8005954:	00000000 24000000 00000000 00000000     .......$........
	...
 8005a00:	00001014 00000000 00000000 00000000     ................
	...
 8005a1c:	90060000 0200b46a 00000054 00000000     ....j...T.......
	...
 8005a3c:	aa9f926a 9601f9aa 000064fe 00000000     j........d......
	...
 8005a58:	16000000 6aeabf6a 8652e9af 0054ea7f     ....j..j..R...T.
	...
 8005a78:	6a000000 fffeefd7 0740fffb 00a9af5f     ...j......@._...
	...
 8005a98:	fe010000 bfeaefab 5b95fffb d0ababda     ...........[....
	...
 8005ab8:	bf060000 fffeffff aaaaaaea 90aafefe     ................
	...
 8005ad8:	af1a0000 e6bfffff a9aaaaaa a8aabafe     ................
	...
 8005af8:	af2e0000 ffaffaeb ffffffff a9daaffa     ................
	...
 8005b18:	aa7f0100 ffebffba ffffffff aaaeffef     ................
 8005b28:	00000040 00000000 00000000 00000000     @...............
 8005b38:	afbf0100 feebffaf ffffff16 eafa57fd     .............W..
 8005b48:	00000080 00000000 00000000 00000000     ................
 8005b58:	6f7e0400 ffffffbf ffffff91 fefe03f4     ..~o............
 8005b68:	00000090 00000000 00000000 00000000     ................
 8005b78:	bfbd0800 ffbfbff8 fffffffb bfb5aff6     ................
 8005b88:	000000e0 00000000 00000000 00000000     ................
 8005b98:	ebfa0900 ffbffffa ffffffff df30fefa     ..............0.
 8005ba8:	000000e0 00000000 00000000 00000000     ................
 8005bb8:	fffb1b00 ffffeaff ffffffff eb66a9fe     ..............f.
 8005bc8:	000000f4 00000000 00000000 00000000     ................
 8005bd8:	aaff2b00 fffffbff ffffffff f7ffeaff     .+..............
 8005be8:	000000f8 00000000 00000000 00000000     ................
 8005bf8:	abef2700 ffffffff ffffffff fbffffff     .'..............
 8005c08:	000000fd 00000000 00000000 00000000     ................
 8005c18:	ffee6200 ffffffff ffffffff feffffff     .b..............
 8005c28:	000000fd 00000000 00000000 00000000     ................
 8005c38:	fffdab00 ffffffff ffffffff fdffffff     ................
 8005c48:	000000fe 00000000 00000000 00000000     ................
 8005c58:	fffe7f00 ffffffff ffffffff feffffff     ................
 8005c68:	000000fe 00000000 00000000 00000000     ................
 8005c78:	ffffbf00 eaafbfff aaaaaaaa fffffabf     ................
 8005c88:	000040be 00000000 00000000 00000000     .@..............
 8005c98:	fffbaf01 004154e6 01040000 ff6fd519     .....TA.......o.
 8005ca8:	0000007e 00000000 00000000 00000000     ~...............
 8005cb8:	fff7af00 000000d0 00000000 ff5f4100     .............A_.
 8005cc8:	0000407f 00000000 00000000 00000000     .@..............
 8005cd8:	fff7df05 000000d0 00000000 ff6f0100     ..............o.
 8005ce8:	000080bf 00000000 00000000 00000000     ................
 8005cf8:	fffbdf0a 000000d0 00000000 ff6f0100     ..............o.
 8005d08:	000080ff 00000000 00000000 00000000     ................
 8005d18:	ffffef0a 000000d0 00000000 ff6f1400     ..............o.
 8005d28:	000080ef 00000000 00000000 00000000     ................
 8005d38:	ffefef0a 010000d0 00400054 ff5f0400     ........T.@..._.
 8005d48:	000090df 00000000 00000000 00000000     ................
 8005d58:	ffdfff0a 010000d0 00a451f9 ff6f1504     .........Q....o.
 8005d68:	0000a4df 00000000 00000000 00000000     ................
 8005d78:	ffdfff0a 010000e0 105464a5 ff6f5504     .........dT..Uo.
 8005d88:	0000a8df 00000000 00000000 00000000     ................
 8005d98:	ffdfbf2e 000000d0 14140054 ff5f1550     ........T...P._.
 8005da8:	0000e9df 00000000 00000000 00000000     ................
 8005db8:	ffdfbf6f 014000e0 44400050 ff5f5510     o.....@.P.@D.U_.
 8005dc8:	0000e5df 00000000 00000000 00000000     ................
 8005dd8:	ffdfffaf 050040e4 55415455 ff6f5515     .....@..UTAU.Uo.
 8005de8:	000091df 00000000 00000000 00000000     ................
 8005df8:	ffdfffaf 554540e5 55555505 ff7f5551     .....@EU.UUUQU..
 8005e08:	0000c2db 00000000 00000000 00000000     ................
 8005e18:	ffdfffab 596910e5 55155415 eb7f5555     ......iY.T.UUU..
 8005e28:	0000d2db 00000000 00000000 00000000     ................
 8005e38:	cbefff77 5a5a50e5 59555550 877f5595     w....PZZPUUY.U..
 8005e48:	000092db 00000000 00000000 00000000     ................
 8005e58:	8befff7e 5a5155e5 59555555 8f7f55a5     ~....UQZUUUY.U..
 8005e68:	000092df 00000000 00000000 00000000     ................
 8005e78:	dbdfffbe e6aa56e5 6a555555 df7f55a5     .....V..UUUj.U..
 8005e88:	000092df 00000000 00000000 00000000     ................
 8005e98:	dbdfff7e e69a56e5 96555555 ff7f55a5     ~....V..UUU..U..
 8005ea8:	000092df 00000000 00000000 00000000     ................
 8005eb8:	ffdfff3e 9a5a55e5 55555555 ff7f5565     >....UZ.UUUUeU..
 8005ec8:	000092df 00000000 00000000 00000000     ................
 8005ed8:	ffdfff7e 6a5555e5 5a555555 ff7f5555     ~....UUjUUUZUU..
 8005ee8:	000096df 00000000 00000000 00000000     ................
 8005ef8:	ffdfff3e b95a55e5 55555555 ff7f5555     >....UZ.UUUUUU..
 8005f08:	000095df 00000000 00000000 00000000     ................
 8005f18:	ffdfff3e 555555e5 55555555 ff7f5555     >....UUUUUUUUU..
 8005f28:	0000a4df 00000000 00000000 00000000     ................
 8005f38:	ffdfbf2f 555555e5 55555555 ff7f5555     /....UUUUUUUUU..
 8005f48:	000090df 00000000 00000000 00000000     ................
 8005f58:	ffefbf0f 555555e5 55555555 ff6f5555     .....UUUUUUUUUo.
 8005f68:	000080df 00000000 00000000 00000000     ................
 8005f78:	ffffef0a 555555e5 55555555 ffaf5555     .....UUUUUUUUU..
 8005f88:	000080df 00000000 00000000 00000000     ................
 8005f98:	ffffaf06 555555e5 55555555 ffbf5555     .....UUUUUUUUU..
 8005fa8:	0000406f 00000000 00000000 00000000     o@..............
 8005fb8:	fffb9f01 555555e5 55555555 ffbf5655     .....UUUUUUUUV..
 8005fc8:	0000007f 00000000 00000000 00000000     ................
 8005fd8:	fff7af00 555555f5 55555555 ffbf5555     .....UUUUUUUUU..
 8005fe8:	0000407a 00000000 00000000 00000000     z@..............
 8005ff8:	fff7af01 555555e5 55555555 ffbf5555     .....UUUUUUUUU..
 8006008:	0000407a 00000000 00000000 00000000     z@..............
 8006018:	fffbaf00 555555e5 55555555 ffafaa55     .....UUUUUUUU...
 8006028:	0000007e 00000000 00000000 00000000     ~...............
 8006038:	fffe2f00 99aa9afa 5aaa5556 febfaa6a     ./......VU.Zj...
 8006048:	000000ac 00000000 00000000 00000000     ................
 8006058:	fffd6b00 e56aaefa 55555555 fdffff5b     .k....j.UUUU[...
 8006068:	000000ed 00000000 00000000 00000000     ................
 8006078:	fffe6b00 ffffffff ffffffff fdffffff     .k..............
 8006088:	000000bc 00000000 00000000 00000000     ................
 8006098:	ffff2a00 fefaffff faff7f7d fdffffff     .*......}.......
 80060a8:	000000f8 00000000 00000000 00000000     ................
 80060b8:	6fff0a00 fbffffff ffffffeb f7ffffff     ...o............
 80060c8:	000000b4 00000000 00000000 00000000     ................
 80060d8:	afff1a00 ffffffff ffe7fbff f67f80ff     ................
 80060e8:	000000f0 00000000 00000000 00000000     ................
 80060f8:	efff0900 d7ff96fa ffffe75f dafffff9     ........_.......
 8006108:	000000d0 00000000 00000000 00000000     ................
 8006118:	dbbf0100 ffafffff ffffffff 5b9e7fe7     ...............[
 8006128:	000000c0 00000000 00000000 00000000     ................
 8006138:	fabf0200 ffff2ff4 ffffffff 6bf8e7e7     ...../.........k
 8006148:	00000080 00000000 00000000 00000000     ................
 8006158:	f8af0100 ffebbfbd ffffffff fa821ffe     ................
	...
 8006178:	ff2a0000 ffffff9b ffffffff a42ef48f     ..*.............
	...
 8006198:	fb1a0000 ffff2ff4 ffffffff 94ea1f84     ...../..........
	...
 80061b8:	aa0a0000 5b00f4af 0054e9fb 5099aa6f     .......[..T.o..P
	...
 80061d8:	aa010000 ffe6ffaa feea9a59 e057a5aa     ........Y.....W.
	...
 80061f8:	aa010000 aaaaaaaa aaaaaaaa 80ff57a9     .............W..
	...
 8006218:	3f000000 aaaaaafe 05a8aaaa 00e8ff5f     ...?........_...
	...
 8006238:	3f000000 5b95ffff 55e54199 0000fd7f     ...?...[.A.U....
	...
 800625c:	0095ff5f 50555501 00000079 00000000     _....UUPy.......
	...
 800627c:	00505601 00000000 00000000 00000000     .VP.............
	...
 8006310:	52535024 33303146 2c33302c 302c3030     $PSRF103,03,00,0
 8006320:	31302c35 0d32322a 0000000a 52535024     5,01*22.....$PSR
 8006330:	31353146 2a30302c 0a0d4530 00000000     F151,00*0E......
 8006340:	46737542 746c7561 00000000 64726148     BusFault....Hard
 8006350:	6c756146 00000074 4d6d654d 67616e61     Fault...MemManag
 8006360:	00007265 67617355 61462065 00746c75     er..Usage Fault.

08006370 <u8g_font_6x10r>:
 8006370:	000a0601 360107fe 7f206802 07fe08fe     .......6.h .....
 8006380:	60000afe 80671722 80808080 33168000     ...`".g........3
 8006390:	a0a0a063 50675702 f850f850 57025050     c....WgPP.P.PP.W
 80063a0:	a0702067 20702870 48675702 502050a8     g p.p(p .WgH.P P
 80063b0:	570290a8 a0a04067 6890a840 80631326     ...Wg@..@..h&.c.
 80063c0:	37128080 80402067 20408080 80673712     ...7g @...@ .7g.
 80063d0:	20202040 55038040 f8508865 55038850     @   @..Ue.P.P..U
 80063e0:	f8202065 33112020 80406063 f8615105     e  .  .3c`@..Qa.
 80063f0:	40633311 570240e0 10080867 80804020     .3c@.@.Wg... @..
 8006400:	20675702 88888850 57022050 a0602067     .Wg P...P .Wg `.
 8006410:	f8202020 70675702 40300888 5702f880        ..Wgp..0@...W
 8006420:	1008f867 70880830 10675702 f8905030     g...0..p.Wg.0P..
 8006430:	57021010 b080f867 708808c8 30675702     ...Wg......p.Wg0
 8006440:	c8b08040 57027088 1008f867 40402010     @....p.Wg.... @@
 8006450:	70675702 88708888 57027088 98887067     .Wgp..p..p.Wgp..
 8006460:	60100868 40673711 400040e0 371140e0     h..`.7g@.@.@.@.7
 8006470:	40e04067 80406000 10674712 40804020     g@.@.`@..Gg. @.@
 8006480:	53041020 f800f863 80674712 20102040      ..Sc....Gg.@ . 
 8006490:	57028040 10887067 20002020 70675702     @..Wgp..  . .Wgp
 80064a0:	b0a89888 57027080 88502067 8888f888     .....p.Wg P.....
 80064b0:	f0675702 48704848 5702f048 80887067     .Wg.HHpHH..Wgp..
 80064c0:	70888080 f0675702 48484848 5702f048     ...p.Wg.HHHHH..W
 80064d0:	8080f867 f88080f0 f8675702 80f08080     g........Wg.....
 80064e0:	57028080 80887067 70889880 88675702     ...Wgp.....p.Wg.
 80064f0:	88f88888 37128888 4040e067 e0404040     .......7g.@@@@@.
 8006500:	38675702 10101010 57026090 a0908867     .Wg8.....`.Wg...
 8006510:	8890a0c0 80675702 80808080 5702f880     .....Wg........W
 8006520:	d8888867 888888a8 88675702 98a8c888     g........Wg.....
 8006530:	57028888 88887067 70888888 f0675702     ...Wgp.....p.Wg.
 8006540:	80f08888 58018080 88887068 70a88888     .......Xhp.....p
 8006550:	67570208 f08888f0 028890a0 88706757     ..Wg........Wgp.
 8006560:	88087080 67570270 202020f8 02202020     .p..p.Wg.      .
 8006570:	88886757 88888888 67570270 50888888     Wg......p.Wg...P
 8006580:	02205050 88886757 d8a8a888 67570288     PP .Wg........Wg
 8006590:	20508888 02888850 88886757 20202050     ..P P...Wg..P   
 80065a0:	67570220 201008f8 12f88040 80e06737      .Wg... @...7g..
 80065b0:	80808080 675702e0 20408080 12080810     ......Wg..@ ....
 80065c0:	20e06737 20202020 635306e0 01885020     7g.     ..Sc P..
 80065d0:	28f86151 40806222 70655502 78887808     Qa.("b.@.Uep.x.x
 80065e0:	80675702 88c8b080 5502b0c8 80887065     .Wg........Uep..
 80065f0:	57027088 68080867 68988898 70655502     .p.Wg..h...h.Uep
 8006600:	7080f888 30675702 40f04048 57004040     ...p.Wg0H@.@@@.W
 8006610:	88887867 70880878 80675702 88c8b080     gx..x..p.Wg.....
 8006620:	37128888 c0004067 e0404040 10694910     ...7g@..@@@..Ii.
 8006630:	10103000 60909010 80675702 e0908880     .0.....`.Wg.....
 8006640:	37128890 4040c067 e0404040 d0655502     ...7g.@@@@@..Ue.
 8006650:	88a8a8a8 b0655502 888888c8 70655502     .....Ue......Uep
 8006660:	70888888 b0675700 b0c888c8 57008080     ...p.Wg........W
 8006670:	88986867 08086898 b0655502 808080c8     gh...h...Ue.....
 8006680:	70655502 f0087080 40675702 4040f040     .Uep.p...Wg@@.@@
 8006690:	55023048 88888865 55026898 50888865     H0.Ue....h.Ue..P
 80066a0:	55022050 a8888865 550250a8 20508865     P .Ue....P.Ue.P 
 80066b0:	57008850 98888867 70880868 f8655502     P..Wg...h..p.Ue.
 80066c0:	f8402010 30674712 20c02040 17223040     . @..Gg0@ . @0".
 80066d0:	80808067 80808080 c0674712 40304020     g........Gg. @0@
 80066e0:	5306c020 90a84863 000000ff               ..ScH......

080066ec <u8g_font_5x7r>:
 80066ec:	00070501 150106ff 7f202702 06ff06ff     .........' .....
 80066fc:	500008ff 80561622 00808080 53331580     ...P".V.......3S
 800670c:	02a0a0a0 f8505555 0250f850 a0705555     ....UUP.P.P.UUp.
 800671c:	02702870 90805646 10904020 40554502     p(p.FV.. @...EU@
 800672c:	50a040a0 80531325 26128080 80804056     .@.P%.S....&V@..
 800673c:	12408080 40805626 80404040 a0553512     ..@.&V.@@@@..5U.
 800674c:	a040e040 20555502 2020f820 60533311     @.@..UU  .  .3S`
 800675c:	41048040 2212f051 03c0c052 20105444     @..AQ.."R...DT. 
 800676c:	36128040 a0a04056 1240a0a0 c0405636     @..6V@....@.6V@.
 800677c:	e0404040 60564602 40201090 564602f0     @@@..FV`.. @..FV
 800678c:	106010f0 46026090 a0602056 022020f0     ..`..`.FV `..  .
 800679c:	80f05646 609010e0 60564602 9090e080     FV.....`.FV`....
 80067ac:	56460260 202010f0 46024040 60906056     `.FV..  @@.FV`.`
 80067bc:	02609090 90605646 60107090 c0552512     ..`.FV`..p.`.%U.
 80067cc:	c0c000c0 60563601 40600060 55351280     .....6V``.`@..5U
 80067dc:	40804020 53430320 12f000f0 40805535      @.@ .CS....5U.@
 80067ec:	12804020 a0405636 40004020 60564602      @..6V@. @.@.FV`
 80067fc:	80b0b090 56460260 f0909060 46029090     ....`.FV`......F
 800680c:	e090e056 02e09090 90605646 60908080     V.......FV`....`
 800681c:	e0564602 90909090 564602e0 80e080f0     .FV.......FV....
 800682c:	4602f080 e080f056 02808080 90605646     ...FV.......FV`.
 800683c:	7090b080 90564602 9090f090 56361290     ...p.FV.......6V
 800684c:	404040e0 4602e040 10101056 02609010     .@@@@..FV.....`.
 800685c:	a0905646 90a0c0c0 80564602 80808080     FV.......FV.....
 800686c:	564602f0 90f0f090 46029090 d0d09056     ..FV.......FV...
 800687c:	0290b0b0 90605646 60909090 e0564602     ....FV`....`.FV.
 800688c:	80e09090 57470180 90909060 021060d0     ......GW`....`..
 800689c:	90e05646 90a0e090 60564602 90204090     FV.......FV`.@ .
 80068ac:	56361260 404040e0 46024040 90909056     `.6V.@@@@@.FV...
 80068bc:	02609090 90905646 60609090 90564602     ..`.FV....``.FV.
 80068cc:	f0f09090 56460290 60609090 36129090     ......FV..``...6
 80068dc:	a0a0a056 02404040 10f05646 f0804020     V...@@@.FV.. @..
 80068ec:	e0563612 80808080 544403e0 10204080     .6V.......DT.@ .
 80068fc:	e0563612 20202020 523216e0 4102a040     .6V.    ..2R@..A
 800690c:	2216f051 02408052 90705444 460250b0     Q.."R.@.DTp..P.F
 800691c:	e0808056 02e09090 80605434 46026080     V.......4T`..`.F
 800692c:	70101056 02709090 b0605444 460260c0     V..p..p.DT`..`.F
 800693c:	40502056 014040e0 90705545 02708060     V P@.@@.EUp.`.p.
 800694c:	80805646 909090e0 40563612 4040c000     FV.......6V@..@@
 800695c:	573711e0 20200020 0240a020 80805646     ..7W .   .@.FV..
 800696c:	90a0c0a0 c0563612 40404040 544402e0     .....6V.@@@@..DT
 800697c:	9090f0a0 e0544402 02909090 90605444     .....DT.....DT`.
 800698c:	45016090 9090e055 450180e0 90907055     .`.EU......EUp..
 800699c:	44021070 8090e054 54440280 e030c070     p..DT.....DTp.0.
 80069ac:	40564602 4040e040 54440230 70909090     .FV@@.@@0.DT...p
 80069bc:	a0543412 0240a0a0 90905444 4402f0f0     .4T...@.DT.....D
 80069cc:	60609054 55450190 20509090 54440240     T.``..EU..P @.DT
 80069dc:	f04020f0 20563612 4040c040 56162220     . @..6V @.@@ ".V
 80069ec:	80808080 36128080 60408056 06804040     .......6V.@`@@..
 80069fc:	a0505242 000000ff                       BRP.....

08006a04 <u8g_font_gdr30n>:
 8006a04:	e8444700 00001def 3a2a0000 1df82600     .GD.......*:.&..
 8006a14:	3c141200 00110215 c00100c0 00c00100     ...<............
 8006a24:	c100c001 c3f000c1 c0cff8c0 0f00df7c     ............|...
 8006a34:	e00300fc 00e00300 3c00fc0f cff800df     ...........<....
 8006a44:	80c3f080 0180c140 c00100c0 00c00100     ....@...........
 8006a54:	11008001 01143311 00c00005 0100c001     .....3..........
 8006a64:	c00100c0 00c00100 0100c001 c00100c0     ................
 8006a74:	80ffff00 0180ffff c00100c0 00c00100     ................
 8006a84:	0100c001 c00100c0 00800100 0b0d0d07     ................
 8006a94:	3c08f902 1e1efefe 381c1c1e 0e406030     ...<.......80`@.
 8006aa4:	01100402 fffc7f0b 060606f8 38ff030b     ...............8
 8006ab4:	f8fcfc7c 8a2e1470 00f80117 00003000     |...p........0..
 8006ac4:	f00000f0 00e00000 0100e001 c00100c0     ................
 8006ad4:	00c00300 07008003 80070080 00000700     ................
 8006ae4:	0f00000f 000e0000 00001e00 1c00001c     ................
 8006af4:	003c0000 00003800 78000078 00700000     ..<..8..x..x..p.
 8006b04:	0000f000 e00000e0 00e00100 0300c001     ................
 8006b14:	c00300c0 00800300 07008007 00070080     ................
 8006b24:	00000f00 1e00000e 001e0000 00001c00     ................
 8006b34:	3c00003c 00380000 00007800 f0000070     <..<..8..x..p...
 8006b44:	00c00000 571d1300 01000217 fc0700f8     .......W........
 8006b54:	001e0e00 18000f1c 07388007 c0033880     ..........8..8..
 8006b64:	70c00370 0370c003 e001f0e0 f0e001f0     p..p..p.........
 8006b74:	01f0e001 e001f0e0 f0e001f0 01f0e001     ................
 8006b84:	e001f0e0 78c001f0 0378c001 800378c0     .......x..x..x..
 8006b94:	3c80033c 071e0003 000e0f00 0300fc07     <..<............
 8006ba4:	1d1100f0 00031757 01006000 e00f00e0     ....W....`......
 8006bb4:	00e07f00 0100e0ff e00100e0 00e00100     ................
 8006bc4:	0100e001 e00100e0 00e00100 0100e001     ................
 8006bd4:	e00100e0 00e00100 0100e001 e00100e0     ................
 8006be4:	00e00100 0100e001 e00100e0 00e00100     ................
 8006bf4:	0100e001 f00300e0 00fe3f00 1180ff7f     .........?......
 8006c04:	0216571d 00f80100 1c00fe07 0f38001f     .W............8.
 8006c14:	800f7800 f0800770 07e08007 80070080     .x..p...........
 8006c24:	00800700 0f00000f 001e0000 00001e00     ................
 8006c34:	7800003c 00f00000 0100f000 c00300e0     <..x............
 8006c44:	00800700 0f00000f 001e0000 80003c80     .............<..
 8006c54:	f0800078 ffff8001 80ffff80 16571d12     x.............W.
 8006c64:	f8010001 00fe0700 3c001f1e 0738000f     ...........<..8.
 8006c74:	80077880 00800770 07008007 000f0000     .x..p...........
 8006c84:	00001e00 f800003c 00fe0300 00003f00     ....<........?..
 8006c94:	0700800f c0030080 00c00300 0300c003     ................
 8006ca4:	c00300c0 00c00300 07808007 000fe080     ................
 8006cb4:	3f003e78 e00700fc 571d1300 00000117     x>.?.......W....
 8006cc4:	0f000003 001f0000 00003f00 7f00007f     .........?......
 8006cd4:	00ef0000 0100cf00 8f0300cf 008f0300     ................
 8006ce4:	0e000f07 0f0e000f 000f1c00 38000f18     ...............8
 8006cf4:	0f70000f 000f7000 ffe0ffff 0f00c0ff     ..p..p..........
 8006d04:	000f0000 00000f00 0f00000f 000f0000     ................
 8006d14:	01803f00 1d12e0ff 00021757 00800000     .?......W.......
 8006d24:	ff1f8001 00fe1f00 18000018 00180000     ................
 8006d34:	00001800 38000038 00380000 00f03f00     ....8..8..8..?..
 8006d44:	7800fc3f 0f20003f 80070000 00c00700     ?..x?. .........
 8006d54:	0300c003 c00300c0 00c00300 0300c003     ................
 8006d64:	80070080 e0800780 3e78000f 00fc3f00     ..........x>.?..
 8006d74:	1200f007 0317571d 00070000 00003f00     .....W.......?..
 8006d84:	e00100f8 00c00300 0e00000f 001e0000     ................
 8006d94:	00003c00 78000038 f8780000 00fe7700     .<..8..x..x..w..
 8006da4:	f8001ffe 07f0800f c007f080 f0c003f0     ................
 8006db4:	03f0c003 c003f0c0 78c003f8 03788003     ...........x..x.
 8006dc4:	80073c80 1f00073c fc0f000e 00f00300     .<..<...........
 8006dd4:	17511b13 ff7f0002 e0ff7fc0 40c00160     ..Q.........`..@
 8006de4:	03c0c003 80030080 00000700 0e000007     ................
 8006df4:	000e0000 00001c00 3800001c 00380000     ...........8..8.
 8006e04:	00003800 70000070 00e00000 0100e000     .8..p..p........
 8006e14:	c00100c0 00c00300 07008007 000f0080     ................
 8006e24:	00000f00 1200001c 0216571d 00f80300     .........W......
 8006e34:	1c00fe0f 0f38001f 80073000 70800770     ......8..0..p..p
 8006e44:	07708007 00077080 3e000f78 bc1f001e     ..p..p..x..>....
 8006e54:	00f00f00 0700fc03 3f1e00fe 800f3c00     ...........?.<..
 8006e64:	70c00778 03f0c007 c003f0c0 f0c003f0     x..p............
 8006e74:	03f0c003 80077880 3e00077c fc1f000e     .....x..|..>....
 8006e84:	00e00700 175a1e13 f801ff02 00fe0700     ......Z.........
 8006e94:	1c001f0e 0738800f c0037880 f0c00370     ......8..x..p...
 8006ea4:	01f0e003 e001f0e0 f0e001f0 01f8e001     ................
 8006eb4:	e00378e0 3ee0077c f91fe00d c0e107e0     .x..|..>........
 8006ec4:	00c00300 0700c003 80070080 00000f00     ................
 8006ed4:	3c00001e 00780000 0300f000 801f00e0     ...<..x.........
 8006ee4:	00003800 0b171706 7c38ff03 70f8fcfc     .8........8|...p
	...
 8006efc:	38000000 f8fcfc7c 00000070 00000043     ...8|...p...C...
 8006f0c:	49534f50 00000058 0000002e              POSIX.......

08006f18 <_ctype_>:
 8006f18:	20202000 20202020 28282020 20282828     .         ((((( 
 8006f28:	20202020 20202020 20202020 20202020                     
 8006f38:	10108820 10101010 10101010 10101010      ...............
 8006f48:	04040410 04040404 10040404 10101010     ................
 8006f58:	41411010 41414141 01010101 01010101     ..AAAAAA........
 8006f68:	01010101 01010101 01010101 10101010     ................
 8006f78:	42421010 42424242 02020202 02020202     ..BBBBBB........
 8006f88:	02020202 02020202 02020202 10101010     ................
 8006f98:	00000020 00000000 00000000 00000000      ...............
	...
