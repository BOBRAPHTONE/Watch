   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 2
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"u8g_clip.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.u8g_IsBBXIntersection,"ax",%progbits
  16              		.align	1
  17              		.p2align 2,,3
  18              		.global	u8g_IsBBXIntersection
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	u8g_IsBBXIntersection:
  25              	.LFB1:
  26              		.file 1 "u8g/u8g_clip.c"
   1:u8g/u8g_clip.c **** /*
   2:u8g/u8g_clip.c **** 
   3:u8g/u8g_clip.c ****   u8g_clip.c
   4:u8g/u8g_clip.c ****   
   5:u8g/u8g_clip.c ****   procedures for clipping
   6:u8g/u8g_clip.c ****   taken over from procs in u8g_pb.c
   7:u8g/u8g_clip.c **** 
   8:u8g/u8g_clip.c ****   Universal 8bit Graphics Library
   9:u8g/u8g_clip.c ****   
  10:u8g/u8g_clip.c ****   Copyright (c) 2012, olikraus@gmail.com
  11:u8g/u8g_clip.c ****   All rights reserved.
  12:u8g/u8g_clip.c **** 
  13:u8g/u8g_clip.c ****   Redistribution and use in source and binary forms, with or without modification, 
  14:u8g/u8g_clip.c ****   are permitted provided that the following conditions are met:
  15:u8g/u8g_clip.c **** 
  16:u8g/u8g_clip.c ****   * Redistributions of source code must retain the above copyright notice, this list 
  17:u8g/u8g_clip.c ****     of conditions and the following disclaimer.
  18:u8g/u8g_clip.c ****     
  19:u8g/u8g_clip.c ****   * Redistributions in binary form must reproduce the above copyright notice, this 
  20:u8g/u8g_clip.c ****     list of conditions and the following disclaimer in the documentation and/or other 
  21:u8g/u8g_clip.c ****     materials provided with the distribution.
  22:u8g/u8g_clip.c **** 
  23:u8g/u8g_clip.c ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
  24:u8g/u8g_clip.c ****   CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
  25:u8g/u8g_clip.c ****   INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  26:u8g/u8g_clip.c ****   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
  27:u8g/u8g_clip.c ****   DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
  28:u8g/u8g_clip.c ****   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  29:u8g/u8g_clip.c ****   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  30:u8g/u8g_clip.c ****   NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
  31:u8g/u8g_clip.c ****   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
  32:u8g/u8g_clip.c ****   CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
  33:u8g/u8g_clip.c ****   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  34:u8g/u8g_clip.c ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
  35:u8g/u8g_clip.c ****   ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
  36:u8g/u8g_clip.c ****   
  37:u8g/u8g_clip.c ****   Notes
  38:u8g/u8g_clip.c ****   
  39:u8g/u8g_clip.c ****   This is one of the most critical parts of u8glib. It must be fast, but still reliable.
  40:u8g/u8g_clip.c ****   Based on the intersection program (see tools folder), there is minimized version of
  41:u8g/u8g_clip.c ****   the condition for the intersaction test:
  42:u8g/u8g_clip.c ****     minimized version
  43:u8g/u8g_clip.c ****     ---1----0 1             b1 <= a2 && b1 > b2
  44:u8g/u8g_clip.c ****     -----1--0 1             b2 >= a1 && b1 > b2
  45:u8g/u8g_clip.c ****     ---1-1--- 1             b1 <= a2 && b2 >= a1
  46:u8g/u8g_clip.c ****   It includes the assumption, that a1 <= a2 is always true (correct, because
  47:u8g/u8g_clip.c ****   a1, a2 are the page dimensions.
  48:u8g/u8g_clip.c **** 
  49:u8g/u8g_clip.c ****   The direct implementation of the above result is done in:
  50:u8g/u8g_clip.c ****   uint8_t u8g_is_intersection_boolean(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1)
  51:u8g/u8g_clip.c ****   However, this is slower than a decision tree version:  
  52:u8g/u8g_clip.c ****   static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g
  53:u8g/u8g_clip.c ****   Also suprising is, that the macro implementation is slower than the inlined version.
  54:u8g/u8g_clip.c ****   
  55:u8g/u8g_clip.c ****   The decision tree is based on the expansion of the truth table.
  56:u8g/u8g_clip.c ****   
  57:u8g/u8g_clip.c **** */
  58:u8g/u8g_clip.c **** 
  59:u8g/u8g_clip.c **** #include "u8g.h"
  60:u8g/u8g_clip.c **** 
  61:u8g/u8g_clip.c **** #ifdef __GNUC__
  62:u8g/u8g_clip.c **** #define U8G_ALWAYS_INLINE __inline__ __attribute__((always_inline))
  63:u8g/u8g_clip.c **** #else
  64:u8g/u8g_clip.c **** #define U8G_ALWAYS_INLINE
  65:u8g/u8g_clip.c ****  #endif 
  66:u8g/u8g_clip.c **** 
  67:u8g/u8g_clip.c **** /*
  68:u8g/u8g_clip.c ****   intersection assumptions:
  69:u8g/u8g_clip.c ****     a1 <= a2 is always true    
  70:u8g/u8g_clip.c ****     
  71:u8g/u8g_clip.c ****     minimized version
  72:u8g/u8g_clip.c ****     ---1----0 1             b1 <= a2 && b1 > b2
  73:u8g/u8g_clip.c ****     -----1--0 1             b2 >= a1 && b1 > b2
  74:u8g/u8g_clip.c ****     ---1-1--- 1             b1 <= a2 && b2 >= a1
  75:u8g/u8g_clip.c ****   */
  76:u8g/u8g_clip.c **** 
  77:u8g/u8g_clip.c **** #ifdef OLD_CODE_WHICH_IS_TOO_SLOW
  78:u8g/u8g_clip.c **** static uint8_t u8g_is_intersection_boolean(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t 
  79:u8g/u8g_clip.c **** {
  80:u8g/u8g_clip.c ****   uint8_t c1, c2, c3, tmp;
  81:u8g/u8g_clip.c ****   c1 = v0 <= a1;
  82:u8g/u8g_clip.c ****   c2 = v1 >= a0;
  83:u8g/u8g_clip.c ****   c3 = v0 > v1;
  84:u8g/u8g_clip.c ****   
  85:u8g/u8g_clip.c ****   tmp = c1;
  86:u8g/u8g_clip.c ****   c1 &= c2;
  87:u8g/u8g_clip.c ****   c2 &= c3;
  88:u8g/u8g_clip.c ****   c3 &= tmp;
  89:u8g/u8g_clip.c ****   c1 |= c2;
  90:u8g/u8g_clip.c ****   c1 |= c3;
  91:u8g/u8g_clip.c ****   return c1 & 1;
  92:u8g/u8g_clip.c **** }
  93:u8g/u8g_clip.c **** #endif
  94:u8g/u8g_clip.c **** 
  95:u8g/u8g_clip.c **** #define U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1) ((uint8_t)( (v0) <= (a1) ) ? ( ( (v1) >= (a0) ) ? ( 
  96:u8g/u8g_clip.c **** 
  97:u8g/u8g_clip.c **** //static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g
  98:u8g/u8g_clip.c **** static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8
  99:u8g/u8g_clip.c **** {
 100:u8g/u8g_clip.c ****   /* surprisingly the macro leads to larger code */
 101:u8g/u8g_clip.c ****   /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
 102:u8g/u8g_clip.c ****   if ( v0 <= a1 )
 103:u8g/u8g_clip.c ****   {
 104:u8g/u8g_clip.c ****     if ( v1 >= a0 )
 105:u8g/u8g_clip.c ****     {
 106:u8g/u8g_clip.c ****       return 1;
 107:u8g/u8g_clip.c ****     }
 108:u8g/u8g_clip.c ****     else
 109:u8g/u8g_clip.c ****     {
 110:u8g/u8g_clip.c ****       if ( v0 > v1 )
 111:u8g/u8g_clip.c ****       {
 112:u8g/u8g_clip.c **** 	return 1;
 113:u8g/u8g_clip.c ****       }
 114:u8g/u8g_clip.c ****       else
 115:u8g/u8g_clip.c ****       {
 116:u8g/u8g_clip.c **** 	return 0;
 117:u8g/u8g_clip.c ****       }
 118:u8g/u8g_clip.c ****     }
 119:u8g/u8g_clip.c ****   }
 120:u8g/u8g_clip.c ****   else
 121:u8g/u8g_clip.c ****   {
 122:u8g/u8g_clip.c ****     if ( v1 >= a0 )
 123:u8g/u8g_clip.c ****     {
 124:u8g/u8g_clip.c ****       if ( v0 > v1 )
 125:u8g/u8g_clip.c ****       {
 126:u8g/u8g_clip.c **** 	return 1;
 127:u8g/u8g_clip.c ****       }
 128:u8g/u8g_clip.c ****       else
 129:u8g/u8g_clip.c ****       {
 130:u8g/u8g_clip.c **** 	return 0;
 131:u8g/u8g_clip.c ****       }
 132:u8g/u8g_clip.c ****     }
 133:u8g/u8g_clip.c ****     else
 134:u8g/u8g_clip.c ****     {
 135:u8g/u8g_clip.c ****       return 0;
 136:u8g/u8g_clip.c ****     }
 137:u8g/u8g_clip.c ****   }
 138:u8g/u8g_clip.c **** }
 139:u8g/u8g_clip.c **** 
 140:u8g/u8g_clip.c **** 
 141:u8g/u8g_clip.c **** uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
 142:u8g/u8g_clip.c **** {
  27              		.loc 1 142 0
  28              		.cfi_startproc
  29              		@ args = 4, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
  33 0000 70B4     		push	{r4, r5, r6}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 12
  36              		.cfi_offset 4, -12
  37              		.cfi_offset 5, -8
  38              		.cfi_offset 6, -4
  39              		.loc 1 142 0
  40 0002 9DF80C40 		ldrb	r4, [sp, #12]	@ zero_extendqisi2
  41              	.LVL1:
  42              	.LBB6:
  43              	.LBB7:
 102:u8g/u8g_clip.c ****   {
  44              		.loc 1 102 0
  45 0006 90F83B60 		ldrb	r6, [r0, #59]	@ zero_extendqisi2
  46              	.LBE7:
  47              	.LBE6:
 143:u8g/u8g_clip.c ****   register u8g_uint_t tmp;
 144:u8g/u8g_clip.c ****   tmp = y;
 145:u8g/u8g_clip.c ****   tmp += h;
 146:u8g/u8g_clip.c ****   tmp--;
  48              		.loc 1 146 0
  49 000a 013C     		subs	r4, r4, #1
  50              	.LVL2:
  51 000c 1444     		add	r4, r4, r2
  52              	.LVL3:
  53              	.LBB11:
  54              	.LBB8:
 102:u8g/u8g_clip.c ****   {
  55              		.loc 1 102 0
  56 000e 9642     		cmp	r6, r2
  57              	.LBE8:
  58              	.LBE11:
  59              		.loc 1 146 0
  60 0010 E4B2     		uxtb	r4, r4
  61              	.LVL4:
 147:u8g/u8g_clip.c ****   if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
  62              		.loc 1 147 0
  63 0012 90F83950 		ldrb	r5, [r0, #57]	@ zero_extendqisi2
  64              	.LVL5:
  65              	.LBB12:
  66              	.LBB9:
 102:u8g/u8g_clip.c ****   {
  67              		.loc 1 102 0
  68 0016 12D3     		bcc	.L2
 104:u8g/u8g_clip.c ****     {
  69              		.loc 1 104 0
  70 0018 A542     		cmp	r5, r4
  71 001a 12D8     		bhi	.L12
  72              	.L3:
  73              	.LVL6:
  74              	.LBE9:
  75              	.LBE12:
  76              	.LBB13:
  77              	.LBB14:
 102:u8g/u8g_clip.c ****   {
  78              		.loc 1 102 0
  79 001c 90F83A40 		ldrb	r4, [r0, #58]	@ zero_extendqisi2
  80              	.LVL7:
  81              	.LBE14:
  82              	.LBE13:
 148:u8g/u8g_clip.c ****     return 0; 
 149:u8g/u8g_clip.c ****   
 150:u8g/u8g_clip.c ****   tmp = x;
 151:u8g/u8g_clip.c ****   tmp += w;
 152:u8g/u8g_clip.c ****   tmp--;
  83              		.loc 1 152 0
  84 0020 013B     		subs	r3, r3, #1
  85              	.LVL8:
  86 0022 0B44     		add	r3, r3, r1
  87              	.LBB19:
  88              	.LBB15:
 102:u8g/u8g_clip.c ****   {
  89              		.loc 1 102 0
  90 0024 8C42     		cmp	r4, r1
  91              	.LBE15:
  92              	.LBE19:
  93              		.loc 1 152 0
  94 0026 DBB2     		uxtb	r3, r3
  95              	.LVL9:
 153:u8g/u8g_clip.c ****   return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
  96              		.loc 1 153 0
  97 0028 90F83820 		ldrb	r2, [r0, #56]	@ zero_extendqisi2
  98              	.LVL10:
  99              	.LBB20:
 100              	.LBB16:
 102:u8g/u8g_clip.c ****   {
 101              		.loc 1 102 0
 102 002c 0ED3     		bcc	.L5
 104:u8g/u8g_clip.c ****     {
 103              		.loc 1 104 0
 104 002e 9A42     		cmp	r2, r3
 105 0030 13D9     		bls	.L8
 106              	.LBE16:
 107              	.LBE20:
 148:u8g/u8g_clip.c ****     return 0; 
 108              		.loc 1 148 0
 109 0032 9942     		cmp	r1, r3
 110 0034 94BF     		ite	ls
 111 0036 0020     		movls	r0, #0
 112              	.LVL11:
 113 0038 0120     		movhi	r0, #1
 114              	.L14:
 154:u8g/u8g_clip.c **** }
 115              		.loc 1 154 0
 116 003a 70BC     		pop	{r4, r5, r6}
 117              	.LCFI1:
 118              		.cfi_remember_state
 119              		.cfi_restore 6
 120              		.cfi_restore 5
 121              		.cfi_restore 4
 122              		.cfi_def_cfa_offset 0
 123              	.LVL12:
 124 003c 7047     		bx	lr
 125              	.LVL13:
 126              	.L2:
 127              	.LCFI2:
 128              		.cfi_restore_state
 129              	.LBB21:
 130              	.LBB10:
 122:u8g/u8g_clip.c ****     {
 131              		.loc 1 122 0
 132 003e A542     		cmp	r5, r4
 133 0040 01D8     		bhi	.L9
 134              	.L12:
 124:u8g/u8g_clip.c ****       {
 135              		.loc 1 124 0
 136 0042 A242     		cmp	r2, r4
 137 0044 EAD8     		bhi	.L3
 138              	.LVL14:
 139              	.L9:
 140              	.LBE10:
 141              	.LBE21:
 142              		.loc 1 154 0
 143 0046 70BC     		pop	{r4, r5, r6}
 144              	.LCFI3:
 145              		.cfi_remember_state
 146              		.cfi_restore 6
 147              		.cfi_restore 5
 148              		.cfi_restore 4
 149              		.cfi_def_cfa_offset 0
 150              	.LVL15:
 148:u8g/u8g_clip.c ****   
 151              		.loc 1 148 0
 152 0048 0020     		movs	r0, #0
 153              	.LVL16:
 154              		.loc 1 154 0
 155 004a 7047     		bx	lr
 156              	.LVL17:
 157              	.L5:
 158              	.LCFI4:
 159              		.cfi_restore_state
 160              	.LBB22:
 161              	.LBB17:
 122:u8g/u8g_clip.c ****     {
 162              		.loc 1 122 0
 163 004c 9A42     		cmp	r2, r3
 164 004e FAD8     		bhi	.L9
 165              	.LBE17:
 166              	.LBE22:
 148:u8g/u8g_clip.c ****   
 167              		.loc 1 148 0
 168 0050 9942     		cmp	r1, r3
 169 0052 94BF     		ite	ls
 170 0054 0020     		movls	r0, #0
 171              	.LVL18:
 172 0056 0120     		movhi	r0, #1
 173 0058 EFE7     		b	.L14
 174              	.LVL19:
 175              	.L8:
 176              	.LBB23:
 177              	.LBB18:
 106:u8g/u8g_clip.c ****     }
 178              		.loc 1 106 0
 179 005a 0120     		movs	r0, #1
 180              	.LVL20:
 181              	.LBE18:
 182              	.LBE23:
 183              		.loc 1 154 0
 184 005c 70BC     		pop	{r4, r5, r6}
 185              	.LCFI5:
 186              		.cfi_restore 6
 187              		.cfi_restore 5
 188              		.cfi_restore 4
 189              		.cfi_def_cfa_offset 0
 190              	.LVL21:
 191 005e 7047     		bx	lr
 192              		.cfi_endproc
 193              	.LFE1:
 195              		.text
 196              	.Letext0:
 197              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 198              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 199              		.file 4 "u8g/u8g.h"
DEFINED SYMBOLS
                            *ABS*:00000000 u8g_clip.c
C:\Users\BOBAFW~1\AppData\Local\Temp\ccgL5iQP.s:16     .text.u8g_IsBBXIntersection:00000000 $t
C:\Users\BOBAFW~1\AppData\Local\Temp\ccgL5iQP.s:24     .text.u8g_IsBBXIntersection:00000000 u8g_IsBBXIntersection

NO UNDEFINED SYMBOLS
